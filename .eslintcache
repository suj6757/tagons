[{"C:\\tagons\\src\\index.js":"1","C:\\tagons\\src\\AppRenderer.js":"2","C:\\tagons\\src\\constants\\defaultValues.js":"3","C:\\tagons\\src\\helpers\\Utils.js":"4","C:\\tagons\\src\\reportWebVitals.js":"5","C:\\tagons\\src\\App.js":"6","C:\\tagons\\src\\redux\\store.js":"7","C:\\tagons\\src\\helpers\\authHelper.js":"8","C:\\tagons\\src\\helpers\\Firebase.js":"9","C:\\tagons\\src\\views\\error.js":"10","C:\\tagons\\src\\views\\unauthorized.js":"11","C:\\tagons\\src\\redux\\reducers.js":"12","C:\\tagons\\src\\redux\\sagas.js":"13","C:\\tagons\\src\\lang\\index.js":"14","C:\\tagons\\src\\views\\user\\index.js":"15","C:\\tagons\\src\\views\\app\\index.js":"16","C:\\tagons\\src\\components\\common\\react-notifications\\index.js":"17","C:\\tagons\\src\\components\\common\\CustomBootstrap.js":"18","C:\\tagons\\src\\helpers\\IntlMessages.js":"19","C:\\tagons\\src\\redux\\settings\\reducer.js":"20","C:\\tagons\\src\\redux\\menu\\reducer.js":"21","C:\\tagons\\src\\redux\\auth\\reducer.js":"22","C:\\tagons\\src\\redux\\auth\\saga.js":"23","C:\\tagons\\src\\redux\\chat\\reducer.js":"24","C:\\tagons\\src\\redux\\todo\\reducer.js":"25","C:\\tagons\\src\\redux\\chat\\saga.js":"26","C:\\tagons\\src\\redux\\surveyList\\reducer.js":"27","C:\\tagons\\src\\redux\\todo\\saga.js":"28","C:\\tagons\\src\\redux\\surveyList\\saga.js":"29","C:\\tagons\\src\\redux\\industry\\reducer.js":"30","C:\\tagons\\src\\redux\\surveyDetail\\saga.js":"31","C:\\tagons\\src\\redux\\start\\reducer.js":"32","C:\\tagons\\src\\redux\\surveyDetail\\reducer.js":"33","C:\\tagons\\src\\views\\user\\register.js":"34","C:\\tagons\\src\\views\\user\\login.js":"35","C:\\tagons\\src\\views\\user\\forgot-password.js":"36","C:\\tagons\\src\\views\\user\\reset-password.js":"37","C:\\tagons\\src\\lang\\entries\\en-US-rtl.js":"38","C:\\tagons\\src\\lang\\entries\\es-ES.js":"39","C:\\tagons\\src\\lang\\entries\\en-US.js":"40","C:\\tagons\\src\\layout\\UserLayout.js":"41","C:\\tagons\\src\\layout\\AppLayout.js":"42","C:\\tagons\\src\\components\\common\\react-notifications\\NotificationContainer.js":"43","C:\\tagons\\src\\components\\common\\react-notifications\\NotificationManager.js":"44","C:\\tagons\\src\\components\\common\\react-notifications\\Notifications.js":"45","C:\\tagons\\src\\redux\\actions.js":"46","C:\\tagons\\src\\redux\\auth\\actions.js":"47","C:\\tagons\\src\\redux\\surveyList\\actions.js":"48","C:\\tagons\\src\\redux\\surveyDetail\\actions.js":"49","C:\\tagons\\src\\redux\\todo\\actions.js":"50","C:\\tagons\\src\\redux\\chat\\actions.js":"51","C:\\tagons\\src\\views\\app\\gogo\\index.js":"52","C:\\tagons\\src\\views\\app\\about\\index.js":"53","C:\\tagons\\src\\views\\app\\second-menu\\index.js":"54","C:\\tagons\\src\\lang\\locales\\en_US.js":"55","C:\\tagons\\src\\lang\\locales\\es_ES.js":"56","C:\\tagons\\src\\components\\common\\react-notifications\\Notification.js":"57","C:\\tagons\\src\\redux\\industry\\actions.js":"58","C:\\tagons\\src\\redux\\start\\actions.js":"59","C:\\tagons\\src\\redux\\menu\\actions.js":"60","C:\\tagons\\src\\redux\\settings\\actions.js":"61","C:\\tagons\\src\\containers\\navs\\Topnav.js":"62","C:\\tagons\\src\\containers\\navs\\Leftmenu.js":"63","C:\\tagons\\src\\views\\app\\second-menu\\second.js":"64","C:\\tagons\\src\\views\\app\\about\\about.js":"65","C:\\tagons\\src\\views\\app\\gogo\\start.js":"66","C:\\tagons\\src\\containers\\navs\\Breadcrumb.js":"67","C:\\tagons\\src\\components\\common\\CustomSelectInput.js":"68","C:\\tagons\\src\\containers\\ui\\ReactTableCards.js":"69","C:\\tagons\\src\\components\\charts\\Bar.js":"70","C:\\tagons\\src\\components\\charts\\Bubble.js":"71","C:\\tagons\\src\\components\\charts\\ScatterDatetime.js":"72","C:\\tagons\\src\\components\\charts\\Line.js":"73","C:\\tagons\\src\\containers\\pages\\ShowRoom.js":"74","C:\\tagons\\src\\components\\charts\\config.js":"75","C:\\tagons\\src\\containers\\pages\\ActiveKeyword.js":"76","C:\\tagons\\src\\data\\products.js":"77","C:\\tagons\\src\\components\\DatatablePagination.js":"78","C:\\tagons\\src\\containers\\pages\\RelationImage.js":"79","C:\\tagons\\src\\views\\app\\prime\\index.js":"80","C:\\tagons\\src\\views\\app\\prime\\Prime.js":"81","C:\\tagons\\src\\components\\applications\\ChannelButton.js":"82","C:\\tagons\\src\\components\\charts\\CompareLine.js":"83","C:\\tagons\\src\\components\\charts\\CompareBar.js":"84","C:\\tagons\\src\\views\\app\\trend\\index.js":"85","C:\\tagons\\src\\services\\LoginService.js":"86","C:\\tagons\\src\\views\\app\\trend\\Social.js":"87","C:\\tagons\\src\\views\\app\\trend\\Overview.js":"88","C:\\tagons\\src\\views\\app\\trend\\Ecommerce.js":"89","C:\\tagons\\src\\views\\app\\prime\\Channels.js":"90","C:\\tagons\\src\\containers\\navs\\Leftmenulist.js":"91","C:\\tagons\\src\\components\\applications\\ChannelTable.js":"92","C:\\tagons\\src\\components\\charts\\HeatMap.js":"93","C:\\tagons\\src\\components\\charts\\NegativeBar.js":"94"},{"size":844,"mtime":1625325294948,"results":"95","hashOfConfig":"96"},{"size":794,"mtime":1625325294677,"results":"97","hashOfConfig":"96"},{"size":1559,"mtime":1626685275955,"results":"98","hashOfConfig":"96"},{"size":4492,"mtime":1625325294946,"results":"99","hashOfConfig":"96"},{"size":377,"mtime":1625325294969,"results":"100","hashOfConfig":"96"},{"size":2991,"mtime":1625325294676,"results":"101","hashOfConfig":"96"},{"size":782,"mtime":1626244411204,"results":"102","hashOfConfig":"96"},{"size":1196,"mtime":1626244411181,"results":"103","hashOfConfig":"96"},{"size":301,"mtime":1625325294945,"results":"104","hashOfConfig":"96"},{"size":2050,"mtime":1625325294981,"results":"105","hashOfConfig":"96"},{"size":2068,"mtime":1625325294982,"results":"106","hashOfConfig":"96"},{"size":646,"mtime":1626244411196,"results":"107","hashOfConfig":"96"},{"size":455,"mtime":1626244411196,"results":"108","hashOfConfig":"96"},{"size":684,"mtime":1625325294951,"results":"109","hashOfConfig":"96"},{"size":1490,"mtime":1625325294984,"results":"110","hashOfConfig":"96"},{"size":2072,"mtime":1626685275963,"results":"111","hashOfConfig":"96"},{"size":270,"mtime":1625325294872,"results":"112","hashOfConfig":"96"},{"size":295,"mtime":1625325294865,"results":"113","hashOfConfig":"96"},{"size":227,"mtime":1625325294945,"results":"114","hashOfConfig":"96"},{"size":373,"mtime":1625325294962,"results":"115","hashOfConfig":"96"},{"size":1457,"mtime":1625325294959,"results":"116","hashOfConfig":"96"},{"size":2566,"mtime":1625325294955,"results":"117","hashOfConfig":"96"},{"size":4862,"mtime":1625325294956,"results":"118","hashOfConfig":"96"},{"size":2407,"mtime":1625325294957,"results":"119","hashOfConfig":"96"},{"size":4038,"mtime":1625325294968,"results":"120","hashOfConfig":"96"},{"size":5492,"mtime":1625325294958,"results":"121","hashOfConfig":"96"},{"size":4226,"mtime":1625325294966,"results":"122","hashOfConfig":"96"},{"size":1871,"mtime":1625325294969,"results":"123","hashOfConfig":"96"},{"size":1970,"mtime":1625325294966,"results":"124","hashOfConfig":"96"},{"size":2598,"mtime":1626244411188,"results":"125","hashOfConfig":"96"},{"size":1816,"mtime":1625325294964,"results":"126","hashOfConfig":"96"},{"size":952,"mtime":1626244411204,"results":"127","hashOfConfig":"96"},{"size":810,"mtime":1625325294964,"results":"128","hashOfConfig":"96"},{"size":3113,"mtime":1625325294985,"results":"129","hashOfConfig":"96"},{"size":7202,"mtime":1626685275979,"results":"130","hashOfConfig":"96"},{"size":4720,"mtime":1625325294983,"results":"131","hashOfConfig":"96"},{"size":5790,"mtime":1625325294986,"results":"132","hashOfConfig":"96"},{"size":159,"mtime":1625325294949,"results":"133","hashOfConfig":"96"},{"size":153,"mtime":1625325294950,"results":"134","hashOfConfig":"96"},{"size":153,"mtime":1625325294950,"results":"135","hashOfConfig":"96"},{"size":511,"mtime":1626244411181,"results":"136","hashOfConfig":"96"},{"size":932,"mtime":1625325294953,"results":"137","hashOfConfig":"96"},{"size":1293,"mtime":1625325294870,"results":"138","hashOfConfig":"96"},{"size":2950,"mtime":1625325294871,"results":"139","hashOfConfig":"96"},{"size":2024,"mtime":1625325294871,"results":"140","hashOfConfig":"96"},{"size":5148,"mtime":1626244411181,"results":"141","hashOfConfig":"96"},{"size":1883,"mtime":1626244411188,"results":"142","hashOfConfig":"96"},{"size":1559,"mtime":1626244411204,"results":"143","hashOfConfig":"96"},{"size":742,"mtime":1626244411204,"results":"144","hashOfConfig":"96"},{"size":1399,"mtime":1626244411212,"results":"145","hashOfConfig":"96"},{"size":1803,"mtime":1626244411188,"results":"146","hashOfConfig":"96"},{"size":566,"mtime":1625325294974,"results":"147","hashOfConfig":"96"},{"size":575,"mtime":1625325294972,"results":"148","hashOfConfig":"96"},{"size":584,"mtime":1625325294977,"results":"149","hashOfConfig":"96"},{"size":1459,"mtime":1625325294951,"results":"150","hashOfConfig":"96"},{"size":1589,"mtime":1625325294952,"results":"151","hashOfConfig":"96"},{"size":1837,"mtime":1626244411165,"results":"152","hashOfConfig":"96"},{"size":2066,"mtime":1626244411188,"results":"153","hashOfConfig":"96"},{"size":271,"mtime":1626244411196,"results":"154","hashOfConfig":"96"},{"size":4728,"mtime":1626244411188,"results":"155","hashOfConfig":"96"},{"size":359,"mtime":1626244411196,"results":"156","hashOfConfig":"96"},{"size":7348,"mtime":1626685275963,"results":"157","hashOfConfig":"96"},{"size":1869,"mtime":1626685275955,"results":"158","hashOfConfig":"96"},{"size":656,"mtime":1625325294978,"results":"159","hashOfConfig":"96"},{"size":640,"mtime":1625325294972,"results":"160","hashOfConfig":"96"},{"size":32041,"mtime":1626244411212,"results":"161","hashOfConfig":"96"},{"size":1631,"mtime":1625325294906,"results":"162","hashOfConfig":"96"},{"size":314,"mtime":1625325294865,"results":"163","hashOfConfig":"96"},{"size":7436,"mtime":1626244411181,"results":"164","hashOfConfig":"96"},{"size":8664,"mtime":1626244411141,"results":"165","hashOfConfig":"96"},{"size":8112,"mtime":1626244411141,"results":"166","hashOfConfig":"96"},{"size":12686,"mtime":1626244411157,"results":"167","hashOfConfig":"96"},{"size":4926,"mtime":1626244411149,"results":"168","hashOfConfig":"96"},{"size":2516,"mtime":1626244411173,"results":"169","hashOfConfig":"96"},{"size":24380,"mtime":1626781052820,"results":"170","hashOfConfig":"96"},{"size":494,"mtime":1626244411173,"results":"171","hashOfConfig":"96"},{"size":2506,"mtime":1625325294939,"results":"172","hashOfConfig":"96"},{"size":4956,"mtime":1625325294845,"results":"173","hashOfConfig":"96"},{"size":1372,"mtime":1626244411173,"results":"174","hashOfConfig":"96"},{"size":790,"mtime":1626685275971,"results":"175","hashOfConfig":"96"},{"size":25261,"mtime":1626685275971,"results":"176","hashOfConfig":"96"},{"size":7491,"mtime":1626685275947,"results":"177","hashOfConfig":"96"},{"size":271,"mtime":1626244411149,"results":"178","hashOfConfig":"96"},{"size":268,"mtime":1626244411149,"results":"179","hashOfConfig":"96"},{"size":1347,"mtime":1626685275979,"results":"180","hashOfConfig":"96"},{"size":939,"mtime":1626685275963,"results":"181","hashOfConfig":"96"},{"size":19766,"mtime":1626685275971,"results":"182","hashOfConfig":"96"},{"size":34960,"mtime":1626784386880,"results":"183","hashOfConfig":"96"},{"size":15004,"mtime":1626685275971,"results":"184","hashOfConfig":"96"},{"size":6445,"mtime":1626685275963,"results":"185","hashOfConfig":"96"},{"size":1740,"mtime":1626685275955,"results":"186","hashOfConfig":"96"},{"size":4029,"mtime":1626685275947,"results":"187","hashOfConfig":"96"},{"size":266,"mtime":1626685275947,"results":"188","hashOfConfig":"96"},{"size":270,"mtime":1626685275947,"results":"189","hashOfConfig":"96"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},"3mliq",{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"192"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"192"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"192"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"192"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"192"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"192"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"192"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"192"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"192"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"192"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"192"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"192"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},"C:\\tagons\\src\\index.js",[],["391","392","393","394","395","396","397"],"C:\\tagons\\src\\AppRenderer.js",[],"C:\\tagons\\src\\constants\\defaultValues.js",[],"C:\\tagons\\src\\helpers\\Utils.js",[],"C:\\tagons\\src\\reportWebVitals.js",[],"C:\\tagons\\src\\App.js",[],"C:\\tagons\\src\\redux\\store.js",[],"C:\\tagons\\src\\helpers\\authHelper.js",[],"C:\\tagons\\src\\helpers\\Firebase.js",[],"C:\\tagons\\src\\views\\error.js",[],"C:\\tagons\\src\\views\\unauthorized.js",[],"C:\\tagons\\src\\redux\\reducers.js",[],"C:\\tagons\\src\\redux\\sagas.js",[],"C:\\tagons\\src\\lang\\index.js",[],"C:\\tagons\\src\\views\\user\\index.js",[],"C:\\tagons\\src\\views\\app\\index.js",[],"C:\\tagons\\src\\components\\common\\react-notifications\\index.js",[],"C:\\tagons\\src\\components\\common\\CustomBootstrap.js",[],"C:\\tagons\\src\\helpers\\IntlMessages.js",[],"C:\\tagons\\src\\redux\\settings\\reducer.js",[],"C:\\tagons\\src\\redux\\menu\\reducer.js",[],"C:\\tagons\\src\\redux\\auth\\reducer.js",[],"C:\\tagons\\src\\redux\\auth\\saga.js",[],"C:\\tagons\\src\\redux\\chat\\reducer.js",[],"C:\\tagons\\src\\redux\\todo\\reducer.js",[],"C:\\tagons\\src\\redux\\chat\\saga.js",[],"C:\\tagons\\src\\redux\\surveyList\\reducer.js",[],"C:\\tagons\\src\\redux\\todo\\saga.js",[],"C:\\tagons\\src\\redux\\surveyList\\saga.js",[],"C:\\tagons\\src\\redux\\industry\\reducer.js",[],"C:\\tagons\\src\\redux\\surveyDetail\\saga.js",[],"C:\\tagons\\src\\redux\\start\\reducer.js",[],"C:\\tagons\\src\\redux\\surveyDetail\\reducer.js",[],"C:\\tagons\\src\\views\\user\\register.js",[],"C:\\tagons\\src\\views\\user\\login.js",["398"],"import React, { useState, useEffect } from 'react';\r\n/* eslint no-unused-vars: 0 */\r\nimport { \r\n  Row, \r\n  Card, \r\n  CardTitle, \r\n  Label, \r\n  FormGroup, \r\n  Button, \r\n  CustomInput, \r\n  UncontrolledDropdown,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  DropdownMenu, } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { NotificationManager } from '../../components/common/react-notifications'; // eslint-disable-line no-unused-vars\r\n\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { login, UserInfo, logout } from '../../services/LoginService';\r\nimport { setCurrentUser } from '../../helpers/Utils';\r\n\r\nconst validatePassword = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your password';\r\n  } else if (value.length < 4) {\r\n    error = 'Value must be longer than 3 characters';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst Login = ({ history, loading, error, loginUserAction , logoutUserAction}) => {\r\n  const [loginBefore, setLoginBefore] = useState(UserInfo() !== null);\r\n  const [email] = useState('testuser');\r\n  const [password] = useState('1234');\r\n  const [rememberMe] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      NotificationManager.warning(error, 'Login Error', 3000, null, null, '');\r\n    }\r\n  }, [error]);\r\n\r\n  const onLoginView = () => {\r\n    setLoginBefore(false);\r\n  }\r\n\r\n  const onLogout = () => {\r\n    logout();\r\n  }\r\n\r\n  const onUserLogin = (values) => {\r\n    var requestData = {};\r\n    if (!loading) {\r\n      if (values.email !== '' && values.password !== '') {\r\n        requestData.UserId = values.email;\r\n        requestData.UserPassword = values.password;\r\n        axios.post(\"/login/Login\", requestData)\r\n        .then((response) => {\r\n          console.log('userLogin ->', response.data);\r\n          let errCode = response.data.ErrorCode;\r\n          let errMsg = response.data.Message;\r\n          if (errCode === \"OK\") {\r\n            // 로그인 성공\r\n            login(response.data.Userinfo, rememberMe);\r\n            setCurrentUser(response.data.Userinfo);\r\n            // TODO: Prime -> State 이동\r\n            history.push('/app/prime/prime');\r\n            console.log('CompanyName', UserInfo().CompanyName);\r\n          }\r\n          else {\r\n            // 로그인 실패\r\n            // alert(errMsg);\r\n            NotificationManager.error(errMsg, '로그인 실패', 3000, null, null, '');\r\n          }\r\n        })\r\n        .catch(function (error1) {\r\n            console.log(error1);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const initialValues = { email, password, rememberMe };\r\n\r\n  const handleLogout = () => {\r\n    // logoutUserAction(history);\r\n    console.log('handleLogout');\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <div className=\"user d-inline-block\">\r\n      <UncontrolledDropdown className=\"dropdown-menu-right\">\r\n        <DropdownToggle className=\"p-0\" color=\"empty\">\r\n          <span>\r\n            <img alt=\"Profile\" src=\"/assets/img/pic_default.png\" />\r\n          </span>\r\n        </DropdownToggle>\r\n        <DropdownMenu className=\"mt-2\" right>\r\n          <div className=\"name\">\r\n            <span>\r\n              <img alt=\"Profile\" src=\"/assets/img/pic_default.png\" />\r\n            </span>\r\n            <p>{UserInfo() !== null ? UserInfo().CompanyName : \"\"}</p>\r\n          </div>\r\n          <DropdownItem>MY PAGE</DropdownItem>\r\n          <DropdownItem onClick={() => onLoginView()}>LOGIN</DropdownItem>\r\n          <DropdownItem onClick={() => onLogout() }>LOGOUT</DropdownItem>\r\n        </DropdownMenu>\r\n      </UncontrolledDropdown>\r\n    </div>\r\n\r\n    <Row className={`h-100 login-area ${loginBefore && 'home-area'}`}>\r\n      <Colxx xxs=\"12\" md=\"12\" className=\"mx-auto my-auto\">\r\n        <Card className=\"\">\r\n          <div className=\"\">\r\n            <NavLink to=\"/\" className=\"home-logo white\">\r\n              <span className=\"logo-single\" />\r\n            </NavLink>\r\n\r\n            {loginBefore === true ?\r\n              <div className=\"quick-link\">\r\n                <NavLink to=\"/\" className=\"link1\">메뉴1</NavLink>\r\n                <NavLink to=\"/\" className=\"link2\">메뉴2</NavLink>\r\n                <NavLink to=\"/\" className=\"link3\">메뉴3</NavLink>\r\n                <NavLink to=\"/\" className=\"link4\">메뉴4</NavLink>\r\n                <NavLink to=\"/\" className=\"link5\">메뉴5</NavLink>\r\n              </div>\r\n            :\r\n            <Formik initialValues={initialValues} onSubmit={onUserLogin}>\r\n              {({ errors, touched }) => (\r\n                <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"email\"\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      validate={validatePassword}\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.password}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    {/* <NavLink to=\"/user/forgot-password\">\r\n                      <IntlMessages id=\"user.forgot-password-question\" />\r\n                    </NavLink> */}\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.login-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                  <CustomInput\r\n                    type=\"checkbox\"\r\n                    id=\"exCustomCheckbox\"\r\n                    label=\"Remember me\"\r\n                    name=\"rememberMe\"\r\n                    className=\"chk-remember\"\r\n                  />\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n            }\r\n\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  </>\r\n  );\r\n};\r\nexport default Login ;\r\n/* const mapStateToProps = ({ authUser }) => {\r\n  const { loading, error } = authUser;\r\n  return { loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  loginUserAction: loginUser,\r\n  logoutUserAction: logoutUser,\r\n})(Login); */","C:\\tagons\\src\\views\\user\\forgot-password.js",[],"C:\\tagons\\src\\views\\user\\reset-password.js",[],"C:\\tagons\\src\\lang\\entries\\en-US-rtl.js",[],"C:\\tagons\\src\\lang\\entries\\es-ES.js",[],"C:\\tagons\\src\\lang\\entries\\en-US.js",[],"C:\\tagons\\src\\layout\\UserLayout.js",[],"C:\\tagons\\src\\layout\\AppLayout.js",[],"C:\\tagons\\src\\components\\common\\react-notifications\\NotificationContainer.js",[],"C:\\tagons\\src\\components\\common\\react-notifications\\NotificationManager.js",[],"C:\\tagons\\src\\components\\common\\react-notifications\\Notifications.js",[],"C:\\tagons\\src\\redux\\actions.js",[],"C:\\tagons\\src\\redux\\auth\\actions.js",[],"C:\\tagons\\src\\redux\\surveyList\\actions.js",[],"C:\\tagons\\src\\redux\\surveyDetail\\actions.js",[],"C:\\tagons\\src\\redux\\todo\\actions.js",[],"C:\\tagons\\src\\redux\\chat\\actions.js",[],"C:\\tagons\\src\\views\\app\\gogo\\index.js",[],"C:\\tagons\\src\\views\\app\\about\\index.js",[],"C:\\tagons\\src\\views\\app\\second-menu\\index.js",[],"C:\\tagons\\src\\lang\\locales\\en_US.js",[],"C:\\tagons\\src\\lang\\locales\\es_ES.js",[],"C:\\tagons\\src\\components\\common\\react-notifications\\Notification.js",["399"],"// /* eslint-disable react-hooks/exhaustive-deps */\r\n// /* eslint-disable jsx-a11y/click-events-have-key-events */\r\n// /* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nconst Notification = ({\r\n  title,\r\n  type,\r\n  message,\r\n  customClassName,\r\n  timeOut,\r\n  onClick,\r\n  onRequestHide,\r\n}) => {\r\n  const requestHide = () => {\r\n    if (onRequestHide) {\r\n      onRequestHide();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let timer = null;\r\n    if (timeOut !== 0) {\r\n      timer = setTimeout(requestHide, timeOut);\r\n    }\r\n    return () => {\r\n      if (timer) {\r\n        clearTimeout(timer);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleClick = () => {\r\n    if (onClick) {\r\n      onClick();\r\n    }\r\n    requestHide();\r\n  };\r\n\r\n  const className = classnames([\r\n    'notification',\r\n    `notification-${type}`,\r\n    customClassName,\r\n  ]);\r\n  const titleHtml = title ? <h4 className=\"title\">{title}</h4> : null;\r\n  return (\r\n    <div className={className} onClick={() => handleClick()}>\r\n      <div className=\"notification-message\" role=\"alert\">\r\n        {titleHtml}\r\n        <div className=\"message\">{message}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nNotification.propTypes = {\r\n  type: PropTypes.oneOf([\r\n    'info',\r\n    'success',\r\n    'warning',\r\n    'error',\r\n    'primary',\r\n    'secondary',\r\n  ]),\r\n  title: PropTypes.node,\r\n  message: PropTypes.node,\r\n  timeOut: PropTypes.number,\r\n  onClick: PropTypes.func,\r\n  onRequestHide: PropTypes.func,\r\n  customClassName: PropTypes.string,\r\n};\r\n\r\nNotification.defaultProps = {\r\n  type: 'info',\r\n  title: null,\r\n  message: null,\r\n  timeOut: 5000,\r\n  onClick: () => {},\r\n  onRequestHide: () => {},\r\n  customClassName: '',\r\n};\r\n\r\nexport default Notification;\r\n","C:\\tagons\\src\\redux\\industry\\actions.js",[],"C:\\tagons\\src\\redux\\start\\actions.js",[],"C:\\tagons\\src\\redux\\menu\\actions.js",[],"C:\\tagons\\src\\redux\\settings\\actions.js",[],"C:\\tagons\\src\\containers\\navs\\Topnav.js",[],"C:\\tagons\\src\\containers\\navs\\Leftmenu.js",[],"C:\\tagons\\src\\views\\app\\second-menu\\second.js",[],"C:\\tagons\\src\\views\\app\\about\\about.js",[],"C:\\tagons\\src\\views\\app\\gogo\\start.js",["400","401","402","403","404","405","406","407"],"import React, { useState , useEffect} from 'react';\r\nimport { \r\n  Row, \r\n  Card, \r\n  CardBody, \r\n  Form, \r\n  FormGroup,\r\n  Nav,\r\n  NavItem,\r\n  TabContent,\r\n  TabPane,\r\n  Button,\r\n  Popover, \r\n  PopoverBody } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik, Field } from 'formik';\r\nimport { injectIntl } from 'react-intl';\r\nimport classnames from 'classnames';\r\nimport Select from 'react-select';\r\nimport DatePicker from 'react-datepicker';\r\nimport { ko } from \"date-fns/esm/locale\";\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport ShowRoom from '../../../containers/pages/ShowRoom';\r\nimport RelationImage from '../../../containers/pages/RelationImage';\r\nimport Bubble from '../../../components/charts/Bubble';\r\nimport Line from '../../../components/charts/Line';\r\nimport Bar from '../../../components/charts/Bar';\r\nimport Scatter from '../../../components/charts/ScatterDatetime';\r\nimport { ReactTableWithPaginationCard } from '../../../containers/ui/ReactTableCards';\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\nimport CustomSelectInput from '../../../components/common/CustomSelectInput';\r\nimport { getSearchCondition, getIndustryTotalcategoryList , getSearchType,\r\n         getIndustryPfactorGiRelatedwords,getGiBubble,getIndustryPfactorTrendandfactor} from '../../../redux/actions';\r\n\r\nconst Start = ({ intl }) => {\r\n  const dispatch = useDispatch();\r\n  const { industryApp } = useSelector(state => state.industryApp);\r\n  const store = useSelector(state => state.startApp);\r\n  const param1 = {};\r\n  const [startDateRange, setStartDateRange] = useState(new Date());\r\n  const [endDateRange, setEndDateRange] = useState(new Date());\r\n\r\n  const [selectedOptionsStep1, setSelectedOptionsStep1] = useState([]);// eslint-disable-line no-unused-vars\r\n  const [selectedOptionsStep2, setSelectedOptionsStep2] = useState([]);// eslint-disable-line no-unused-vars\r\n  const [selectedOptionsStep3, setSelectedOptionsStep3] = useState([]);// eslint-disable-line no-unused-vars\r\n\r\n  const [popoverOpenHelp1, setPopoverOpenHelp1] = useState(false);\r\n  const [popoverOpenHelp2, setPopoverOpenHelp2] = useState(false);\r\n  const [popoverOpenHelp3, setPopoverOpenHelp3] = useState(false);\r\n  const [popoverOpenHelp4, setPopoverOpenHelp4] = useState(false);\r\n  const [popoverOpenHelp5, setPopoverOpenHelp5] = useState(false);\r\n  const [popoverOpenHelp6, setPopoverOpenHelp6] = useState(false);\r\n \r\n  const [selectDataTypeStep1,setSelectDataTypeStep1] = useState([]); // eslint-disable-line no-unused-vars\r\n  const [selectDataTypeStep2,setSelectDataTypeStep2] = useState([]); // eslint-disable-line no-unused-vars\r\n  const [selectDataTypeStep3,setSelectDataTypeStep3] = useState([]); // eslint-disable-line no-unused-vars\r\n\r\n  const [selectCategoryUpper , setCategoryUpper] = useState([]);// eslint-disable-line no-unused-vars\r\n  const [selectName , setName] = useState('');// eslint-disable-line no-unused-vars\r\n  const [selectCategoryList, setCategoryList] = useState([]);// eslint-disable-line no-unused-vars\r\n\r\n  const [selectPretrendPercent, setPretrendPercent] = useState('0.0%');\r\n  const [showPreTrend, setShowPreTrend] = useState(false);\r\n\r\n  let categoryList = [];\r\n  let categoryList1 = [];\r\n  let categoryList2 = [];\r\n  const categoryList3 = [];\r\n\r\n  const { messages } = intl;\r\n  const [selectTableData, setTableData] = useState([]);\r\n  const [keyWordtext , setKeyWordtext] = useState('');\r\n  const [selectKeyword, setKeyword] = useState('');      \r\n  const [activeFirstTab, setActiveFirstTab] = useState('1');\r\n  const [activeSentiment, setActiveSentiment] = useState('1');\r\n  // api 호출시 로딩바 적용 테스트\r\n  const [loading, setLoading] = useState(false);\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [loaderror, setLoadError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    var date = new Date();\r\n    var date1 = new Date();\r\n    date.setDate(date.getDate() - 9);\r\n    setStartDateRange(date); //시작일 \r\n    \r\n    date1.setDate(date1.getDate() -2);\r\n    setEndDateRange(date1);// 종료일\r\n    setLoading(true);  \r\n    axios.post(\"/industry/GetIndustry_TotalCategory_List\")\r\n    .then((response) => {\r\n        categoryList = response.data;\r\n        setCategoryList(categoryList);\r\n        setCategory();\r\n        setLoading(false);\r\n    })\r\n    .catch(function (error) {\r\n        console.log(error);\r\n        setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n\r\n  const setCategory = () => {\r\n    let preKey = '';\r\n    \r\n    var c1value = {label: \"패션의류\", value: \"패션의류\"};\r\n    var c2value = {label: \"여성의류\", value: \"여성의류\"};\r\n    var c3value = {label: \"니트/스웨터\", value: \"니트/스웨터\"};\r\n    var tempcategoryList2 = [];\r\n    let categoryData = {};\r\n    categoryList1 = [];\r\n    categoryList.Data.forEach(function(item, index) {\r\n        if ( index === 0 ) {\r\n            categoryData = item;\r\n        }\r\n        if (preKey !== item.Category1 ){\r\n            preKey = item.Category1 ;\r\n            categoryList1.push({ label : preKey, value : preKey });\r\n        }\r\n    });\r\n    setSelectDataTypeStep1(categoryList1);\r\n    //setSelectDataTypeStep1(\"패션의류\");\r\n    setSelectedOptionsStep1(c1value);\r\n    preKey = '-1';\r\n    setSelectedOptionsStep2([]); \r\n    setSelectedOptionsStep3([]);\r\n    categoryList.Data.forEach(function(item,index){ // eslint-disable-line no-unused-vars\r\n        if (c1value.value === item.Category1 && preKey !== item.Category2 ){\r\n            preKey = item.Category2 ;\r\n            tempcategoryList2.push({label:preKey,value:preKey});\r\n        }\r\n    });\r\n    setSelectDataTypeStep2(tempcategoryList2);\r\n    setSelectedOptionsStep2(c2value); \r\n\r\n    setSelectedOptionsStep3([]);\r\n    tempcategoryList2 = [];\r\n    preKey = '-1';\r\n\r\n    categoryList.Data.forEach(function(item,index){ // eslint-disable-line no-unused-vars\r\n        if (c1value.value === item.Category1 && c2value.value === item.Category2 && preKey !== item.Category3 ){\r\n            preKey = item.Category3 ; \r\n            tempcategoryList2.push({label:preKey,value:preKey});\r\n        }\r\n    });\r\n    setSelectDataTypeStep3(tempcategoryList2);\r\n    setSelectedOptionsStep3(c3value);\r\n  }\r\n  \r\n  const category1Change = value =>{\r\n    setSelectedOptionsStep1(value);\r\n    setSelectedOptionsStep2([]); \r\n    setSelectedOptionsStep3([]);\r\n  \r\n    let preKey = '-1';\r\n    categoryList1 = [];\r\n    selectCategoryList.Data.forEach(function(item,index){ // eslint-disable-line no-unused-vars\r\n        if (value.value === item.Category1 && preKey !== item.Category2 ){\r\n            preKey = item.Category2 ;\r\n            categoryList1.push({label:preKey,value:preKey});\r\n        }\r\n    });\r\n    setSelectDataTypeStep2(categoryList1);\r\n  }\r\n  const category2Change = value =>{\r\n    setSelectedOptionsStep2(value); \r\n    setSelectedOptionsStep3([]);\r\n    let preKey = '-1';\r\n    categoryList2 = []; \r\n    selectCategoryList.Data.forEach(function(item,index){ // eslint-disable-line no-unused-vars\r\n        if (selectedOptionsStep1.value === item.Category1 && value.value === item.Category2 && preKey !== item.Category3 ){\r\n            preKey = item.Category3 ;\r\n            categoryList2.push({label:preKey,value:preKey});\r\n        }\r\n    });\r\n    setSelectDataTypeStep3(categoryList2);\r\n  }\r\n  //datePicker format 수정\r\n  const dateString = (dateValue) => {\r\n    let retStr = '';\r\n    //Year\r\n    retStr = retStr.concat(dateValue.getFullYear());\r\n    //Month\r\n    if(dateValue.getMonth() < 10) {\r\n        retStr = retStr.concat('-0', dateValue.getMonth() + 1);\r\n    }\r\n    else {\r\n        retStr = retStr.concat('-', dateValue.getMonth() + 1);\r\n    }\r\n    //Date\r\n    if(dateValue.getDate() < 10) {\r\n        retStr = retStr.concat('-0', dateValue.getDate());\r\n    }\r\n    else {\r\n        retStr = retStr.concat('-', dateValue.getDate());\r\n    }\r\n    return retStr;\r\n  }\r\n  //\r\n  const preTrendClick = () => {\r\n    console.log('preTrendClick',showPreTrend);\r\n    if (showPreTrend){\r\n      setShowPreTrend(false) ;\r\n    }\r\n    else{\r\n      setShowPreTrend(true) ;\r\n    }\r\n  }\r\n  //검색조건 엔터버튼 클릭\r\n  const handleSearchClick = (e) => {\r\n    var param = {};\r\n    var searchType = {};\r\n    param.FromDate = dateString(startDateRange);\r\n    param.ToDate = dateString(endDateRange);\r\n    param.Category1 = selectedOptionsStep1.value;\r\n    param.Category2 = selectedOptionsStep2.value;\r\n    param.Category3 = selectedOptionsStep3.value;\r\n    param.Keyword = keyWordtext;\r\n    param.Category_upper = '';\r\n    param.Name = '';\r\n    param.activeFirstTab = activeFirstTab;\r\n\r\n    searchType.ShowRoom = true;\r\n    searchType.TrendQuad  = true;\r\n    searchType.PostTrend  = false;\r\n    searchType.FactorNBrand  = false;\r\n    searchType.GiAnalysis  = true;\r\n    searchType.GiAnalysisBubble  = true;\r\n    searchType.RelationWord = false;\r\n    setShowPreTrend(false);\r\n    // 검색조건 스토어에 저장\r\n    dispatch(getSearchType(searchType)); // 검색 조건 추가\r\n    dispatch(getSearchCondition(param));\r\n  }\r\n  const chageShowTrend = (showVal) =>{\r\n    setShowPreTrend(showVal) ;\r\n  }\r\n  //검색조건 엔터버튼 클릭\r\n  const searchActivrClick = () => {\r\n    var param = {};\r\n    var searchType = {};\r\n    param.FromDate = dateString(startDateRange);\r\n    param.ToDate = dateString(endDateRange);\r\n    param.Category1 = selectedOptionsStep1.value;\r\n    param.Category2 = selectedOptionsStep2.value;\r\n    param.Category3 = selectedOptionsStep3.value;\r\n    param.Keyword = keyWordtext;\r\n    param.Category_upper = '';\r\n    param.Name = '';\r\n    param.activeFirstTab = activeFirstTab;\r\n\r\n    searchType.ShowRoom = false;\r\n    searchType.TrendQuad  = true;\r\n    searchType.PostTrend  = false;\r\n    searchType.FactorNBrand  = false;\r\n    searchType.GiAnalysis  = true;\r\n    searchType.GiAnalysisBubble  = true;\r\n    searchType.RelationWord = false;\r\n    // 검색조건 스토어에 저장\r\n    setShowPreTrend(false);\r\n    dispatch(getIndustryPfactorTrendandfactor(null));\r\n    dispatch(getIndustryPfactorGiRelatedwords(null));\r\n    dispatch(getGiBubble(null));\r\n    dispatch(getSearchType(searchType)); // 검색 조건 추가\r\n    dispatch(getSearchCondition(param));\r\n  }\r\n  const validateKeyword = (value) => {\r\n    let error;\r\n    if (!keyWordtext) {\r\n      error = 'No Keywords';\r\n    }\r\n    return error;\r\n  };\r\n  const onKeywordChange = (e) =>{\r\n    setKeyWordtext(e.target.value);\r\n  };\r\n  useEffect(() => {\r\n    searchActivrClick();\r\n  }, [activeFirstTab]);  \r\n  if (loading) return <div className=\"loading\" />;\r\n  if (loaderror) return <div>에러가 발생했습니다</div>;\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <Card>\r\n            <CardBody>\r\n              { /* s: 검색 조건 일단 여기 */ }\r\n              <Form className=\"select-box-wrap multi\">\r\n              <div className=\"tbl-vertical-heading\">\r\n                <table>\r\n                  <tbody>\r\n                    <tr>\r\n                      {/* vertical유형의 테이블 th 값은 인라인 스타일로 지정 바랍니다. */}\r\n                      <th style={{ width:'15%' }}>Period</th>\r\n                      <td style={{ width:'85%' }} colSpan=\"3\">\r\n                        <div className=\"date-picker-wrap\">\r\n                          <DatePicker\r\n                            locale={ko}\r\n                            dateFormat=\"yyyy.MM.dd\"\r\n                            selected={startDateRange}\r\n                            selectsStart\r\n                            startDate={startDateRange}\r\n                            endDate={endDateRange}\r\n                            onChange={setStartDateRange}\r\n                            placeholderText={messages['form-components.start']}\r\n                          />\r\n                          <span className=\"cal-range\"> ~ </span>\r\n                          <DatePicker\r\n                            locale={ko}\r\n                            dateFormat=\"yyyy.MM.dd\"\r\n                            selected={endDateRange}\r\n                            selectsEnd\r\n                            startDate={startDateRange}\r\n                            endDate={endDateRange}\r\n                            onChange={setEndDateRange}\r\n                            placeholderText={messages['form-components.end']}\r\n                          />\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th style={{ width:'15%' }}>Product(上) Category</th>\r\n                      <td style={{ width:'35%' }}>\r\n                        <FormGroup className=\"select-box\">\r\n                          <Select\r\n                            components={{ Input: CustomSelectInput }}\r\n                            className=\"react-select\"\r\n                            classNamePrefix=\"react-select\"\r\n                            name=\"form-field-name\"\r\n                            value={selectedOptionsStep1 }\r\n                            onChange={category1Change}\r\n                            options={selectDataTypeStep1}\r\n                          />\r\n                        </FormGroup>\r\n                        <FormGroup className=\"select-box\">\r\n                          <Select\r\n                            components={{ Input: CustomSelectInput }}\r\n                            className=\"react-select\"\r\n                            classNamePrefix=\"react-select\"\r\n                            name=\"form-field-name\"\r\n                            value={selectedOptionsStep2}\r\n                            onChange={category2Change}\r\n                            options={selectDataTypeStep2}\r\n                          />\r\n                        </FormGroup>\r\n                        <FormGroup className=\"select-box\">\r\n                          <Select\r\n                            components={{ Input: CustomSelectInput }}\r\n                            className=\"react-select\"\r\n                            classNamePrefix=\"react-select\"\r\n                            name=\"form-field-name\"\r\n                            value={selectedOptionsStep3}\r\n                            onChange={(val) => setSelectedOptionsStep3(val)}\r\n                            options={selectDataTypeStep3}\r\n                          />\r\n                        </FormGroup>\r\n                      </td>\r\n                      <th style={{ width:'15%' }}>Product(下) Category</th>\r\n                      <td style={{ width:'35%' }}>\r\n                      <Formik\r\n                        initialValues={{\r\n                          keyword: '',\r\n                        }}\r\n                         //onSubmit={onSubmit}\r\n                      >\r\n                      {({ errors, touched }) => (\r\n                        <FormGroup className=\"keyword-area\">\r\n                          <Field\r\n                            className=\"form-control\"\r\n                            name=\"keyword\"\r\n                            validate={validateKeyword}\r\n                            value={keyWordtext}\r\n                            onChange={onKeywordChange}\r\n                          />\r\n                          {errors.keyword && touched.keyword && (\r\n                            <div className=\"d-block noti-text\">\r\n                              {errors.keyword}\r\n                            </div>\r\n                          )}\r\n                        </FormGroup>\r\n                      )}\r\n                      </Formik>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n\r\n              <div className=\"text-center\">\r\n                <Button className=\"btn-xl mt-4\" color=\"gray\" onClick={handleSearchClick} >\r\n                  ENTER\r\n                </Button>\r\n              </div>\r\n              </Form>\r\n              { /* e: 검색 조건 일단 여기 */ }\r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n      </Row>\r\n      {/* s:showwoom */}\r\n      <Row className=\"mt-5\">\r\n        <Colxx xxs=\"12\">\r\n          <Card>\r\n            <CardBody>\r\n              <div className=\"box-title\">\r\n                <h2>Showroom</h2>\r\n                <button type=\"button\" className=\"help\" id=\"popover_1\" onClick={() => setPopoverOpenHelp1(true)} onKeyDown={() => setPopoverOpenHelp1(true)}><img src=\"/assets/img/icon/icon_help.png\" alt=\"도움말\" /></button>\r\n                <Popover \r\n                  placement=\"right\"\r\n                  isOpen={popoverOpenHelp1}\r\n                  target=\"popover_1\"\r\n                  toggle={() => setPopoverOpenHelp1(!popoverOpenHelp1)}\r\n                  trigger=\"legacy\"\r\n                >\r\n                  <PopoverBody>조회한 상품(키워드)와 관련한 상위 top14개 상품 이미지</PopoverBody>\r\n                </Popover>\r\n              </div>\r\n              {/* 이미지 갤러리 */}\r\n              <div className=\"showroom-gallery\">\r\n                {/* 이미지 갤러리 */}\r\n                {/* <ShowRoom  ref={showRoonGetData} /> */}\r\n                <ShowRoom name=\"Showroom\"/>\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n      </Row>\r\n      {/* e:showwoom */}\r\n      {/* s:tab menu */}\r\n      <Row className=\"mt-5\">\r\n        <Colxx xxs=\"12\">\r\n          {/* s: 탭메뉴 */}\r\n          <Nav tabs className=\"card-header-tabs \">\r\n            <NavItem>\r\n              <NavLink\r\n                to=\"#\"\r\n                location={{}}\r\n                className={classnames({\r\n                  active: activeFirstTab === '1',\r\n                  'nav-link': true,\r\n                })}\r\n                onClick={() => {\r\n                  setActiveFirstTab('1');\r\n                }}\r\n              >\r\n                P-Factor Analysis\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                to=\"#\"\r\n                location={{}}\r\n                className={classnames({\r\n                  active: activeFirstTab === '2',\r\n                  'nav-link': true,\r\n                })}\r\n                onClick={() => {\r\n                  setActiveFirstTab('2');\r\n                }}\r\n              >\r\n                E-Factor Analysis\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n          {/* e: 탭메뉴 */}\r\n        </Colxx>\r\n      </Row>\r\n      {/* e:tab menu */}\r\n      \r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <Card className=\"bor-top-radius0\">\r\n            <CardBody>\r\n              {/* s:trend-quad */}\r\n              <div className=\"box-title\">\r\n                <h2>Trend-Quad</h2>\r\n                <button type=\"button\" className=\"help\" id=\"popover_2\" onClick={() => setPopoverOpenHelp2(true)} onKeyDown={() => setPopoverOpenHelp2(true)}><img src=\"/assets/img/icon/icon_help.png\" alt=\"도움말\" /></button>\r\n                <Popover \r\n                  placement=\"right\"\r\n                  isOpen={popoverOpenHelp2}\r\n                  target=\"popover_2\"\r\n                  toggle={() => setPopoverOpenHelp2(!popoverOpenHelp2)}\r\n                  trigger=\"legacy\"\r\n                >\r\n                  <PopoverBody>\r\n                    <div>(가로축) P/R Index는 상품수와 리뷰수의 합을 계산한 것으로, <span className=\"f-blue\">상품수와 리뷰수가 많을수록 우측에 위치함</span></div>\r\n                    <div>(세로축) Rise/Fall 은 요소의 랭킹 변화를 나타내는 지표로써, 네이버 쇼핑 Best100에서 <br />(P-Factor인 경우) <span className=\"f-blue\">상품의 랭킹이 높아질수록 위쪽에 위치함</span><br/>(E-Factor인 경우) <span className=\"f-blue\">요소의중요도가 높아질수록 위쪽에 위치함</span></div>\r\n                    <img src=\"/assets/img/icon/help.png\" alt=\"도움말 이미지\" />\r\n                    <div className=\"f-red\">포인트 클릭시, 우측 그래프가 활성화됩니다.</div>\r\n                  </PopoverBody>\r\n                </Popover>\r\n              </div>\r\n              <div className=\"clearfix box-line\">\r\n                <div className=\"box left\">\r\n                  <p className=\"desc\">- 키워드(dot) 클릭시, 우측 그래프가 활성화됩니다.</p>\r\n                  {/* 각 차트별 height 값은 props로 전달 차트 */}\r\n                  {/* <Bubble height={550} /> */}\r\n                  <Scatter height={600} name=\"TrendQuadScatter\" chageShowTrend={chageShowTrend} activeFirstTab={activeFirstTab} className=\"scatter-chart\"/>\r\n                </div>\r\n                <div className=\"box right\">\r\n                  <p className=\"desc\">- Pre-Trend 클릭 시, 예측트렌드가 노출됩니다.</p>\r\n                  <div className=\"chart-area\">\r\n                    <div className=\"chart-header\">\r\n                      <div className=\"chart-title\">\r\n                        <h4>Post-Trend</h4>\r\n                        <button type=\"button\" className=\"help\" id=\"popover_3\" onClick={() => setPopoverOpenHelp3(true)} onKeyDown={() => setPopoverOpenHelp3(true)}><img src=\"/assets/img/icon/icon_help_small.png\" alt=\"도움말\" /></button>\r\n                        <Popover\r\n                          style={{ maxWidth: '600px' }}\r\n                          placement=\"right\"\r\n                          isOpen={popoverOpenHelp3}\r\n                          target=\"popover_3\"\r\n                          toggle={() => setPopoverOpenHelp3(!popoverOpenHelp3)}\r\n                          trigger=\"legacy\"\r\n                        >\r\n                          <PopoverBody>\r\n                            좌측 포지셔닝 맵에서 선택한 요소에 대하여 트렌드의 흐름을 보여줌 <br/>\r\n                            재생버튼 클릭시, 앞으로의 <span className=\"f-blue\">미래 트렌드를 예측</span>하여 나타내며, 우측 상단으로 뻗어가는 그래프일수록 잠재 트렌드 요소인 것으로 판단됨.<br/>\r\n                            Pre-Trend 퍼센트가 높을수록 향후 트렌드에 있어 변동이 큰 요소라고 볼 수 있음.\r\n                          </PopoverBody>\r\n                        </Popover>\r\n                      </div>\r\n                      <span className=\"mean\" style={{ left: '70.0%' }} onClick={preTrendClick} aria-hidden=\"true\">Pre-Trend <span className=\"number\">{selectPretrendPercent}</span></span>\r\n                      {/* 전체 100% 기준으로 number 값의 나머지 값을 style 값에 인라인으로 대입바랍니다.  */}\r\n                    </div>\r\n                    {/* 각 차트별 height 값은 props로 전달 */}\r\n                    <Line setPercent={setPretrendPercent} showPreTrend={showPreTrend} height={210} name=\"PostTrendLine\" activeFirstTab={activeFirstTab} className=\"linetrend-chart\"/>\r\n                  </div>\r\n                  <div className=\"chart-area mb-0\">\r\n                    <div className=\"chart-header\">\r\n                        {/* s: Sentiment Factor 탭 */}\r\n                        <Nav tabs className=\"card-header-tabs chart-tab\">\r\n                          <NavItem>\r\n                          {activeFirstTab === '1'?\r\n                            <NavLink\r\n                              to=\"#\"\r\n                              location={{}}\r\n                              className={classnames({\r\n                                active: activeSentiment === '1',\r\n                                'nav-link': true,\r\n                              })}\r\n                              onClick={() => {\r\n                                setActiveSentiment('1');\r\n                              }}\r\n                            >\r\n                              Sentiment Factor\r\n                            </NavLink>\r\n                            :\r\n                            <NavLink\r\n                              to=\"#\"\r\n                              location={{}}\r\n                              className={classnames({\r\n                                active: activeSentiment === '1',\r\n                                'nav-link': true,\r\n                              })}\r\n                              onClick={() => {\r\n                                setActiveSentiment('1');\r\n                              }}\r\n                            >\r\n                              Product Factor\r\n                            </NavLink>\r\n                          }\r\n                          </NavItem>\r\n                          <NavItem>\r\n                            <NavLink\r\n                              to=\"#\"\r\n                              location={{}}\r\n                              className={classnames({\r\n                                active: activeSentiment === '2',\r\n                                'nav-link': true,\r\n                              })}\r\n                              onClick={() => {\r\n                                setActiveSentiment('2');\r\n                              }}\r\n                            >\r\n                              Brand\r\n                            </NavLink>\r\n                          </NavItem>\r\n                          <NavItem>\r\n                            <button type=\"button\" className=\"help\" id=\"popover_4\" onClick={() => setPopoverOpenHelp4(true)} onKeyDown={() => setPopoverOpenHelp4(true)}><img src=\"/assets/img/icon/icon_help_small.png\" alt=\"도움말\" /></button>\r\n                            <Popover \r\n                              style={{ maxWidth: '600px' }}\r\n                              placement=\"right\"\r\n                              isOpen={popoverOpenHelp4}\r\n                              target=\"popover_4\"\r\n                              toggle={() => setPopoverOpenHelp4(!popoverOpenHelp4)}\r\n                              trigger=\"legacy\"\r\n                            >\r\n                              <PopoverBody>\r\n                                (Sentiment Factor) <br/>\r\n                                - 좌측 포지셔닝 맵에서 선택한 요소에 대하여 소비자가 느낀 이미지 상위 10개<br/>\r\n                                - 빨간색: 소비자가 가장 많이 연상하는 이미지 / 파란색: 소비자가 10번째로 연상하는 이미지 <br/>\r\n                                (Brand) <br/>\r\n                                - 좌측 포지셔닝 맵에서 선택한 요소가 가장 많이 언급되는 브랜드 상위 10개 <br/>\r\n                                - 빨간색: 해당 요소가 가장 많이 언급된 브랜드 / 파란색: 해당요소가 10번째로 언급된 브랜드 \r\n                              </PopoverBody>\r\n                            </Popover>\r\n                          </NavItem>\r\n                        </Nav>\r\n                        {/* e: Sentiment Factor 탭 */}\r\n                        {/* <h4>Sentiment Factor | <span>Brand</span></h4> */}\r\n                    </div>\r\n                    {/* 각 차트별 height 값은 props로 전달 */}\r\n                    <Bar height={210} name=\"TrendQuadBar\" activeFirstTab={activeFirstTab} activeTab={activeSentiment}/>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* e:trend-quad */}\r\n\r\n              {/* s:grobal index analysis */}\r\n              <div className=\"box-title mt-5\">\r\n                <h2>GI(Global Index) Analysis</h2>\r\n                <button type=\"button\" className=\"help\" id=\"popover_5\" onClick={() => setPopoverOpenHelp5(true)} onKeyDown={() => setPopoverOpenHelp5(true)}><img src=\"/assets/img/icon/icon_help.png\" alt=\"도움말\" /></button>\r\n                <Popover\r\n                  style={{ maxWidth: '700px' }}\r\n                  placement=\"right\"\r\n                  isOpen={popoverOpenHelp5}\r\n                  target=\"popover_5\"\r\n                  toggle={() => setPopoverOpenHelp5(!popoverOpenHelp5)}\r\n                  trigger=\"legacy\"\r\n                >\r\n                  <PopoverBody>\r\n                    <div>\r\n                      Global Index는 온라인 소비자 글과 패션 주요 속성 간의 연관성을 측정하여 나타내는 지표이며, 구매요인, 만족요인, 불만족요인에 따라 GI값을 보기위해 PGI(Purchase GI), SGI(Satisfaction GI), DGI(Dis-satisfaction GI) 지표를 생성함.\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"f-blue\">(Purchase Factor)</span> 상품의 잠재적 구매 요인 랭킹을 보여주며, PGI를 구성하는 요인 <br/>\r\n                      - 랭킹이 높을수록, 조회한 상품을 구매할 때 많이 고려하는 요소임\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"f-blue\">(Satisfaction Factor)</span> 상품의 만족요인 랭킹을 보여주며, SGI를 구성하는 요인 <br/>\r\n                      - 랭킹이 높을수록, 상품 구매 후 만족도가 높게 나타나는 요소임\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"f-blue\">(Dis-satisfaction Factor)</span> 상품의 불만족 요인 랭킹을 보여주며, DGI를 구성하는 요인<br/>\r\n                      - 랭킹이 높을수록, 상품 구매 후 불만족도가 높게 나타나는 요소임\r\n                    </div>\r\n                  </PopoverBody>\r\n                </Popover>\r\n              </div>\r\n              \r\n              <div className=\"table-sort-area\">\r\n                <div className=\"clearfix box-line\">\r\n                  <div className=\"box left\">\r\n                    <ReactTableWithPaginationCard  activeFirstTab={activeFirstTab}/>\r\n                  </div>\r\n                  <div className=\"box right relation-img\">\r\n                  {/* <button type=\"button\" className=\"help\" id=\"popover_6\" onClick={() => setPopoverOpenHelp6(true)} onKeyDown={() => setPopoverOpenHelp6(true)}><img src=\"/assets/img/icon/icon_help_small.png\" alt=\"도움말\" /></button>\r\n                  <Popover\r\n                    className=\"pop-left\"\r\n                    style={{ maxWidth: '700px'}}\r\n                    placement=\"left\"\r\n                    isOpen={popoverOpenHelp6}\r\n                    target=\"popover_6\"\r\n                    toggle={() => setPopoverOpenHelp6(!popoverOpenHelp6)}\r\n                    trigger=\"legacy\"\r\n                  >\r\n                    <PopoverBody className=\"help-popup-body\">\r\n                      <div>\r\n                        (가로축) DGI, 불만족을 나타내는 정도 <br/>\r\n                        (세로축) SGI, 만족을 나타내는 정도 <br/>\r\n                        (버블크기) PGI, 잠재 구매욕구를 나타내는 정도\r\n                      </div>     \r\n                      <img src=\"/assets/img/icon/help2.png\" alt=\"도움말 이미지\" />\r\n                      <p className=\"f-red\">버블 클릭시, 그래프 아래에 연관된 이미지가 활성화됩니다.</p>\r\n                    </PopoverBody>\r\n                  </Popover> */}\r\n                    <Bubble height={470} className=\"relation-bubble\" name=\"GiBubble\" activeFirstTab={activeFirstTab}/>\r\n                    <p className=\"desc text-right\">- 위 버블 클릭 시, 연관 이미지 노출됩니다.</p>\r\n                  </div>\r\n                </div>\r\n                {/* s: 연관 이미지 영역 */}\r\n                <div className=\"showroom-gallery relation-gallery\" style={{overflow: 'hidden'}}>\r\n                   <RelationImage activeTab={activeSentiment}/> \r\n                </div>\r\n                {/* e: 연관 이미지 영역 */}\r\n                \r\n              </div>\r\n              {/* e:grobal index analysis */}\r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n      </Row>\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default injectIntl(Start);\r\n\r\n// const mapStateToProps = ({ authUser }) => {\r\n//   const { loading, error } = authUser;\r\n\r\n//   return { loading, error };\r\n// }\r\n\r\n// export default connect(mapStateToProps, {\r\n//     loginUserAction : loginUser,\r\n// })(Start);","C:\\tagons\\src\\containers\\navs\\Breadcrumb.js",[],"C:\\tagons\\src\\components\\common\\CustomSelectInput.js",[],"C:\\tagons\\src\\containers\\ui\\ReactTableCards.js",["408","409","410"],"/* eslint-disable no-nested-ternary */\r\n/* eslint-disable react/jsx-key */\r\n/* eslint-disable react/no-array-index-key */\r\n/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable react/display-name */\r\nimport React , { useState , useEffect} from 'react';\r\nimport { Card, CardBody, CardTitle } from 'reactstrap';\r\nimport { useTable, usePagination, useSortBy } from 'react-table';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport classnames from 'classnames';\r\nimport axios from 'axios';\r\nimport { getGiBubble } from '../../redux/actions';\r\n\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport DatatablePagination from '../../components/DatatablePagination';\r\n\r\n// import products from '../../data/products';\r\n\r\nfunction Table({ columns, data, divided = false, defaultPageSize = 6 }) {\r\n  \r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    prepareRow,\r\n    headerGroups,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageCount,\r\n    gotoPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: { pageIndex: 0, pageSize: defaultPageSize },\r\n    },\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <table\r\n        {...getTableProps()}\r\n        className={`r-table table ${classnames({ 'table-divided': divided })}`}\r\n      >\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column, columnIndex) => (\r\n                <th\r\n                  key={`th_${columnIndex}`}\r\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                  title='클릭시 정렬'\r\n                  className={\r\n                    column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? 'text-center sorted-desc'\r\n                        : 'text-center sorted-asc'\r\n                      : ' text-center'\r\n                  }\r\n                >\r\n                  {column.render('Header')}\r\n                  <span />\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()} onClick={() => console.log(row.original)}>\r\n                {row.cells.map((cell, cellIndex) => (\r\n                  <td\r\n                    key={`td_${cellIndex}`}\r\n                    {...cell.getCellProps({\r\n                      className: cell.column.cellClass,\r\n                    })}\r\n                  >\r\n                    {cell.render('Cell')}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n\r\n      <DatatablePagination\r\n        page={pageIndex}\r\n        pages={pageCount}\r\n        canPrevious={canPreviousPage}\r\n        canNext={canNextPage}\r\n        pageSizeOptions={[4, 10, 20, 30, 40, 50]}\r\n        showPageSizeOptions={false}\r\n        showPageJump={false}\r\n        defaultPageSize={pageSize}\r\n        onPageChange={(p) => gotoPage(p)}\r\n        onPageSizeChange={(s) => setPageSize(s)}\r\n        paginationMaxSize={pageCount}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const ReactTableWithPaginationCard = () => {\r\n  const cols = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Rank',\r\n        accessor: 'Rank',\r\n        cellClass: 'list-item-heading text-center',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n      {\r\n        Header: 'Purchase Factor',\r\n        accessor: 'PurchaseFactor',\r\n        cellClass: 'list-item-heading text-muted text-center',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n      {\r\n        Header: 'Satisfaction Factor',\r\n        accessor: 'SatisfactionFactor',\r\n        cellClass: 'list-item-heading text-muted text-center',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n      {\r\n        Header: 'Dis-satisfaction Factor',\r\n        accessor: 'DisSatisfactionFactor',\r\n        cellClass: 'list-item-heading text-muted text-center',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n    ],\r\n    []\r\n  );\r\n  const dispatch = useDispatch();\r\n  const store = useSelector(state => state.startApp);\r\n  const store2 = useSelector(state => state.industryApp);\r\n\r\n  const [products , setProducts] = useState([]);\r\n  // api 호출시 로딩바 적용 테스트\r\n  const [loading, setLoading] = useState(false);\r\n  const [loaderror, setLoadError] = useState(null);\r\n\r\n  const callGIApi = async (paramValue,callUrl) =>{ \r\n    setLoading(true);\r\n    await axios.post(callUrl,paramValue)\r\n      .then(function (response) { \r\n        setProducts(response.data.TableData); //getGiBubble\r\n        dispatch(getGiBubble(response.data));\r\n        setLoading(false);\r\n      })\r\n      .catch(function (error) {\r\n        setLoading(false);\r\n        console.log(error);\r\n      });\r\n  };\r\n  const replaceAll = (str,p1,p2) => {\r\n    return str.split(p1).join(p2);\r\n  }\r\n  useEffect(() => {\r\n    var param1 = {};\r\n    var callUrl = \"\";\r\n    if (!(store.SearchCondition.Category1 === \"\" || store.SearchCondition.Category1 === null || store.SearchCondition.Category1 === undefined)){\r\n        param1.FromDate = replaceAll(store.SearchCondition.FromDate,\"-\",\"\");\r\n        param1.ToDate = replaceAll(store.SearchCondition.ToDate,\"-\",\"\");\r\n        param1.Category1 = store.SearchCondition.Category1;\r\n        param1.Category2 = store.SearchCondition.Category2;\r\n        param1.Category3 = store.SearchCondition.Category3;\r\n        param1.Keyword = store.SearchCondition.Keyword;\r\n        if (store.SearchCondition.activeFirstTab === \"1\") {\r\n          callUrl = \"/industry/GetIndustry_PFactor_GI\";\r\n        }\r\n        else{\r\n          callUrl = \"/industry/GetIndustry_EFactor_GI\";\r\n        }\r\n        dispatch(getGiBubble(null));\r\n        callGIApi(param1,callUrl);\r\n      }\r\n    \r\n  },[store.SearchCondition]);\r\n\r\n  if (loading) return <div className=\"loading\" />;\r\n  if (loaderror) return <div>에러가 발생했습니다</div>;\r\n\r\n  return (\r\n    <Card className=\"mb-4\">\r\n      <CardBody>\r\n        {/* <CardTitle>\r\n          <IntlMessages id=\"table.react-pagination\" />\r\n        </CardTitle> */}\r\n        <Table columns={cols} data={products} />\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const ReactTableDivided = () => {\r\n  const cols = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Name',\r\n        accessor: 'title',\r\n        cellClass: 'list-item-heading w-40',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n      {\r\n        Header: 'Sales',\r\n        accessor: 'sales',\r\n        cellClass: 'text-muted  w-10',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n      {\r\n        Header: 'Stock',\r\n        accessor: 'stock',\r\n        cellClass: 'text-muted  w-10',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n      {\r\n        Header: 'Category',\r\n        accessor: 'category',\r\n        cellClass: 'text-muted  w-40',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n    ],\r\n    []\r\n  );\r\n  const [products , setProducts] = useState([]);\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <CardTitle>\r\n        <IntlMessages id=\"table.divided\" />\r\n      </CardTitle>\r\n      <Table columns={cols} data={products} divided />\r\n    </div>\r\n  );\r\n};\r\n","C:\\tagons\\src\\components\\charts\\Bar.js",["411","412"],"import React , { useState , useEffect}  from 'react';\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { barChartOptions } from './config';\r\nimport { getIndustryPfactorTrendandfactor, getIndustryTotalcategoryList } from '../../redux/actions';\r\n/* Sentiment Factor | Brand */\r\nconst Bar = (props) => {\r\n    const [barName, setbarName] = useState(props.name) ;\r\n    const [barSentiName, setBarSentiName] = useState(props.activeTab) ;\r\n    const dispatch = useDispatch();\r\n    const store = useSelector(state => state.startApp);\r\n    const store2 = useSelector(state => state.industryApp);\r\n\r\n    //라인 옵션\r\n    const [barOption, setBarOption] = React.useState(barChartOptions);\r\n\r\n\r\n    useEffect(() => {\r\n      var seriesData = [];\r\n      var dataArr = [];\r\n      var categoryArr = [];\r\n      var iPfactorTrendandfactor = [];\r\n      var colorArrr = [];\r\n      var barlen = 0;\r\n      var chartTypeName = \"\";\r\n      if (!(store2.iPfactorTrendandfactor === null || store2.iPfactorTrendandfactor=== undefined || store2.iPfactorTrendandfactor === \"\" || JSON.stringify(store2.iPfactorTrendandfactor) === \"{}\")){\r\n        if (props.activeTab === '1') {          \r\n          if (store.SearchCondition.activeFirstTab === \"1\"){\r\n            iPfactorTrendandfactor = store2.iPfactorTrendandfactor.SentimentFactorData;\r\n            chartTypeName = \"Sentiment Factor\"; // ProductFactorData\r\n          }\r\n          else{\r\n            iPfactorTrendandfactor = store2.iPfactorTrendandfactor.ProductFactorData;\r\n            chartTypeName = \"Product FactorData\"; // ProductFactorData\r\n          }     \r\n        }\r\n        else{\r\n          iPfactorTrendandfactor = store2.iPfactorTrendandfactor.BrandFactorData;\r\n          chartTypeName = \"Brand\";\r\n        }\r\n\r\n        if (!(iPfactorTrendandfactor === null  || iPfactorTrendandfactor=== undefined || iPfactorTrendandfactor === \"\"  || JSON.stringify(iPfactorTrendandfactor) === \"[]\")) {\r\n          iPfactorTrendandfactor.map((tData,index) => {\r\n            dataArr.push(tData.Value);\r\n            categoryArr.push(tData.name);\r\n            if (index === 0){\r\n              colorArrr.push('#CC0000');\r\n            }\r\n            else if (index === (iPfactorTrendandfactor.length -1)){\r\n              colorArrr.push('#0000CC'); \r\n            }\r\n            else{\r\n              colorArrr.push('#808080'); \r\n            }\r\n          });\r\n          seriesData = [{\r\n                    name : chartTypeName,\r\n                    data: dataArr}];\r\n        } \r\n        \r\n        \r\n        setBarOption({\r\n          options: {\r\n              chart: {\r\n                type: 'bar',\r\n                height: 350,\r\n                toolbar: {\r\n                  show: false,\r\n                },\r\n                zoom: {\r\n                  enabled: false\r\n                },\r\n                \r\n              },\r\n              dataLabels: {\r\n                enabled: true\r\n              },\r\n              fill: {\r\n                opacity: 0.7 ,\r\n                colors: colorArrr,\r\n              },\r\n              plotOptions: {\r\n                bar: {\r\n                    distributed: true\r\n                }\r\n              },\r\n              title: {\r\n                // text: \"\"\r\n              },\r\n              grid : {\r\n                        yaxis : {\r\n                            lines : {\r\n                                show : false\r\n                            }\r\n                        }\r\n                    },\r\n              xaxis: {\r\n                categories:categoryArr,\r\n              },\r\n              yaxis: {\r\n                  show: false,\r\n              },\r\n              legend : {\r\n                show: false ,\r\n              },\r\n            },\r\n            series: seriesData,\r\n         }\r\n        );\r\n        // console.log('bar',seriesData); \r\n      }\r\n      else{\r\n        setBarOption({\r\n          options: {\r\n              chart: {\r\n                type: 'bar',\r\n                height: 350,\r\n                toolbar: {\r\n                  show: false,\r\n                },\r\n                zoom: {\r\n                  enabled: false\r\n                },\r\n                \r\n              },\r\n              dataLabels: {\r\n                enabled: true\r\n              },\r\n              fill: {\r\n                opacity: 0.7,\r\n                type: 'solid', \r\n                colors: colorArrr,\r\n              },\r\n              title: {\r\n                // text: \"\"\r\n              },\r\n              plotOptions: {\r\n                bar: {\r\n                    distributed: true\r\n                }\r\n              },\r\n              grid : {\r\n                        yaxis : {\r\n                            lines : {\r\n                                show : false\r\n                            }\r\n                        }\r\n                    },\r\n              xaxis: {\r\n                categories:[],\r\n              },\r\n              yaxis: {\r\n                  show: false,\r\n              },\r\n              legend : {\r\n                show: false ,\r\n              },\r\n            },\r\n            series: [],\r\n         }\r\n        );\r\n      }\r\n    }, [store2.iPfactorTrendandfactor]);\r\n\r\n    useEffect(() => {\r\n      var seriesData = [];\r\n      var dataArr = [];\r\n      var categoryArr = [];\r\n      var colorArrr = [];\r\n      var iPfactorTrendandfactor = [];\r\n      var barlen = 0;\r\n      var chartTypeName = \"\";\r\n      if (!(store2.iPfactorTrendandfactor === null || store2.iPfactorTrendandfactor=== undefined || store2.iPfactorTrendandfactor === \"\" || JSON.stringify(store2.iPfactorTrendandfactor) === \"{}\")){\r\n        if (props.activeTab === '1') {\r\n          if (store.SearchCondition.activeFirstTab === \"1\"){\r\n            iPfactorTrendandfactor = store2.iPfactorTrendandfactor.SentimentFactorData;\r\n            chartTypeName = \"Sentiment Factor\"; // ProductFactorData\r\n          }\r\n          else{\r\n            iPfactorTrendandfactor = store2.iPfactorTrendandfactor.ProductFactorData;\r\n            chartTypeName = \"Product FactorData\"; // ProductFactorData\r\n          }  \r\n        }\r\n        else{\r\n          iPfactorTrendandfactor = store2.iPfactorTrendandfactor.BrandFactorData;\r\n          chartTypeName = \"Brand\";\r\n        }\r\n        if (iPfactorTrendandfactor === null || iPfactorTrendandfactor=== undefined || iPfactorTrendandfactor === \"\"  ){\r\n          iPfactorTrendandfactor = [];\r\n        }\r\n        // console.log('data', iPfactorTrendandfactor,store2.iPfactorTrendandfactor.SentimentFactorData,store2.iPfactorTrendandfactor.BrandFactorData );\r\n\r\n        iPfactorTrendandfactor.map((tData,index) => {\r\n          dataArr.push(tData.Value);\r\n          categoryArr.push(tData.name);\r\n          if (index === 0){\r\n            colorArrr.push('#CC0000');\r\n          }\r\n          else if (index === (iPfactorTrendandfactor.length -1)){\r\n            colorArrr.push('#0000CC'); \r\n          }\r\n          else{\r\n            colorArrr.push('#808080'); \r\n          }\r\n        });\r\n        /* \r\n        barlen = iPfactorTrendandfactor.length;        \r\n        if (barlen === 0){\r\n          if (props.activeTab === '1')\r\n            alert('Sentiment Factor 데이타가 없습니다');\r\n          else\r\n            alert('Brand 데이타가 없습니다');\r\n        } */\r\n        seriesData = [{\r\n                  name : chartTypeName,\r\n                  data: dataArr}];\r\n\r\n        setBarOption({\r\n          options: {\r\n              chart: {\r\n                type: 'bar',\r\n                height: 350,\r\n                toolbar: {\r\n                  show: false,\r\n                },\r\n                zoom: {\r\n                  enabled: false\r\n                }\r\n                \r\n              },\r\n              dataLabels: {\r\n                enabled: true \r\n              },\r\n              fill: {\r\n                opacity: 0.7 ,\r\n                type: 'solid',\r\n                colors: colorArrr, \r\n              },\r\n              title: {\r\n                // text: \"\"\r\n              },\r\n              grid : {\r\n                        yaxis : {\r\n                            lines : {\r\n                                show : false\r\n                            }\r\n                        }\r\n                    },\r\n              xaxis: {\r\n                categories:categoryArr,\r\n              },\r\n              yaxis: {\r\n                  show: false,\r\n              },\r\n            },\r\n            series: seriesData,\r\n         }\r\n        );\r\n      }\r\n      \r\n    }, [props.activeTab]);\r\n    return (\r\n        <ReactApexChart options={barOption.options} series={barOption.series} type=\"bar\" height={props.height} />\r\n    );\r\n};\r\n\r\nexport default Bar;","C:\\tagons\\src\\components\\charts\\Bubble.js",["413","414","415","416","417","418","419","420","421","422","423"],"import React , { useState , useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport axios from 'axios';\r\nimport { bubbleChartOptions } from './config';\r\nimport { getIndustryPfactorGiRelatedwords } from '../../redux/actions';\r\n\r\nconst Bubble = (props) => {\r\n  const [bubbleName, setBubbleName] = useState(props.name) ;\r\n  const [bubbleOptions,setBubbleOptions] = useState(bubbleChartOptions);\r\n  const [activeFirstTab, setActiveFirstTab] = useState(props.activeFirstTab) ;\r\n    // api 호출시 로딩바 적용 테스트\r\n  const [loading, setLoading] = useState(false);\r\n  const [loaderror, setLoadError] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n  const store = useSelector(state => state.startApp);\r\n  const store2 = useSelector(state => state.industryApp);\r\n  const clickChart = (seriesIndex,factor) => {\r\n    var param1 = {} ;\r\n    var callUrl = \"\";\r\n    if (seriesIndex >= 0 ){\r\n      if (!(store.SearchCondition.activeFirstTab === \"\" || store.SearchCondition.activeFirstTab === null || store.SearchCondition.activeFirstTab === undefined)){\r\n        param1.FromDate = store.SearchCondition.FromDate;\r\n        param1.ToDate = store.SearchCondition.ToDate;\r\n        param1.Category1 = store.SearchCondition.Category1;\r\n        param1.Category2 = store.SearchCondition.Category2;\r\n        param1.Category3 = store.SearchCondition.Category3;\r\n        param1.Keyword = store.SearchCondition.Keyword;\r\n        param1.Factor = factor ;\r\n        if (store.SearchCondition.activeFirstTab === '1'){\r\n          callUrl = \"/industry/GetIndustry_PFactor_GI_RelatedWords\";\r\n        }\r\n        else {\r\n          callUrl = \"/industry/GetIndustry_EFactor_GI_RelatedWords\";\r\n        }\r\n        axios.post(callUrl,param1)\r\n          .then(function (response) {\r\n            dispatch(getIndustryPfactorGiRelatedwords(response.data));\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      }\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    var seriesData = [];\r\n    var bubbleXArr = [];\r\n    var bubbleYArr = [];\r\n    var xMin, xMax, yMin, yMax = 0;\r\n    // console.log('bubble', store2.iGiBubbleelectData );\r\n    dispatch(getIndustryPfactorGiRelatedwords(null));\r\n    if (!(store2.iGiBubbleelectData === null || store2.iGiBubbleelectData=== undefined || store2.iGiBubbleelectData === \"\" || JSON.stringify(store2.iGiBubbleelectData) === \"{}\")){\r\n      // console.log('bubble set ',store2.iGiBubbleelectData.BubbleData);\r\n      store2.iGiBubbleelectData.BubbleData.map((bData) => {\r\n        seriesData.push({\r\n          name: bData.Topics,\r\n          data: [[bData.DGI, bData.SGI, bData.PGI]],\r\n          relationTxt: [\r\n            '<>DGI ('.concat(bData.DGI,')</>'),\r\n            '<>SGI ('.concat(bData.SGI,')</>'),\r\n            '<>PGI ('.concat(bData.PGI,')</>'),\r\n          ],\r\n        });\r\n        bubbleXArr.push(bData.DGI);\r\n        bubbleYArr.push(bData.SGI);\r\n      });\r\n      // bubbleChartOptions.series = seriesData;\r\n\r\n      xMin = Math.min.apply(null, bubbleXArr) - 5;\r\n      xMax = Math.max.apply(null, bubbleXArr) + 5;\r\n      yMin = Math.min.apply(null, bubbleYArr) - 5;\r\n      yMax = Math.max.apply(null, bubbleYArr) + 5;\r\n      setBubbleOptions({\r\n        options: {\r\n          chart: {\r\n            toolbar: {\r\n              show: false,\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n            events: {\r\n              click:\r\n                function(event, chartContext, w) {\r\n                  if (w.seriesIndex >=0 ) {\r\n                    clickChart(w.seriesIndex, w.config.series[w.seriesIndex].name);\r\n                  }\r\n                }\r\n            },\r\n          },\r\n          tooltip: {\r\n            custom: function({ series, seriesIndex, dataPointIndex, w}) {\r\n              return `${'<div class=\"arrow_box\" style=\"padding:5px;\">' +\r\n              '<span>'} \r\n                  ${ w.config.series[seriesIndex].name } <br/>\r\n                  DGI: ${ Math.trunc(w.config.series[seriesIndex].data[0][0]) } <br/>\r\n                  SGI: ${ Math.trunc(w.config.series[seriesIndex].data[0][1]) } <br/>\r\n                  PGI: ${ Math.trunc(w.config.series[seriesIndex].data[0][2]) } <br/>\r\n              </span></div>`\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: true,\r\n            formatter: function(value, { seriesIndex, dataPointIndex, w }) {\r\n              return w.config.series[seriesIndex].name\r\n            }\r\n          },\r\n          fill: {\r\n            opacity: 0.7\r\n          },\r\n          title: {\r\n            //text: \"\"\r\n          },\r\n          xaxis: {\r\n            min: -10,\r\n            max: 110,\r\n            tickAmount: 12,\r\n            type: \"category\",\r\n            show: false,\r\n            title: {\r\n              text: \"DGI\"\r\n            },\r\n          },\r\n          yaxis:{\r\n            min: -10,\r\n            max: 110 ,\r\n            labels: {\r\n              formatter: function(value, index) {\r\n                return value.toFixed();\r\n              }\r\n            },\r\n            title: {\r\n              text: \"SGI\"\r\n            },\r\n          },\r\n          legend : {\r\n            show: false ,\r\n          },\r\n          grid: {\r\n            show: false,\r\n          },\r\n          // plotOptions: {\r\n          //   bubble: {\r\n          //     minBubbleRadius: 18,\r\n          //   }\r\n          // },\r\n        },\r\n        series: seriesData\r\n      });\r\n\r\n    }\r\n    else{\r\n      setBubbleOptions({\r\n        options: {\r\n          chart: {\r\n            toolbar: {\r\n              show: false,\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n            events: {\r\n              click:\r\n                function(event, chartContext, w) {\r\n                  if (w.seriesIndex >=0 ) {\r\n                    clickChart(w.seriesIndex, w.config.series[w.seriesIndex].name);\r\n                  }\r\n                }\r\n            },\r\n          },\r\n          tooltip: {\r\n            custom: function({ series, seriesIndex, dataPointIndex, w}) {\r\n              return `${'<div class=\"arrow_box\" style=\"padding:5px;\">' +\r\n              '<span>'} \r\n                  DGI: ${ Math.trunc(w.config.series[seriesIndex].data[0][0]) } <br/>\r\n                  SGI: ${ Math.trunc(w.config.series[seriesIndex].data[0][1]) } <br/>\r\n                  PGI: ${ Math.trunc(w.config.series[seriesIndex].data[0][2]) } <br/>\r\n              </span></div>`\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: true,\r\n            formatter: function(value, { seriesIndex, dataPointIndex, w }) {\r\n              return w.config.series[seriesIndex].name\r\n            }\r\n          },\r\n          fill: {\r\n            opacity: 0.7\r\n          },\r\n          title: {\r\n            //text: \"\"\r\n          },\r\n          xaxis: {\r\n            min: -10,\r\n            max: 110,\r\n            tickAmount: 12,\r\n            type: \"category\",\r\n            show: false,\r\n            title: {\r\n              text: \"DGI\"\r\n            },\r\n          },\r\n          yaxis:{\r\n            min: -10,\r\n            max: 110,\r\n            labels: {\r\n              formatter: function(value, index) {\r\n                return value.toFixed();\r\n              }\r\n            },\r\n            title: {\r\n              text: \"SGI\"\r\n            },\r\n          },\r\n          legend : {\r\n            show: false ,\r\n          },\r\n          grid: {\r\n            show: false,\r\n          },\r\n          // plotOptions: {\r\n          //   bubble: {\r\n          //     minBubbleRadius: 18,\r\n          //   }\r\n          // },\r\n        },\r\n        series: []\r\n      });\r\n      dispatch(getIndustryPfactorGiRelatedwords(null));\r\n    }\r\n  },[store2.iGiBubbleelectData]);\r\n  // Loading \r\n  if (loading) return <div className=\"loading\" />;\r\n  if (loaderror) return <div>에러가 발생했습니다</div>;\r\n  return (\r\n    <ReactApexChart options={bubbleOptions.options} series={bubbleOptions.series} type=\"bubble\" height={props.height} className={props.className} />\r\n  );\r\n};\r\n\r\nexport default Bubble;","C:\\tagons\\src\\components\\charts\\ScatterDatetime.js",["424","425","426","427","428","429","430","431","432","433"],"/* eslint-disable no-plusplus */\r\nimport React , { useState , useEffect} from 'react';\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { scatterDatetimeChartOptions } from './config';\r\nimport { getIndustryPfactorTrendandfactor } from '../../redux/actions';\r\n\r\nconst ScatterDatetime = (props) => {\r\n  var categoryData = [];\r\n  const [ScatterDatetimeOption, setScatterDatetimeOption] = React.useState(scatterDatetimeChartOptions);\r\n  const [resData, setResData] = useState({});\r\n  const [categoryStateData, setCategoryStateData] = useState([]);\r\n  const [scatterName, setScatter] = useState(props.name) ;\r\n  const [activeFirstTab, setActiveFirstTab] = useState(props.activeFirstTab) ;\r\n  const dispatch = useDispatch();\r\n  const store = useSelector(state => state.startApp);\r\n  const store2 = useSelector(state => state.industryApp);\r\n  // api 호출시 로딩바 적용 테스트\r\n  const [loading, setLoading] = useState(false);\r\n  const [loaderror, setLoadError] = useState(null);\r\n  //색 지정\r\n  var colorArr = [];\r\n  var color = '';\r\n\r\n  const replaceAll = (str,p1,p2) => {\r\n    return str.split(p1).join(p2);\r\n  }\r\n\r\n  const clickChart = (seriesIndex,seriesData,seriesLength) => {\r\n    var param1 = {} ;\r\n    var callUrl = \"\";\r\n    let i = 0 ;\r\n    colorArr = [];\r\n    if (seriesIndex >= 0 ){\r\n      // const categoryUpLow = name.split('-');\r\n      const categoryUpper = categoryData[seriesIndex][0];\r\n      const name = categoryData[seriesIndex][1];\r\n      dispatch(getIndustryPfactorTrendandfactor(null));\r\n      if (!(store.SearchCondition.activeFirstTab === \"\" || store.SearchCondition.activeFirstTab === null || store.SearchCondition.activeFirstTab === undefined)){\r\n        param1.FromDate = store.SearchCondition.FromDate;\r\n        param1.ToDate = store.SearchCondition.ToDate;\r\n        param1.Category1 = store.SearchCondition.Category1;\r\n        param1.Category2 = store.SearchCondition.Category2;\r\n        param1.Category3 = store.SearchCondition.Category3;\r\n        param1.Keyword = store.SearchCondition.Keyword;\r\n        param1.Category_upper = categoryUpper;\r\n        param1.Name = name ;\r\n        props.chageShowTrend(false);\r\n        if (store.SearchCondition.activeFirstTab === '1'){\r\n          callUrl = \"/industry/GetIndustry_PFactor_TrendAndFactor\";\r\n        }\r\n        else {\r\n          callUrl = \"/industry/GetIndustry_EFactor_TrendAndFactor\";\r\n        }\r\n        i = 0 ;\r\n        while (i < seriesLength ){\r\n          if ( i === seriesIndex){\r\n            colorArr.push('#d50028');\r\n          }\r\n          else{\r\n            colorArr.push('#868686');\r\n          }\r\n           i++ ;\r\n        }\r\n        \r\n\r\n        axios.post(callUrl,param1)\r\n          .then(function (response) {\r\n            dispatch(getIndustryPfactorTrendandfactor(response.data));\r\n            /*  setScatterDatetimeOption({...ScatterDatetimeOption,\r\n              options : {\r\n                colors : colorArr\r\n              } ,\r\n              series : seriesData, }); */\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n                      \r\n      }\r\n\r\n\r\n    }\r\n\r\n  }\r\n  const clickChart2 = (seriesIndex,Categoryupper,Categorylower, fSeriesData ) => {\r\n    var param1 = {} ;\r\n    var callUrl = \"\";\r\n    if (seriesIndex >= 0 ){\r\n      if (!(store.SearchCondition.activeFirstTab === \"\" || store.SearchCondition.activeFirstTab === null || store.SearchCondition.activeFirstTab === undefined)){\r\n        dispatch(getIndustryPfactorTrendandfactor(null));\r\n        param1.FromDate = store.SearchCondition.FromDate;\r\n        param1.ToDate = store.SearchCondition.ToDate;\r\n        param1.Category1 = store.SearchCondition.Category1;\r\n        param1.Category2 = store.SearchCondition.Category2;\r\n        param1.Category3 = store.SearchCondition.Category3;\r\n        param1.Keyword = store.SearchCondition.Keyword;\r\n        param1.Category_upper = Categoryupper;\r\n        param1.Name = Categorylower ;\r\n        if (store.SearchCondition.activeFirstTab === '1'){\r\n          callUrl = \"/industry/GetIndustry_PFactor_TrendAndFactor\";\r\n        }\r\n        else {\r\n          callUrl = \"/industry/GetIndustry_EFactor_TrendAndFactor\";\r\n        }\r\n        props.chageShowTrend(false);\r\n        // console.log('파라메터 clickChart2', callUrl ,param1);\r\n        axios.post(callUrl,param1)\r\n          .then(function (response) {\r\n            if (!(response.data === \"\" || response.data === null || response.data === undefined )){\r\n               /* setScatterDatetimeOption({...ScatterDatetimeOption,\r\n                options : {\r\n                  colors : colorArr\r\n                } ,\r\n                series : fSeriesData, }); */\r\n              dispatch(getIndustryPfactorTrendandfactor(response.data));\r\n\r\n            }\r\n            else{\r\n              console.log('factor error',response);\r\n            }\r\n          })\r\n          .catch(function (error) {\r\n            console.log('파라메터 clickChart2 error', error);\r\n          });\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n  const ScatterChartOption = {\r\n      options: {\r\n        chart: {\r\n          height: 350,\r\n          type: 'scatter',\r\n          toolbar: {show:true },\r\n          zoom: {\r\n            type: 'xy'\r\n          } ,\r\n          events: {\r\n            click: function(event, chartContext, config) {\r\n              if (config.seriesIndex >= 0) {\r\n                clickChart(config.seriesIndex,config.config.series,config.config.series.length);\r\n              }\r\n            }\r\n          },\r\n        },\r\n        tooltip: {\r\n          custom: function({ series, seriesIndex, dataPointIndex, w}) {\r\n            const prName = w.config.series[seriesIndex].name;\r\n            const prIndex = w.config.series[seriesIndex].data[0][0];\r\n            const riseFall = w.config.series[seriesIndex].data[0][1]\r\n            return `${'<div class=\"arrow_box\" style=\"padding:5px;\">' +\r\n            '<span>'}\r\n            ${ prName }<br/>\r\n                P_R_INDEX/RISE_FALL: ${ prIndex.toFixed(1) }\r\n                /${ riseFall.toFixed(1) }<br/>\r\n              </span></div>`\r\n          }\r\n        },\r\n        annotations: {\r\n          position: \"back\",\r\n          xaxis: [\r\n            {\r\n              x: 1,\r\n              x2: 1.5,\r\n              strokeDashArray: 0,\r\n              borderColor: \"#666\",\r\n              fillColor: \"#797979\",\r\n              opacity: 0.1 ,\r\n              label: {\r\n                text: 'Rise',\r\n                borderWidth: 0,\r\n                position: 'top',\r\n                offsetX: '46%',\r\n                offsetY: -7,\r\n                orientation: 'horizontal',\r\n                style: {\r\n                  background: 'transparent',\r\n                  fontSize: '16px',\r\n                  fontWeight: '700',\r\n                  color: '#000'\r\n                }\r\n              },\r\n            },\r\n            {\r\n              x: 1.5,\r\n              x2: 2,\r\n              strokeDashArray: 0,\r\n              borderColor: \"#666\",\r\n              fillColor: \"#fd7b7a\",\r\n              opacity: 0.1,\r\n              label: {\r\n                text: 'Fall',\r\n                borderWidth: 0,\r\n                position: 'bottom',\r\n                offsetY: 15,\r\n                orientation: 'horizontal',\r\n                style: {\r\n                  background: 'transparent',\r\n                  fontSize: '16px',\r\n                  fontWeight: '700',\r\n                  color: '#000'\r\n                }\r\n              }, \r\n              \r\n            }\r\n          ],\r\n          yaxis: [\r\n            {\r\n              y: 1,\r\n              y2: 1.5,\r\n              strokeDashArray: 0,\r\n              borderColor: \"#666\",\r\n              fillColor: \"#c8c4c3\",\r\n              opacity: 0.3\r\n            },\r\n            {\r\n              y: 1.5,\r\n              y2: 2,\r\n              strokeDashArray: 0,\r\n              borderColor: \"#666\",\r\n              fillColor: \"#bbd5ee\",\r\n              opacity: 0.3 ,\r\n              label: {\r\n                  text: 'P/R Index',\r\n                  borderWidth: 0,\r\n                  offsetX: 75,\r\n                  offsetY: 7,\r\n                  orientation: 'horizontal',\r\n                  style: {\r\n                    background: 'transparent',\r\n                    fontSize: '16px',\r\n                    fontWeight: '700',\r\n                    color: '#000',\r\n                  }\r\n                },\r\n            }\r\n          ]\r\n        },\r\n        dataLabels: {\r\n          enabled: true,\r\n          formatter: function(value, { seriesIndex, dataPointIndex, w }) {\r\n            return w.config.series[seriesIndex].name\r\n          },\r\n          offsetX: 0,\r\n          offsetY: -8\r\n        },\r\n        grid: {\r\n          xaxis: {\r\n            lines: {\r\n              show: true\r\n            }\r\n          },\r\n          yaxis: {\r\n            lines: {\r\n              show: true\r\n            }\r\n          },\r\n          padding : {\r\n            top : 0,\r\n            bottom : 0,\r\n            right : 0,\r\n            left : 0 ,\r\n          }\r\n        },\r\n        colors: ['#868686'], // marker&label 회색\r\n        xaxis: {\r\n          min: 1,\r\n          max: 2, //x축은 소수점이 안먹힘\r\n          type: 'numeric',\r\n          // tickPlacement: 'between',\r\n          tickAmount: 2 ,\r\n          show: false\r\n        },\r\n        yaxis: {\r\n          min: 1,\r\n          max: 2,\r\n          tickAmount: 2,\r\n          // forceNiceScale: true\r\n          show: false,\r\n        },\r\n        legend : {\r\n          show: false ,\r\n        },\r\n\r\n      }  \r\n  \r\n  };\r\n  const setChartData = (chartData) => {\r\n    var seriesData = [];\r\n    var i = 0 ;\r\n    var maxRiseData = {};\r\n    var maxindex = -1;\r\n    colorArr = [];\r\n    if (categoryData.length > 0 ){\r\n      categoryData = [];    \r\n    } \r\n    chartData.Data.map((res,index) => {\r\n      if (index === 0) {\r\n        maxRiseData = res;\r\n        maxindex =index;\r\n      }\r\n      else if (maxRiseData.RISE_FALL <= res.RISE_FALL){\r\n          maxRiseData = res;\r\n          maxindex =index;\r\n      }\r\n      categoryData.push([res.Category_upper,res.Category_lower]);\r\n      seriesData.push({\r\n        name: res.Category_lower,\r\n        data: [[res.P_R_INDEX, res.RISE_FALL]],\r\n      });\r\n    });\r\n\r\n    i = 0 ;\r\n    while (i < chartData.Data.length ){\r\n      if ( i === maxindex){\r\n        colorArr.push('#d50028');\r\n      }\r\n      else{\r\n        colorArr.push('#868686');\r\n      }\r\n       i++ ;\r\n    }\r\n    // ScatterChartOption.options.colors = colorArr;\r\n\r\n    setScatterDatetimeOption({\r\n      options: ScatterChartOption.options,\r\n      series: seriesData,\r\n\r\n    });\r\n\r\n    if (maxindex >=0 ){\r\n     clickChart2(maxindex ,chartData.Data[maxindex].Category_upper , chartData.Data[maxindex].Category_lower , seriesData );\r\n    }\r\n  }\r\n  const callTrendQuadApi = async (paramValue,callUrl) =>{\r\n    setLoading(true);\r\n    await axios.post(callUrl,paramValue)\r\n      .then(function (response) {\r\n        setResData(response.data);\r\n        setChartData(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch(function (error) {\r\n        setLoading(false);\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    var seriesData = [];\r\n    var param1 = {};\r\n\r\n    var callUrl = \"\";\r\n    if (!(store.SearchCondition.activeFirstTab === \"\" || store.SearchCondition.activeFirstTab === null || store.SearchCondition.activeFirstTab === undefined)){\r\n      param1.FromDate = replaceAll(store.SearchCondition.FromDate,\"-\",\"\");\r\n      param1.ToDate = replaceAll(store.SearchCondition.ToDate,\"-\",\"\");\r\n      param1.Category1 = store.SearchCondition.Category1;\r\n      param1.Category2 = store.SearchCondition.Category2;\r\n      param1.Category3 = store.SearchCondition.Category3;\r\n      param1.Keyword = store.SearchCondition.Keyword;\r\n      props.chageShowTrend(false);\r\n      dispatch(getIndustryPfactorTrendandfactor(null));\r\n      if (store.SearchCondition.activeFirstTab === '1'){\r\n        callUrl = \"/industry/GetIndustry_PFactor_TrendQuad\";\r\n      }\r\n      else {\r\n        callUrl = \"/industry/GetIndustry_EFactor_TrendQuad\";\r\n      }\r\n      callTrendQuadApi(param1,callUrl);\r\n    }\r\n\r\n    setScatterDatetimeOption({\r\n      series: seriesData,\r\n      options: ScatterChartOption.options,\r\n    });\r\n\r\n  }, [store.SearchCondition]);\r\n  // Loading \r\n  if (loading) return <div className=\"loading\" />;\r\n  if (loaderror) return <div>에러가 발생했습니다</div>;\r\n  return (\r\n    <ReactApexChart options={ScatterDatetimeOption.options} series={ScatterDatetimeOption.series} type=\"scatter\" height={props.height} className={props.className} />\r\n  );\r\n};\r\n\r\nexport default ScatterDatetime;","C:\\tagons\\src\\components\\charts\\Line.js",["434"],"import React , { useState , useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { checkPropTypes } from 'prop-types';\r\nimport { lineChartOptions } from './config';\r\n/* Post-Trend */\r\nconst Line = (props) => {\r\n    const [lineName, setLineName] = useState(props.name) ;\r\n    const [lineOptions, setLineOptions] = useState(lineChartOptions) ;\r\n    const dispatch = useDispatch();\r\n    const startApp = useSelector(state => state.startApp);\r\n    const industryApp = useSelector(state => state.industryApp);\r\n  \r\n    useEffect(() => {\r\n        var categoryArr = [];\r\n        var postArr = [];\r\n        var preArr = [];\r\n\r\n        if (!(industryApp.iPfactorTrendandfactor === null || industryApp.iPfactorTrendandfactor === undefined || industryApp.iPfactorTrendandfactor === \"\" || JSON.stringify(industryApp.iPfactorTrendandfactor) === \"{}\")) {\r\n            //이하 퍼센트 계산\r\n            const percent = industryApp.iPfactorTrendandfactor.PreTrendChange;\r\n            let resultPercent = percent.substr(0, percent.indexOf('%'));\r\n            \r\n            //양수/음수 판별\r\n            if(resultPercent >= 0) {\r\n                resultPercent = 100 - resultPercent;\r\n            }\r\n            //셋팅\r\n            props.setPercent(`${resultPercent  }%`);\r\n\r\n            //이하 차트 데이터\r\n            const fromDate = startApp.SearchCondition.FromDate;\r\n            const toDate = startApp.SearchCondition.ToDate;\r\n            const preEndIndex = industryApp.iPfactorTrendandfactor.TrendData.length - 1;\r\n            const clickData = industryApp.iPfactorTrendandfactor.Name;\r\n        \r\n            industryApp.iPfactorTrendandfactor.TrendData.map((tData, index) => {\r\n                const dateString = tData.date.substring(0,10);\r\n               \r\n                // series (line data)\r\n                if(props.showPreTrend) {\r\n                    // post만 보여줄 경우\r\n                    if(dateString < toDate) {\r\n                        postArr.push(tData.Value);\r\n                        preArr.push(null);\r\n                    }\r\n                    else if(dateString === toDate) {\r\n                        postArr.push(tData.Value);\r\n                        preArr.push(tData.Value);\r\n                    }\r\n                    else {\r\n                        postArr.push(null);\r\n                        preArr.push(tData.Value);\r\n                    }\r\n                }\r\n                else if(dateString <= toDate) {\r\n                    postArr.push(tData.Value);\r\n                }\r\n                else{\r\n                    postArr.push(null);\r\n                }\r\n\r\n                // x축 label\r\n                if(dateString === fromDate || dateString === toDate) {\r\n                    categoryArr.push(dateString);\r\n                }\r\n                else if(preEndIndex === index){\r\n                    categoryArr.push(dateString);\r\n                }\r\n                else{\r\n                    categoryArr.push(\"\");\r\n                }\r\n            });\r\n\r\n            setLineOptions({\r\n                ...lineOptions,\r\n                options : {\r\n                    title : {\r\n                        text : clickData\r\n                    },\r\n                    xaxis : {\r\n                        categories : categoryArr,\r\n                        show : false\r\n                    },\r\n                    grid : {\r\n                        padding : {\r\n                            top : 0,\r\n                            bottom : 0,\r\n                            right : 6,\r\n                            left : 37 ,\r\n                        }\r\n                    },\r\n                    colors : ['#25e9ae', '#d50028']\r\n                },\r\n                series : [\r\n                    { name: \"post-Trend\",  data: postArr },\r\n                    { name: \"pre-Trend\",  data: preArr }\r\n                ]\r\n            });\r\n        }\r\n        else{\r\n          setLineOptions({\r\n                ...lineOptions,\r\n                options : {\r\n                    title : {\r\n                        text : \"\"\r\n                    },\r\n                    xaxis : {\r\n                        categories : [],\r\n                        show : false\r\n                    },\r\n                    grid : {\r\n                        padding : {\r\n                            top : 0,\r\n                            bottom : 0,\r\n                            right : 6,\r\n                            left : 37 ,\r\n                        }\r\n                    },\r\n                    colors : []\r\n                },\r\n                series : []\r\n            });\r\n        }\r\n    },[industryApp.iPfactorTrendandfactor, props.showPreTrend]);\r\n\r\n    return (\r\n        <ReactApexChart options={lineOptions.options} series={lineOptions.series} type=\"line\" height={props.height} />\r\n    );\r\n};\r\n\r\nexport default Line;","C:\\tagons\\src\\containers\\pages\\ShowRoom.js",["435","436","437"],"/* eslint-disable react/no-array-index-key */\r\nimport React , { useState , useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nconst ShowRoom = (props) => {\r\n  const [thumbList , setThumbList] = useState([]);\r\n  const [showRoomName, setShowRoomName] = useState(props.name) ;\r\n  const dispatch = useDispatch();\r\n  const store = useSelector(state => state.startApp);\r\n  const store2 = useSelector(state => state.industryApp);\r\n  // api 호출시 로딩바 적용 테스트\r\n  const [loading, setLoading] = useState(false);\r\n  const [loaderror, setLoadError] = useState(null);\r\n\r\n  const callShowroomApi =  async (paramValue) =>{  \r\n    setLoading(true);\r\n    await axios.post(\"/industry/GetIndustry_Showroom\",paramValue)\r\n    .then(function (response) {\r\n      setThumbList(response.data);\r\n      setLoading(false);\r\n    })\r\n    .catch(function (error) {\r\n      setLoading(false);\r\n      console.log(error);\r\n    });\r\n  };\r\n  const replaceAll = (str,p1,p2) => {\r\n    return str.split(p1).join(p2);\r\n  }\r\n  React.useEffect(() => {\r\n    var param1 = {};\r\n    var category = {};  \r\n    var {SearchChart} = store;\r\n    console.log('ShowRoom : ', store.SearchChart);\r\n    \r\n    if (store.SearchChart.ShowRoom === true){\r\n      setThumbList([]);\r\n      param1.FromDate = replaceAll(store.SearchCondition.FromDate,\"-\",\"\");\r\n      param1.ToDate = replaceAll(store.SearchCondition.ToDate,\"-\",\"\");\r\n      param1.Category1 = store.SearchCondition.Category1;\r\n      param1.Category2 = store.SearchCondition.Category2;\r\n      param1.Category3 = store.SearchCondition.Category3;\r\n      param1.Keyword = store.SearchCondition.Keyword;\r\n      callShowroomApi(param1);\r\n    }\r\n  }, [store.SearchCondition]);\r\n  if (loading) return <div className=\"loading\" />;\r\n  if (loaderror) return <div>에러가 발생했습니다</div>;\r\n  return (\r\n    <>\r\n      <ul>\r\n        {!thumbList.URL || thumbList.URL.length === 0  ? <li> 자료가 없습니다. </li> : thumbList.URL.map((item, index) => {\r\n            return (\r\n              <li key={index}>\r\n                <span>{index+1}</span>\r\n                <a href={item.SiteURL} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <img\r\n                  className=\"img-fluid border-radius\"\r\n                  src={item.ImageURL}\r\n                  alt=\"thumbnail\"\r\n                />\r\n                </a>\r\n              </li>\r\n            );\r\n          }) }\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShowRoom;\r\n","C:\\tagons\\src\\components\\charts\\config.js",["438"],"C:\\tagons\\src\\containers\\pages\\ActiveKeyword.js",[],"C:\\tagons\\src\\data\\products.js",[],"C:\\tagons\\src\\components\\DatatablePagination.js",[],"C:\\tagons\\src\\containers\\pages\\RelationImage.js",["439"],"import React , { useState , useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nconst RelationImage = (props) =>  {\r\n  const [thumbList , setThumbList] = useState([]);\r\n  const store = useSelector(state => state.startApp);\r\n  const store2 = useSelector(state => state.industryApp);\r\n  useEffect(() => {\r\n    // console.log('RelationImage',JSON.stringify(store2.iPfactorGiRelatedwords));\r\n    if (store2.iPfactorGiRelatedwords === undefined  || store2.iPfactorGiRelatedwords === null || store2.iPfactorGiRelatedwords === \"\" || JSON.stringify(store2.iPfactorGiRelatedword) === \"{}\") {\r\n      setThumbList([]);\r\n    }\r\n    else{\r\n       setThumbList(store2.iPfactorGiRelatedwords.Data);\r\n    }\r\n    \r\n  } , [store2.iPfactorGiRelatedwords]);\r\n  return (\r\n    <>\r\n      {!thumbList || thumbList.length === 0  ? <> </> : thumbList.map((item,index) => {\r\n        return (\r\n          <div key={index} >\r\n            <p style={{ color: item.clickColor }}>{item.RelatedWord}</p>\r\n            <a href={item.SiteURL} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <img\r\n              className=\"img-fluid border-radius\"\r\n              src={item.ImageURL}\r\n              alt=\"thumbnail\"\r\n            />\r\n             </a>\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RelationImage;\r\n","C:\\tagons\\src\\views\\app\\prime\\index.js",[],"C:\\tagons\\src\\views\\app\\prime\\Prime.js",["440","441","442"],"/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport React from 'react';\r\nimport { Row, Card, CardBody, Form, Button, FormGroup } from 'reactstrap';\r\nimport { Formik, Field } from 'formik';\r\nimport DatePicker from 'react-datepicker';\r\nimport { ko } from \"date-fns/esm/locale\";\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\nimport CompareBar from '../../../components/charts/CompareBar';\r\nimport CompareLine from '../../../components/charts/CompareLine';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport ChannelButton from '../../../components/applications/ChannelButton'\r\nimport { login, UserInfo, logout } from '../../../services/LoginService';\r\nimport axios from 'axios';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass Prime extends React.Component {\r\n  constructor(props) {\r\n    super(props); // React.Component의 생성자 메소드를 먼저 실행\r\n    let date1 = new Date();\r\n    let date2 = new Date();\r\n    let loginYN = (UserInfo() !== null);\r\n    let userData = UserInfo();\r\n    date1.setDate(date1.getDate() - 9);\r\n    date2.setDate(date2.getDate() - 2);\r\n    console.log('UserInfo -> ', UserInfo());\r\n    this.state = {\r\n      barChart : {\r\n        options: {\r\n          chart: {\r\n            height: 350,\r\n            type: 'bar',\r\n            toolbar: {\r\n              show: false\r\n            }\r\n          },\r\n          colors: ['#8faadc' ,'#fb9874'],\r\n          plotOptions: {\r\n            bar: {\r\n              columnWidth: '45%',\r\n              distributed: true,\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          legend: {\r\n            show: false\r\n          },\r\n          xaxis: {\r\n            categories: ['Past', 'Present'],\r\n            labels: {\r\n              style: {\r\n                colors: ['#8faadc' ,'#fb9874'],\r\n                fontSize: '12px'\r\n              }\r\n            },\r\n            title : {\r\n              text : 'Period',\r\n              offsetX: 100,\r\n              offsetY: 0,\r\n              style: {\r\n                color: undefined,\r\n                fontSize: '14px',\r\n                fontFamily: 'Helvetica, Arial, sans-serif',\r\n                fontWeight: 600,\r\n                cssClass: 'apexcharts-xaxis-title',\r\n              },\r\n            }\r\n          },\r\n          yaxis: {\r\n            title : {\r\n              text : 'Post',\r\n              offsetX: 0,\r\n              offsetY: -110,\r\n              style: {\r\n                color: undefined,\r\n                fontSize: '14px',\r\n                fontFamily: 'Helvetica, Arial, sans-serif',\r\n                fontWeight: 600,\r\n                cssClass: 'apexcharts-xaxis-title',\r\n              },\r\n            }\r\n          }\r\n        },\r\n      },\r\n      \r\n      startDate: date1,\r\n      endDate: date2,\r\n      activeId: 0, \r\n      searchBtnClick : false ,\r\n      searchStart : false ,\r\n      keyWordtext :'' ,\r\n      searchCondition : {} ,\r\n      loginBefore : loginYN ,\r\n      userInfo : userData ,\r\n      indiCont : [\r\n                  {id: 1, title :  'Key-Rank.', count: '-'},\r\n                  {id: 2, title :  'Click', count: '-'},\r\n                  {id: 3, title :  'Social Buzz', count: '-'},\r\n                  {id: 4, title :  'Num of Product', count: '-'},\r\n                  {id: 5, title :  'Num of Conversion', count: '-'},\r\n                ] , \r\n      chartDataArray : [] ,\r\n    };\r\n  }\r\n\r\n  ChangeStartDate = (e) => { \r\n    this.setState({  \r\n      startDate: e,\r\n    });\r\n  };  \r\n  \r\n  ChangeEndDate = (e) => { \r\n    this.setState({  \r\n      endDate: e\r\n    });  \r\n  }; \r\n\r\n  /* listClickEvt = (evt) => {\r\n    const getNum = Number(evt.currentTarget.className.replace('item-',''));\r\n    console.log('listClickEvt !! ' , getNum);\r\n    this.setState({\r\n      activeId : getNum\r\n    });\r\n    getChartData(getNum);\r\n  } */\r\n\r\n  SearchClick = (e) => {\r\n    console.log('SearchClick !!');\r\n    this.setState({  \r\n      searchBtnClick: true\r\n    });\r\n    \r\n  }\r\n\r\n  render() {\r\n\r\n    const statesItems = this.state;\r\n\r\n    const keyChartData = [\r\n      {id: 1, title: 'Post', count: 1000, series: [{data: [17, 15]}]},\r\n      {id: 2, title: 'Comment', count: 2000, series: [{data: [17, 15]}]},\r\n      {id: 3, title: 'Positive', count: 3000, series: [{data: [17, 15]}], class: 'blue'},\r\n      {id: 4, title: 'Negative', count: 4000, series: [{data: [17, 15]}], class: 'red'},\r\n    ]\r\n\r\n    const clickChartData = [\r\n      {id: 1, title: 'Buzz', count: 1000,series: [{data: [17, 15]}]},\r\n      {id: 2, title: 'Product', count: 2000,series: [{data: [17, 15]}]},\r\n      {id: 3, title: 'Conversion', count: 3000,series: [{data: [17, 15]}], class: 'blue'},\r\n    ]\r\n\r\n    const socialChartData = [\r\n      {id: 1, title: 'Post', count: 1000,series: [{data: [17, 15]}]},\r\n      {id: 2, title: 'Comment', count: 2000,series: [{data: [17, 15]}]},\r\n      {id: 3, title: 'Positive', count: 3000,series: [{data: [17, 15]}], class: 'blue'},\r\n      {id: 4, title: 'Negative', count: 3000,series: [{data: [17, 15]}], class: 'red'},\r\n    ]\r\n\r\n    const productChartData = [\r\n      {id: 1, title: 'Product', count: 1000,series: [{data: [17, 15]}]},\r\n      {id: 2, title: 'Review', count: 2000,series: [{data: [17, 15]}]},\r\n    ]\r\n\r\n    const converChartData = [\r\n      {id: 1, title: 'User', count: 1000,series: [{data: [17, 15]}]},\r\n      {id: 2, title: 'Session', count: 1000,series: [{data: [17, 15]}]},\r\n      {id: 3, title: 'Conver-sion', count: 1000,series: [{data: [17, 15]}], class: 'blue'},\r\n      {id: 4, title: 'Bounce', count: 1000,series: [{data: [17, 15]}], class: 'red'},\r\n    ]\r\n    \r\n    const genderChartData = {\r\n      series: [\r\n            {name: 'Male',  data: [45, 10]}, \r\n            {name: 'Female', data: [21, 50]}\r\n        ],\r\n        options: {\r\n          chart: {\r\n            height: 350,\r\n            type: 'line',\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            }\r\n          },\r\n          colors: ['#f69200', '#000'], \r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: 'straight'\r\n          },\r\n          xaxis: {\r\n            categories: ['Male', 'Female'],\r\n            tickPlacement: 'between'\r\n          },\r\n          legend: {\r\n            show: false\r\n          },\r\n        },\r\n        areaTitle : 'Gender'\r\n    }\r\n\r\n    const ageChartData = {\r\n      series: [\r\n            {name: 'Search',  data: [0.45, 0.1, 0.51, 0.94, 0.23, 0.65]}, \r\n            {name: 'Google Analyitcs', data: [0.21, 0.5, 0.45, 0.1, 0.51, 0.23,]}\r\n        ],\r\n        options: {\r\n          chart: {\r\n            height: 350,\r\n            type: 'line',\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            }\r\n          },\r\n          colors: ['#ea6910', '#000'], \r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: 'smooth'\r\n          },\r\n          xaxis: {\r\n            categories: ['10s', '20s', '30s', '40s', '50s', '60s+'],\r\n            tickPlacement: 'between'\r\n          },\r\n          legend: {\r\n            position: 'top'\r\n          },\r\n        },\r\n        areaTitle : 'Ages'\r\n    }\r\n\r\n    const deviceChartData = {\r\n      series: [\r\n            {name: 'PC',  data: [45, 10]}, \r\n            {name: 'Mobile', data: [21, 50]}\r\n        ],\r\n        options: {\r\n          chart: {\r\n            height: 350,\r\n            type: 'line',\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            }\r\n          },\r\n          colors: ['#f69200', '#000'], \r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: 'straight'\r\n          },\r\n          xaxis: {\r\n            categories: ['PC', 'Mobile'],\r\n            tickPlacement: 'between'\r\n          },\r\n          legend: {\r\n            show: false\r\n          }\r\n        },\r\n        areaTitle : 'Device'\r\n    }\r\n    // Search Flag Set \r\n    const setSearchFlag = (flag) => {\r\n      this.setState({  \r\n        searchStart : flag , \r\n      });\r\n    }\r\n    // get Chart Data\r\n    const getChartData = (clickId) => {    \r\n      var callUrl = \"\";\r\n      var cChartlist = []; \r\n      var cChartData = [];  \r\n      var chartData = {};\r\n      if (clickId === 1){ // Key-Rank\r\n        console.log('Key-Rank 아무것도 안한다.');\r\n        callUrl = \"\";\r\n      }\r\n      else if (clickId === 2){ // Click\r\n        callUrl = \"/prime/GetState_Total_Indicator_Click\";\r\n      }\r\n      else if (clickId === 3){ // Social Buzz\r\n        callUrl = \"/prime/GetState_Total_Indicator_SocialBuzz\";\r\n      }\r\n      else if (clickId === 4){ // Num of Product\r\n        callUrl = \"/prime/GetState_Total_Indicator_NumofProduct\";\r\n      }\r\n      else if (clickId === 5){ // Num of Conversion\r\n        callUrl = \"/prime/GetState_Total_Indicator_NumofConversion\";\r\n      }\r\n      \r\n      if (callUrl !== \"\"){\r\n        axios.post(callUrl,statesItems.searchCondition)\r\n        .then((response) => {\r\n            if (response.data.ErrorCode === 'OK'){    \r\n              let retJson = JSON.stringify(response.data);\r\n              if (retJson.indexOf(\"Data1\") !== -1){\r\n                chartData = {id: 1, title: response.data.Data1.Indicator_Name, count: response.data.Data1.Indicator_Value, series: [{data: [response.data.Data1.Past, response.data.Data1.Present]}]} ;\r\n                cChartData.push(chartData);\r\n              }\r\n              chartData = {};\r\n              if (retJson.indexOf(\"Data2\") !== -1){\r\n                chartData = {id: 2, title: response.data.Data2.Indicator_Name, count: response.data.Data2.Indicator_Value, series: [{data: [response.data.Data2.Past, response.data.Data2.Present]}]} ;\r\n                cChartData.push(chartData);\r\n              }\r\n              chartData = {};\r\n              if (retJson.indexOf(\"Data3\") !== -1){\r\n                if (response.data.Data3.Indicator_Name === 'Positive'){\r\n                  chartData = {id: 3, title: response.data.Data3.Indicator_Name, count: response.data.Data3.Indicator_Value, series: [{data: [response.data.Data3.Past, response.data.Data3.Present]}], class: 'blue'} ;\r\n                }\r\n                else{\r\n                  chartData = {id: 3, title: response.data.Data3.Indicator_Name, count: response.data.Data3.Indicator_Value, series: [{data: [response.data.Data3.Past, response.data.Data3.Present]}]} ;\r\n                }\r\n                \r\n                cChartData.push(chartData);\r\n              }\r\n              chartData = {};\r\n              if (retJson.indexOf(\"Data4\") !== -1){\r\n                if (response.data.Data4.Indicator_Name === 'Negative'){\r\n                  chartData = {id: 4, title: response.data.Data4.Indicator_Name, count: response.data.Data4.Indicator_Value, series: [{data: [response.data.Data4.Past, response.data.Data4.Present]}], class: 'red'} ;\r\n                }\r\n                else{\r\n                  chartData = {id: 4, title: response.data.Data4.Indicator_Name, count: response.data.Data4.Indicator_Value, series: [{data: [response.data.Data4.Past, response.data.Data4.Present]}]} ;\r\n                }\r\n                \r\n                cChartData.push(chartData);\r\n              }\r\n              cChartlist.push(cChartData);\r\n              statesItems.chartDataArray = cChartData;\r\n              this.setState({  \r\n                chartDataArray: [statesItems.chartDataArray,statesItems.chartDataArray,statesItems.chartDataArray,statesItems.chartDataArray,statesItems.chartDataArray] ,\r\n              });\r\n              console.log('chartDataArray - ' , statesItems.chartDataArray,cChartData);\r\n            }\r\n            else{\r\n              console.log('prime GetState4TrendIndicator click error!');\r\n            }\r\n            \r\n            setSearchFlag(false);\r\n            \r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            setSearchFlag(false);\r\n        });\r\n        \r\n      } \r\n\r\n    }\r\n    // 4-Trend indidcator\r\n    const getGetState4TrendIndicator = (param) =>{\r\n      axios.post(\"/prime/GetState_4_Trend_Indicator\",param)\r\n      .then((response) => {\r\n          if (response.data.ErrorCode === 'OK'){    \r\n            //console.log('prime getGetState4TrendIndicator - ' , response);\r\n            statesItems.indiCont[0].count = response.data.KeyRank;//Key-Rank.\r\n            statesItems.indiCont[1].count = response.data.Click;//Click\r\n            statesItems.indiCont[2].count = response.data.SocialBuzz;//Social Buzz\r\n            statesItems.indiCont[3].count = response.data.Num_Of_Product;//Num of Product\r\n            statesItems.indiCont[4].count = response.data.Num_Of_Conversion;//Num of Conversion\r\n            this.setState({  \r\n              indiCont: statesItems.indiCont,\r\n            });\r\n            console.log('prime getGetState4TrendIndicator set - ' , statesItems.indiCont);\r\n          }\r\n          else{\r\n            console.log('prime getGetState4TrendIndicator error');\r\n          }\r\n          setSearchFlag(false);\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);\r\n          setSearchFlag(false);\r\n      });\r\n\r\n    }\r\n    //4-Trend indidcator Click Event \r\n    const listClickEvt = (evt) => {\r\n      const getNum = Number(evt.currentTarget.className.replace('item-',''));\r\n      if (getNum > 1){\r\n        this.setState({\r\n          activeId : getNum ,\r\n        });\r\n        getChartData(getNum);\r\n        \r\n      }\r\n      \r\n    }\r\n    // 날짜 포맷\r\n    const dateString = (dateValue) => {\r\n      let retStr = '';\r\n      //Year\r\n      retStr = retStr.concat(dateValue.getFullYear());\r\n      //Month\r\n      if(dateValue.getMonth() < 10) {\r\n          retStr = retStr.concat('-0', dateValue.getMonth() + 1);\r\n      }\r\n      else {\r\n          retStr = retStr.concat('-', dateValue.getMonth() + 1);\r\n      }\r\n      //Date\r\n      if(dateValue.getDate() < 10) {\r\n          retStr = retStr.concat('-0', dateValue.getDate());\r\n      }\r\n      else {\r\n          retStr = retStr.concat('-', dateValue.getDate());\r\n      }\r\n      return retStr;\r\n    }\r\n    const chartDataArray = [keyChartData, clickChartData, socialChartData, productChartData, converChartData];\r\n    // const linechartDataArray = [genderChartData , ageChartData, deviceChartData];\r\n    const searchStart = (searchChannel) =>{\r\n      var searchCondition = {} ;\r\n      var ChannelUpper = [];\r\n      var ChannelLower = [];\r\n      this.setState({  \r\n        searchBtnClick: false\r\n      });\r\n      this.setState({  \r\n        searchCondition: {} ,\r\n        searchStart : false , \r\n      });\r\n      if (searchChannel.length > 0 ){\r\n         searchChannel.forEach(function(item,idx){\r\n           ChannelUpper.push(item.type);\r\n           ChannelLower.push(item.name);\r\n         });\r\n      }\r\n      else{\r\n        console.log('채널 선택 없음');\r\n      }\r\n      searchCondition.FromDate = dateString(statesItems.startDate); \r\n      searchCondition.ToDate = dateString(statesItems.endDate); \r\n      searchCondition.Period_Unit = \"Daily\";\r\n      searchCondition.Channel_Upper = ChannelUpper;\r\n      searchCondition.Channel_Lower = ChannelLower;\r\n      searchCondition.Keyword = statesItems.keyWordtext;\r\n      searchCondition.Company = statesItems.userInfo.CompanyName;\r\n      searchCondition.CompanyCode = statesItems.userInfo.CompanyCode;\r\n      // console.log('searchCondition',searchCondition);\r\n      this.setState({  \r\n        searchCondition: searchCondition ,\r\n        searchStart : true , \r\n      });\r\n      getGetState4TrendIndicator(statesItems.searchCondition);\r\n    };  \r\n    const validateKeyword = (value) => {\r\n      let error;\r\n      if (!statesItems.keyWordtext) {\r\n        error = 'No Keywords';\r\n      } \r\n      return error;\r\n    };\r\n    const onKeywordChange = (e) =>{\r\n      this.setState({\r\n        keyWordtext : e.target.value\r\n      }); \r\n    };\r\n    // eslint-disable-next-line prefer-const\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Form className=\"check-box-wrap multi\">\r\n                  <div className=\"tbl-vertical-heading\">\r\n                    <table>\r\n                      <tbody>\r\n                        <tr>\r\n                          {/* vertical유형의 테이블 th 값은 인라인 스타일로 지정 바랍니다. */}\r\n                          <th style={{ width:'15%' }}>Period</th>\r\n                          <td style={{ width:'85%' }} colSpan=\"3\">\r\n                            <div className=\"date-picker-wrap\">\r\n                              <DatePicker className=\"form-control\"  \r\n                              locale={ko}\r\n                              dateFormat=\"yyyy.MM.dd\"\r\n                              selected={statesItems.startDate} \r\n                              selectsStart\r\n                              startDate={statesItems.startDate}\r\n                              endDate={statesItems.endDate}\r\n                              onChange={this.ChangeStartDate}  \r\n                              placeholderText=\"Select Time\" \r\n                              /> \r\n                              <span className=\"cal-range\"> ~ </span>\r\n                              <DatePicker className=\"form-control\"  \r\n                              locale={ko}\r\n                              dateFormat=\"yyyy.MM.dd\"\r\n                              selected={statesItems.endDate}\r\n                              selectsEnd\r\n                              startDate={statesItems.startDate}\r\n                              endDate={statesItems.endDate}\r\n                              onChange={this.ChangeEndDate}  \r\n                              placeholderText=\"Select Time\" \r\n                              /> \r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th style={{ width:'15%' }}>Channel</th>\r\n                          <td style={{ width:'85%' }}>\r\n                            <ChannelButton searchStart={searchStart} searchBtnClick={statesItems.searchBtnClick}/>                             \r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th style={{ width:'15%' }}>Keywords</th>\r\n                          <td style={{ width:'85%' }}>\r\n                            <Formik\r\n                              initialValues={{\r\n                                keyword: '',\r\n                              }}\r\n                              // onSubmit={onSubmit}\r\n                            >\r\n                            {({ errors, touched }) => (\r\n                              <FormGroup className=\"keyword-area\">\r\n                                <Field\r\n                                  className=\"form-control\"\r\n                                  name=\"keyword\"\r\n                                  value={statesItems.keyWordtext}\r\n                                  onChange={onKeywordChange}\r\n                                  validate={validateKeyword}\r\n                                />\r\n                                {errors.keyword && touched.keyword && (\r\n                                  <div className=\"d-block noti-text\">\r\n                                    {errors.keyword}\r\n                                  </div>\r\n                                )}\r\n                              </FormGroup>\r\n                            )}\r\n                            </Formik>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <Button className=\"btn-xl mt-4\" color=\"gray\" onClick={this.SearchClick}>\r\n                      ENTER\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className='box-title'>\r\n                  <h2>4-Trend indidcator</h2>\r\n                </div>\r\n                <div className='indi-wrap'>\r\n                  <ul className='lst-indi'>\r\n                    {statesItems.indiCont.map((item, idx) => {\r\n                      const countNumberDot = item.count.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n                      return (\r\n                        // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\r\n                        <li \r\n                          // eslint-disable-next-line react/no-array-index-key\r\n                          key={idx} \r\n                          onClick={listClickEvt} // 여기서 클릭 이벤트 없애자\r\n                          className={`item-${item.id} ${statesItems.activeId === Number(item.id) ? ' active' : \"\"}` }\r\n                        >\r\n                          <div>\r\n                            <p>\r\n                              <span className='title'>{item.title}</span>\r\n                              <span className='count'>{countNumberDot}</span>\r\n                            </p>\r\n                          </div>\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                  <p className='cont-noti'>* 각 수치는 기간 내 일평균 값을 의미</p>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className='box-title'>\r\n                  <h2>Total Indicator</h2>\r\n                </div>\r\n                <div className='graph-area bar'>\r\n                  {/* <ul className='item-1 graph-list' > */}\r\n                  {statesItems.chartDataArray.map((list , indx) => {\r\n                    return(\r\n                      <ul \r\n                        // eslint-disable-next-line react/no-array-index-key\r\n                        key={indx} \r\n                        className={`item-${indx} graph-list`} style={statesItems.activeId === Number(`${indx + 1}`) ? {display : 'flex'} : {display : 'none'}}>\r\n                        {list.map((item, idx) => {\r\n                          const countNumberDot = item.count.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n                          return(\r\n                            <li \r\n                              // eslint-disable-next-line react/no-array-index-key\r\n                              key={idx}\r\n                            >\r\n                              <div className='count-area'>\r\n                                <p className='area-title'>{item.title}</p>\r\n                                <p className={`count ${item.class}`}>{countNumberDot}</p>\r\n                              </div>\r\n                              <div className='chart-area'>\r\n                                <div id=\"chart\">\r\n                                  <CompareBar options={statesItems.barChart.options} series={item.series} type=\"bar\" height={350} />\r\n                                </div>\r\n                              </div>\r\n                            </li>\r\n                          );\r\n                        })}\r\n                      </ul>\r\n                    )\r\n                  })}\r\n                  <p className='cont-noti'>* 각 수치는 기간 내 총 합계를 의미</p>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n       {/* \r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className='box-title'>\r\n                  <h2>Demographics Comparison</h2>\r\n                </div>\r\n                <div className='graph-area line'>\r\n                  <ul className='graph-list'>\r\n                    {linechartDataArray.map((item, idx)=>{\r\n                      return(\r\n                        // eslint-disable-next-line react/no-array-index-key\r\n                        <li key={idx} className={idx === 1 ? 'center_graph' : ''}>\r\n                          <div className='chart-area'>\r\n                            <div id=\"chart\">\r\n                              <CompareLine options={item.options} series={item.series} type=\"line\" height={350} />\r\n                            </div>\r\n                          </div>\r\n                          <div className='txt-area'>\r\n                            <p className='area-title'>{item.areaTitle}</p>\r\n                          </div>\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                  <p className='cont-noti'>* 각 수치는 기간 내 총 비율을 의미</p>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        */}\r\n      </>\r\n    ) // render end\r\n  }\r\n}\r\n\r\nexport default Prime;\r\n","C:\\tagons\\src\\components\\applications\\ChannelButton.js",["443","444","445","446","447","448","449"],"import React, { useState , useEffect} from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport axios from 'axios';\r\n\r\nconst ChannelButton = (props) => {\r\n  const [rSelected, setRSelected] = useState(null);\r\n  const [checkSelected, setCheckSelected] = useState([]);\r\n  const [selectArray, setSelectArray] = useState([]);\r\n  const [socialDataTitle,setSocialDataTitle] = useState([]); \r\n  const [socialDataList,setSocialDataList] = useState([]); \r\n  const [onlineShopData,setOnlineShopData] = useState([]); \r\n  const [googleAnalData,setGoogleAnalData] = useState([]); \r\n\r\n  var socialData = [];\r\n  const tabTitle = ['Social', 'Online Shopping', 'Google Analytics'];\r\n \r\n\r\n  const onCheckboxBtnClick = (id, name, type) => {\r\n    const checkFunc = selectArray.findIndex((item)=> item.id === id);\r\n    // console.log('onCheckboxBtnClick 1',checkSelected, selectArray);\r\n    if (checkFunc < 0) {\r\n        selectArray.push({id, name, type});\r\n        checkSelected.push(id);\r\n    } else {\r\n        selectArray.splice(checkFunc , 1);\r\n        checkSelected.splice(checkFunc , 1);\r\n    }\r\n\r\n    setCheckSelected([...checkSelected]);\r\n    setSelectArray([...selectArray]);\r\n    // console.log('onCheckboxBtnClick 2',checkSelected, selectArray);\r\n  };\r\n    \r\n  const tagRemoveBtn = (id) =>{ \r\n    // console.log('tagRemoveBtn1',id,checkFunc,selectArray);\r\n    const checkFunc = selectArray.findIndex((item)=> item.id === id);\r\n    // console.log('tagRemoveBtn2',id,checkFunc,selectArray,checkSelected);\r\n    selectArray.splice(checkFunc , 1);\r\n    checkSelected.splice(checkFunc , 1);\r\n    setCheckSelected([...checkSelected]);\r\n    setSelectArray([...selectArray]);\r\n  }\r\n\r\n  const resetArray = (id) => {\r\n      setCheckSelected([]);\r\n      setSelectArray([]);\r\n      setRSelected(id);        \r\n  }\r\n\r\n  const setChannelSelected = (id) => {\r\n      setRSelected(id);        \r\n  }\r\n\r\n  useEffect(() => {\r\n    var OnlineShopping = [];\r\n    var Social = {};\r\n    var socialTitle = [];\r\n    var oldChannelType = '';\r\n    var allIdx = 0;\r\n    axios.post(\"/common/GetChannel_List\")\r\n    .then((response) => {\r\n        if (response.data.ErrorCode === 'OK'){    \r\n          response.data.OnlineShopping.forEach(function(item,idx){\r\n            allIdx += 1;\r\n            OnlineShopping.push({id: allIdx, name: item.Channel , type:'Online Shopping'});\r\n          });\r\n          // console.log('OnlineShopping List', OnlineShopping);\r\n          response.data.Social.forEach(function(item,idx){\r\n            if (oldChannelType != item.ChannelType){\r\n              oldChannelType = item.ChannelType;\r\n              Social[oldChannelType] =[];\r\n            }\r\n            allIdx += 1;\r\n            Social[oldChannelType].push({id:allIdx,name:item.Channel,ChannelType:item.ChannelType,type:'Social'});\r\n          });\r\n          socialTitle = Object.keys(Social);\r\n          // console.log('SocialDataTitle List', Object.keys(Social),socialDataTitle);\r\n          socialTitle.forEach(function(item,idx){\r\n            socialData.push(Social[item]);\r\n          });\r\n          setSocialDataList(socialData);\r\n        }\r\n        else{\r\n          console.log('prime 조회조건 error');\r\n        }\r\n        setOnlineShopData(OnlineShopping);\r\n        setSocialDataTitle(socialTitle);\r\n        setSocialDataList(socialData);\r\n        allIdx += 1;\r\n        setGoogleAnalData([{id: allIdx, name: 'Google Analytics',type:'Google Analytics'}]);\r\n    })\r\n    .catch(function (error) {\r\n        console.log(error);\r\n    });\r\n\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log('socialDataTitle change', socialDataTitle,socialDataList);\r\n  }, [socialDataTitle]);\r\n  useEffect(() => {\r\n    if (props.searchBtnClick){\r\n      console.log('ChannelButton click');\r\n      props.searchStart(selectArray);\r\n    }\r\n  }, [props.searchBtnClick]);\r\n  return (\r\n    <>\r\n      <div className='channel_header'>\r\n      {tabTitle.map((title, idx) => {\r\n          return(\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            <Button key={idx} color='h_tab' onClick={() => setChannelSelected(idx)} active={rSelected === idx}>{title}</Button>\r\n          )\r\n      })}\r\n      </div>\r\n\r\n      <div className={`channel_cont ${rSelected === 0 ? ' active': ''}`}>\r\n        <table className='tbl_social'>\r\n            <tbody>\r\n                {socialDataList.map((list, idx) => {\r\n                    return(\r\n                        // eslint-disable-next-line react/no-array-index-key\r\n                        <tr key={idx}>\r\n                            <th>{socialDataTitle[idx]}</th>\r\n                            <td>\r\n                                {list.map(item => {\r\n                                    return (\r\n                                        <Button color=\"items\" key={item.id} onClick={() => onCheckboxBtnClick(item.id, item.name, item.type)} active={checkSelected.includes(item.id)}>{item.name}</Button>\r\n                                    )\r\n                                })}\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </table>\r\n        <ul className='list_tag'>\r\n            {selectArray.map((item, idx) =>{\r\n                return(\r\n                    // eslint-disable-next-line react/no-array-index-key\r\n                    <li key={idx}>{item.name} <Button close onClick={() => tagRemoveBtn(item.id)} /></li>\r\n                )\r\n            })}\r\n        </ul>\r\n      </div>\r\n\r\n      <div className={`channel_cont ${rSelected === 1 ? ' active': ''}`}>\r\n        <table className='tbl_social'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        {onlineShopData.map((item) => {\r\n                            return(\r\n                                <Button color=\"items\" key={item.id} onClick={() => onCheckboxBtnClick(item.id, item.name, item.type)} active={checkSelected.includes(item.id)}>{item.name}</Button>\r\n                            )\r\n                        })}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        \r\n        <ul className='list_tag'>\r\n            {selectArray.map((item, idx) =>{\r\n                return(\r\n                    // eslint-disable-next-line react/no-array-index-key\r\n                    <li key={idx}>{item.name} <Button close onClick={() => tagRemoveBtn(item.id)} /></li>\r\n                )\r\n            })}\r\n        </ul>\r\n      </div>\r\n\r\n      <div className={`channel_cont ${rSelected === 2 ? ' active': ''}`}>\r\n        <table className='tbl_social'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        {googleAnalData.map((item) => {\r\n                            return(\r\n                                <Button color=\"items\" key={item.id} onClick={() => onCheckboxBtnClick(item.id, item.name, item.type)} active={checkSelected.includes(item.id)}>{item.name}</Button>\r\n                            )\r\n                        })}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <ul className='list_tag'>\r\n            {selectArray.map((item, idx) =>{\r\n                return(\r\n                    // eslint-disable-next-line react/no-array-index-key\r\n                    <li key={idx}>{item.name} <Button close onClick={() => tagRemoveBtn(item.id)} /></li>\r\n                )\r\n            })}\r\n        </ul>\r\n      </div>      \r\n    </>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default ChannelButton;","C:\\tagons\\src\\components\\charts\\CompareLine.js",[],"C:\\tagons\\src\\components\\charts\\CompareBar.js",[],"C:\\tagons\\src\\views\\app\\trend\\index.js",[],"C:\\tagons\\src\\services\\LoginService.js",[],"C:\\tagons\\src\\views\\app\\trend\\Social.js",[],"C:\\tagons\\src\\views\\app\\trend\\Overview.js",["450","451"],"C:\\tagons\\src\\views\\app\\trend\\Ecommerce.js",[],"C:\\tagons\\src\\views\\app\\prime\\Channels.js",[],"C:\\tagons\\src\\containers\\navs\\Leftmenulist.js",[],"C:\\tagons\\src\\components\\applications\\ChannelTable.js",[],"C:\\tagons\\src\\components\\charts\\HeatMap.js",[],"C:\\tagons\\src\\components\\charts\\NegativeBar.js",[],{"ruleId":"452","replacedBy":"453"},{"ruleId":"454","replacedBy":"455"},{"ruleId":"456","replacedBy":"457"},{"ruleId":"458","replacedBy":"459"},{"ruleId":"460","replacedBy":"461"},{"ruleId":"462","replacedBy":"463"},{"ruleId":"464","replacedBy":"465"},{"ruleId":"466","severity":1,"message":"467","line":82,"column":16,"nodeType":"468","messageId":"469","endLine":82,"endColumn":25},{"ruleId":"470","severity":1,"message":"471","line":33,"column":6,"nodeType":"472","endLine":33,"endColumn":8,"suggestions":"473"},{"ruleId":"470","severity":1,"message":"474","line":94,"column":24,"nodeType":"475","endLine":94,"endColumn":37},{"ruleId":"466","severity":1,"message":"467","line":99,"column":12,"nodeType":"468","messageId":"469","endLine":99,"endColumn":21},{"ruleId":"466","severity":1,"message":"467","line":115,"column":31,"nodeType":"468","messageId":"469","endLine":115,"endColumn":39},{"ruleId":"466","severity":1,"message":"467","line":130,"column":31,"nodeType":"468","messageId":"469","endLine":130,"endColumn":39},{"ruleId":"466","severity":1,"message":"467","line":143,"column":31,"nodeType":"468","messageId":"469","endLine":143,"endColumn":39},{"ruleId":"466","severity":1,"message":"467","line":160,"column":37,"nodeType":"468","messageId":"469","endLine":160,"endColumn":45},{"ruleId":"466","severity":1,"message":"467","line":173,"column":37,"nodeType":"468","messageId":"469","endLine":173,"endColumn":45},{"ruleId":"470","severity":1,"message":"476","line":282,"column":6,"nodeType":"472","endLine":282,"endColumn":22,"suggestions":"477"},{"ruleId":"466","severity":1,"message":"467","line":153,"column":13,"nodeType":"468","messageId":"469","endLine":153,"endColumn":22},{"ruleId":"466","severity":1,"message":"467","line":158,"column":14,"nodeType":"468","messageId":"469","endLine":158,"endColumn":23},{"ruleId":"470","severity":1,"message":"478","line":186,"column":5,"nodeType":"472","endLine":186,"endColumn":28,"suggestions":"479"},{"ruleId":"470","severity":1,"message":"480","line":163,"column":8,"nodeType":"472","endLine":163,"endColumn":39,"suggestions":"481"},{"ruleId":"470","severity":1,"message":"482","line":261,"column":8,"nodeType":"472","endLine":261,"endColumn":25,"suggestions":"483"},{"ruleId":"466","severity":1,"message":"467","line":38,"column":17,"nodeType":"468","messageId":"469","endLine":38,"endColumn":26},{"ruleId":"466","severity":1,"message":"467","line":41,"column":18,"nodeType":"468","messageId":"469","endLine":41,"endColumn":27},{"ruleId":"466","severity":1,"message":"484","line":85,"column":15,"nodeType":"468","messageId":"469","endLine":86,"endColumn":25},{"ruleId":"466","severity":1,"message":"485","line":94,"column":13,"nodeType":"468","messageId":"469","endLine":94,"endColumn":29},{"ruleId":"466","severity":1,"message":"486","line":106,"column":13,"nodeType":"468","messageId":"469","endLine":106,"endColumn":32},{"ruleId":"466","severity":1,"message":"486","line":130,"column":15,"nodeType":"468","messageId":"469","endLine":130,"endColumn":34},{"ruleId":"466","severity":1,"message":"484","line":165,"column":15,"nodeType":"468","messageId":"469","endLine":166,"endColumn":25},{"ruleId":"466","severity":1,"message":"485","line":174,"column":13,"nodeType":"468","messageId":"469","endLine":174,"endColumn":29},{"ruleId":"466","severity":1,"message":"486","line":185,"column":13,"nodeType":"468","messageId":"469","endLine":185,"endColumn":32},{"ruleId":"466","severity":1,"message":"486","line":209,"column":15,"nodeType":"468","messageId":"469","endLine":209,"endColumn":34},{"ruleId":"470","severity":1,"message":"487","line":233,"column":5,"nodeType":"472","endLine":233,"endColumn":32,"suggestions":"488"},{"ruleId":"466","severity":1,"message":"467","line":69,"column":17,"nodeType":"468","messageId":"469","endLine":69,"endColumn":26},{"ruleId":"466","severity":1,"message":"467","line":77,"column":18,"nodeType":"468","messageId":"469","endLine":77,"endColumn":27},{"ruleId":"466","severity":1,"message":"467","line":110,"column":17,"nodeType":"468","messageId":"469","endLine":110,"endColumn":26},{"ruleId":"466","severity":1,"message":"467","line":124,"column":18,"nodeType":"468","messageId":"469","endLine":124,"endColumn":27},{"ruleId":"466","severity":1,"message":"484","line":142,"column":13,"nodeType":"468","messageId":"469","endLine":142,"endColumn":28},{"ruleId":"466","severity":1,"message":"485","line":150,"column":11,"nodeType":"468","messageId":"469","endLine":150,"endColumn":27},{"ruleId":"466","severity":1,"message":"486","line":244,"column":11,"nodeType":"468","messageId":"469","endLine":244,"endColumn":30},{"ruleId":"466","severity":1,"message":"467","line":341,"column":13,"nodeType":"468","messageId":"469","endLine":341,"endColumn":22},{"ruleId":"466","severity":1,"message":"467","line":346,"column":14,"nodeType":"468","messageId":"469","endLine":346,"endColumn":23},{"ruleId":"470","severity":1,"message":"489","line":380,"column":6,"nodeType":"472","endLine":380,"endColumn":29,"suggestions":"490"},{"ruleId":"470","severity":1,"message":"491","line":125,"column":7,"nodeType":"472","endLine":125,"endColumn":63,"suggestions":"492"},{"ruleId":"466","severity":1,"message":"467","line":19,"column":11,"nodeType":"468","messageId":"469","endLine":19,"endColumn":20},{"ruleId":"466","severity":1,"message":"467","line":23,"column":12,"nodeType":"468","messageId":"469","endLine":23,"endColumn":21},{"ruleId":"470","severity":1,"message":"493","line":47,"column":6,"nodeType":"472","endLine":47,"endColumn":29,"suggestions":"494"},{"ruleId":"466","severity":1,"message":"486","line":44,"column":15,"nodeType":"468","messageId":"469","endLine":44,"endColumn":34},{"ruleId":"470","severity":1,"message":"495","line":18,"column":7,"nodeType":"472","endLine":18,"endColumn":38,"suggestions":"496"},{"ruleId":"466","severity":1,"message":"467","line":352,"column":16,"nodeType":"468","messageId":"469","endLine":352,"endColumn":25},{"ruleId":"466","severity":1,"message":"467","line":381,"column":14,"nodeType":"468","messageId":"469","endLine":381,"endColumn":23},{"ruleId":"466","severity":1,"message":"467","line":434,"column":32,"nodeType":"468","messageId":"469","endLine":434,"endColumn":40},{"ruleId":"466","severity":1,"message":"467","line":63,"column":48,"nodeType":"468","messageId":"469","endLine":63,"endColumn":56},{"ruleId":"466","severity":1,"message":"467","line":68,"column":40,"nodeType":"468","messageId":"469","endLine":68,"endColumn":48},{"ruleId":"466","severity":1,"message":"467","line":78,"column":31,"nodeType":"468","messageId":"469","endLine":78,"endColumn":39},{"ruleId":"466","severity":1,"message":"467","line":92,"column":12,"nodeType":"468","messageId":"469","endLine":92,"endColumn":21},{"ruleId":"470","severity":1,"message":"497","line":96,"column":6,"nodeType":"472","endLine":96,"endColumn":8,"suggestions":"498"},{"ruleId":"470","severity":1,"message":"499","line":99,"column":6,"nodeType":"472","endLine":99,"endColumn":23,"suggestions":"500"},{"ruleId":"470","severity":1,"message":"501","line":105,"column":6,"nodeType":"472","endLine":105,"endColumn":28,"suggestions":"502"},{"ruleId":"466","severity":1,"message":"486","line":253,"column":39,"nodeType":"468","messageId":"469","endLine":253,"endColumn":58},{"ruleId":"466","severity":1,"message":"486","line":325,"column":39,"nodeType":"468","messageId":"469","endLine":325,"endColumn":58},"jsx-a11y/accessible-emoji",[],"jsx-a11y/label-has-for",[],"lines-around-directive",["503"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'requestHide' and 'timeOut'. Either include them or remove the dependency array.","ArrayExpression",["504"],"Assignments to the 'categoryList' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","React Hook useEffect has a missing dependency: 'searchActivrClick'. Either include it or remove the dependency array.",["505"],"React Hook useEffect has missing dependencies: 'callGIApi' and 'dispatch'. Either include them or remove the dependency array.",["506"],"React Hook useEffect has missing dependencies: 'props.activeTab' and 'store.SearchCondition.activeFirstTab'. Either include them or remove the dependency array.",["507"],"React Hook useEffect has missing dependencies: 'store.SearchCondition.activeFirstTab' and 'store2.iPfactorTrendandfactor'. Either include them or remove the dependency array.",["508"],"Unexpected unnamed method 'click'.","Unexpected unnamed method 'custom'.","Unexpected unnamed method 'formatter'.","React Hook useEffect has missing dependencies: 'clickChart' and 'dispatch'. Either include them or remove the dependency array.",["509"],"React Hook useEffect has missing dependencies: 'ScatterChartOption.options', 'callTrendQuadApi', 'dispatch', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["510"],"React Hook useEffect has missing dependencies: 'lineOptions', 'props', 'startApp.SearchCondition.FromDate', and 'startApp.SearchCondition.ToDate'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["511"],"React Hook React.useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.",["512"],"React Hook useEffect has a missing dependency: 'store2.iPfactorGiRelatedword'. Either include it or remove the dependency array.",["513"],"React Hook useEffect has a missing dependency: 'socialData'. Either include it or remove the dependency array.",["514"],"React Hook useEffect has a missing dependency: 'socialDataList'. Either include it or remove the dependency array.",["515"],"React Hook useEffect has missing dependencies: 'props' and 'selectArray'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["516"],"padding-line-between-statements",{"desc":"517","fix":"518"},{"desc":"519","fix":"520"},{"desc":"521","fix":"522"},{"desc":"523","fix":"524"},{"desc":"523","fix":"525"},{"desc":"526","fix":"527"},{"desc":"528","fix":"529"},{"desc":"530","fix":"531"},{"desc":"532","fix":"533"},{"desc":"534","fix":"535"},{"desc":"536","fix":"537"},{"desc":"538","fix":"539"},{"desc":"540","fix":"541"},"Update the dependencies array to be: [requestHide, timeOut]",{"range":"542","text":"543"},"Update the dependencies array to be: [activeFirstTab, searchActivrClick]",{"range":"544","text":"545"},"Update the dependencies array to be: [callGIApi, dispatch, store.SearchCondition]",{"range":"546","text":"547"},"Update the dependencies array to be: [props.activeTab, store.SearchCondition.activeFirstTab, store2.iPfactorTrendandfactor]",{"range":"548","text":"549"},{"range":"550","text":"549"},"Update the dependencies array to be: [clickChart, dispatch, store2.iGiBubbleelectData]",{"range":"551","text":"552"},"Update the dependencies array to be: [ScatterChartOption.options, callTrendQuadApi, dispatch, props, store.SearchCondition]",{"range":"553","text":"554"},"Update the dependencies array to be: [industryApp.iPfactorTrendandfactor, lineOptions, props, props.showPreTrend, startApp.SearchCondition.FromDate, startApp.SearchCondition.ToDate]",{"range":"555","text":"556"},"Update the dependencies array to be: [store, store.SearchCondition]",{"range":"557","text":"558"},"Update the dependencies array to be: [store2.iPfactorGiRelatedword, store2.iPfactorGiRelatedwords]",{"range":"559","text":"560"},"Update the dependencies array to be: [socialData]",{"range":"561","text":"562"},"Update the dependencies array to be: [socialDataList, socialDataTitle]",{"range":"563","text":"564"},"Update the dependencies array to be: [props, props.searchBtnClick, selectArray]",{"range":"565","text":"566"},[742,744],"[requestHide, timeOut]",[10367,10383],"[activeFirstTab, searchActivrClick]",[5988,6011],"[callGIApi, dispatch, store.SearchCondition]",[5152,5183],"[props.activeTab, store.SearchCondition.activeFirstTab, store2.iPfactorTrendandfactor]",[8441,8458],[7730,7757],"[clickChart, dispatch, store2.iGiBubbleelectData]",[12238,12261],"[ScatterChartOption.options, callTrendQuadApi, dispatch, props, store.SearchCondition]",[4638,4694],"[industryApp.iPfactorTrendandfactor, lineOptions, props, props.showPreTrend, startApp.SearchCondition.FromDate, startApp.SearchCondition.ToDate]",[1702,1725],"[store, store.SearchCondition]",[765,796],"[store2.iPfactorGiRelatedword, store2.iPfactorGiRelatedwords]",[3487,3489],"[socialData]",[3595,3612],"[socialDataList, socialDataTitle]",[3763,3785],"[props, props.searchBtnClick, selectArray]"]