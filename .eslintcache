[{"C:\\tagons\\src\\index.js":"1","C:\\tagons\\src\\AppRenderer.js":"2","C:\\tagons\\src\\constants\\defaultValues.js":"3","C:\\tagons\\src\\helpers\\Utils.js":"4","C:\\tagons\\src\\reportWebVitals.js":"5","C:\\tagons\\src\\App.js":"6","C:\\tagons\\src\\redux\\store.js":"7","C:\\tagons\\src\\helpers\\authHelper.js":"8","C:\\tagons\\src\\helpers\\Firebase.js":"9","C:\\tagons\\src\\views\\error.js":"10","C:\\tagons\\src\\views\\unauthorized.js":"11","C:\\tagons\\src\\redux\\reducers.js":"12","C:\\tagons\\src\\redux\\sagas.js":"13","C:\\tagons\\src\\lang\\index.js":"14","C:\\tagons\\src\\views\\user\\index.js":"15","C:\\tagons\\src\\views\\app\\index.js":"16","C:\\tagons\\src\\components\\common\\react-notifications\\index.js":"17","C:\\tagons\\src\\components\\common\\CustomBootstrap.js":"18","C:\\tagons\\src\\helpers\\IntlMessages.js":"19","C:\\tagons\\src\\redux\\settings\\reducer.js":"20","C:\\tagons\\src\\redux\\menu\\reducer.js":"21","C:\\tagons\\src\\redux\\auth\\reducer.js":"22","C:\\tagons\\src\\redux\\auth\\saga.js":"23","C:\\tagons\\src\\redux\\chat\\reducer.js":"24","C:\\tagons\\src\\redux\\todo\\reducer.js":"25","C:\\tagons\\src\\redux\\chat\\saga.js":"26","C:\\tagons\\src\\redux\\surveyList\\reducer.js":"27","C:\\tagons\\src\\redux\\todo\\saga.js":"28","C:\\tagons\\src\\redux\\surveyList\\saga.js":"29","C:\\tagons\\src\\redux\\industry\\reducer.js":"30","C:\\tagons\\src\\redux\\surveyDetail\\saga.js":"31","C:\\tagons\\src\\redux\\start\\reducer.js":"32","C:\\tagons\\src\\redux\\surveyDetail\\reducer.js":"33","C:\\tagons\\src\\views\\user\\register.js":"34","C:\\tagons\\src\\views\\user\\login.js":"35","C:\\tagons\\src\\views\\user\\forgot-password.js":"36","C:\\tagons\\src\\views\\user\\reset-password.js":"37","C:\\tagons\\src\\lang\\entries\\en-US-rtl.js":"38","C:\\tagons\\src\\lang\\entries\\es-ES.js":"39","C:\\tagons\\src\\lang\\entries\\en-US.js":"40","C:\\tagons\\src\\layout\\UserLayout.js":"41","C:\\tagons\\src\\layout\\AppLayout.js":"42","C:\\tagons\\src\\components\\common\\react-notifications\\NotificationContainer.js":"43","C:\\tagons\\src\\components\\common\\react-notifications\\NotificationManager.js":"44","C:\\tagons\\src\\components\\common\\react-notifications\\Notifications.js":"45","C:\\tagons\\src\\redux\\actions.js":"46","C:\\tagons\\src\\redux\\auth\\actions.js":"47","C:\\tagons\\src\\redux\\surveyList\\actions.js":"48","C:\\tagons\\src\\redux\\surveyDetail\\actions.js":"49","C:\\tagons\\src\\redux\\todo\\actions.js":"50","C:\\tagons\\src\\redux\\chat\\actions.js":"51","C:\\tagons\\src\\views\\app\\gogo\\index.js":"52","C:\\tagons\\src\\views\\app\\about\\index.js":"53","C:\\tagons\\src\\views\\app\\second-menu\\index.js":"54","C:\\tagons\\src\\lang\\locales\\en_US.js":"55","C:\\tagons\\src\\lang\\locales\\es_ES.js":"56","C:\\tagons\\src\\components\\common\\react-notifications\\Notification.js":"57","C:\\tagons\\src\\redux\\industry\\actions.js":"58","C:\\tagons\\src\\redux\\start\\actions.js":"59","C:\\tagons\\src\\redux\\menu\\actions.js":"60","C:\\tagons\\src\\redux\\settings\\actions.js":"61","C:\\tagons\\src\\containers\\navs\\Topnav.js":"62","C:\\tagons\\src\\containers\\navs\\Leftmenu.js":"63","C:\\tagons\\src\\views\\app\\second-menu\\second.js":"64","C:\\tagons\\src\\views\\app\\about\\about.js":"65","C:\\tagons\\src\\views\\app\\gogo\\start.js":"66","C:\\tagons\\src\\containers\\navs\\Breadcrumb.js":"67","C:\\tagons\\src\\components\\common\\CustomSelectInput.js":"68","C:\\tagons\\src\\containers\\ui\\ReactTableCards.js":"69","C:\\tagons\\src\\components\\charts\\Bar.js":"70","C:\\tagons\\src\\components\\charts\\Bubble.js":"71","C:\\tagons\\src\\components\\charts\\ScatterDatetime.js":"72","C:\\tagons\\src\\components\\charts\\Line.js":"73","C:\\tagons\\src\\containers\\pages\\ShowRoom.js":"74","C:\\tagons\\src\\components\\charts\\config.js":"75","C:\\tagons\\src\\containers\\pages\\ActiveKeyword.js":"76","C:\\tagons\\src\\data\\products.js":"77","C:\\tagons\\src\\components\\DatatablePagination.js":"78","C:\\tagons\\src\\containers\\pages\\RelationImage.js":"79","C:\\tagons\\src\\views\\app\\prime\\index.js":"80","C:\\tagons\\src\\views\\app\\prime\\Prime.js":"81","C:\\tagons\\src\\components\\applications\\ChannelButton.js":"82","C:\\tagons\\src\\components\\charts\\CompareLine.js":"83","C:\\tagons\\src\\components\\charts\\CompareBar.js":"84","C:\\tagons\\src\\views\\app\\trend\\index.js":"85","C:\\tagons\\src\\services\\LoginService.js":"86","C:\\tagons\\src\\views\\app\\trend\\Social.js":"87","C:\\tagons\\src\\views\\app\\trend\\Overview.js":"88","C:\\tagons\\src\\views\\app\\trend\\Ecommerce.js":"89","C:\\tagons\\src\\views\\app\\prime\\Channels.js":"90","C:\\tagons\\src\\containers\\navs\\Leftmenulist.js":"91","C:\\tagons\\src\\components\\applications\\ChannelTable.js":"92","C:\\tagons\\src\\components\\charts\\HeatMap.js":"93","C:\\tagons\\src\\components\\charts\\NegativeBar.js":"94","C:\\tagons\\src\\views\\app\\trend\\googleAnalytics.js":"95","C:\\tagons\\src\\views\\app\\trend\\data.js":"96","C:\\tagons\\src\\views\\app\\socialListening\\index.js":"97","C:\\tagons\\src\\views\\app\\trend\\Response.js":"98","C:\\tagons\\src\\views\\app\\socialListening\\Needspatterns.js":"99","C:\\tagons\\src\\helpers\\DevUtils.js":"100","C:\\tagons\\src\\views\\app\\socialListening\\tableData.js":"101","C:\\tagons\\src\\components\\applications\\TableRowspan.js":"102","C:\\tagons\\src\\components\\applications\\Row.js":"103","C:\\tagons\\src\\components\\applications\\TableColumn.js":"104","C:\\tagons\\src\\views\\app\\socialListening\\Sentimentanalysis.js":"105","C:\\tagons\\src\\views\\app\\onlineRetailer\\index.js":"106","C:\\tagons\\src\\components\\charts\\FullStackBar.js":"107","C:\\tagons\\src\\components\\applications\\TagInput.js":"108","C:\\tagons\\src\\containers\\ui\\ReactTableNormal.js":"109","C:\\tagons\\src\\views\\app\\onlineRetailer\\Productprice.js":"110","C:\\tagons\\src\\views\\app\\onlineRetailer\\Onboard.js":"111","C:\\tagons\\src\\views\\app\\onlineRetailer\\Overview.js":"112","C:\\tagons\\src\\components\\charts\\CompareScatter.js":"113","C:\\tagons\\src\\components\\charts\\CompareBubble.js":"114","C:\\tagons\\src\\views\\app\\onlineRetailer\\tableData.js":"115"},{"size":844,"mtime":1625325294948,"results":"116","hashOfConfig":"117"},{"size":794,"mtime":1625325294677,"results":"118","hashOfConfig":"117"},{"size":1559,"mtime":1626685275955,"results":"119","hashOfConfig":"117"},{"size":4492,"mtime":1625325294946,"results":"120","hashOfConfig":"117"},{"size":377,"mtime":1625325294969,"results":"121","hashOfConfig":"117"},{"size":2991,"mtime":1625325294676,"results":"122","hashOfConfig":"117"},{"size":782,"mtime":1626244411204,"results":"123","hashOfConfig":"117"},{"size":1196,"mtime":1626244411181,"results":"124","hashOfConfig":"117"},{"size":301,"mtime":1625325294945,"results":"125","hashOfConfig":"117"},{"size":2050,"mtime":1625325294981,"results":"126","hashOfConfig":"117"},{"size":2068,"mtime":1625325294982,"results":"127","hashOfConfig":"117"},{"size":646,"mtime":1626244411196,"results":"128","hashOfConfig":"117"},{"size":455,"mtime":1626244411196,"results":"129","hashOfConfig":"117"},{"size":684,"mtime":1625325294951,"results":"130","hashOfConfig":"117"},{"size":1490,"mtime":1625325294984,"results":"131","hashOfConfig":"117"},{"size":2600,"mtime":1628396955677,"results":"132","hashOfConfig":"117"},{"size":270,"mtime":1625325294872,"results":"133","hashOfConfig":"117"},{"size":295,"mtime":1625325294865,"results":"134","hashOfConfig":"117"},{"size":227,"mtime":1625325294945,"results":"135","hashOfConfig":"117"},{"size":373,"mtime":1625325294962,"results":"136","hashOfConfig":"117"},{"size":1457,"mtime":1625325294959,"results":"137","hashOfConfig":"117"},{"size":2566,"mtime":1625325294955,"results":"138","hashOfConfig":"117"},{"size":4862,"mtime":1625325294956,"results":"139","hashOfConfig":"117"},{"size":2407,"mtime":1625325294957,"results":"140","hashOfConfig":"117"},{"size":4038,"mtime":1625325294968,"results":"141","hashOfConfig":"117"},{"size":5492,"mtime":1625325294958,"results":"142","hashOfConfig":"117"},{"size":4226,"mtime":1625325294966,"results":"143","hashOfConfig":"117"},{"size":1871,"mtime":1625325294969,"results":"144","hashOfConfig":"117"},{"size":1970,"mtime":1625325294966,"results":"145","hashOfConfig":"117"},{"size":2598,"mtime":1626244411188,"results":"146","hashOfConfig":"117"},{"size":1816,"mtime":1625325294964,"results":"147","hashOfConfig":"117"},{"size":952,"mtime":1626244411204,"results":"148","hashOfConfig":"117"},{"size":810,"mtime":1625325294964,"results":"149","hashOfConfig":"117"},{"size":3113,"mtime":1625325294985,"results":"150","hashOfConfig":"117"},{"size":7202,"mtime":1626685275979,"results":"151","hashOfConfig":"117"},{"size":4720,"mtime":1625325294983,"results":"152","hashOfConfig":"117"},{"size":5790,"mtime":1625325294986,"results":"153","hashOfConfig":"117"},{"size":159,"mtime":1625325294949,"results":"154","hashOfConfig":"117"},{"size":153,"mtime":1625325294950,"results":"155","hashOfConfig":"117"},{"size":153,"mtime":1625325294950,"results":"156","hashOfConfig":"117"},{"size":511,"mtime":1626244411181,"results":"157","hashOfConfig":"117"},{"size":932,"mtime":1625325294953,"results":"158","hashOfConfig":"117"},{"size":1293,"mtime":1625325294870,"results":"159","hashOfConfig":"117"},{"size":2950,"mtime":1625325294871,"results":"160","hashOfConfig":"117"},{"size":2024,"mtime":1625325294871,"results":"161","hashOfConfig":"117"},{"size":5148,"mtime":1626244411181,"results":"162","hashOfConfig":"117"},{"size":1883,"mtime":1626244411188,"results":"163","hashOfConfig":"117"},{"size":1559,"mtime":1626244411204,"results":"164","hashOfConfig":"117"},{"size":742,"mtime":1626244411204,"results":"165","hashOfConfig":"117"},{"size":1399,"mtime":1626244411212,"results":"166","hashOfConfig":"117"},{"size":1803,"mtime":1626244411188,"results":"167","hashOfConfig":"117"},{"size":566,"mtime":1625325294974,"results":"168","hashOfConfig":"117"},{"size":575,"mtime":1625325294972,"results":"169","hashOfConfig":"117"},{"size":584,"mtime":1625325294977,"results":"170","hashOfConfig":"117"},{"size":1459,"mtime":1625325294951,"results":"171","hashOfConfig":"117"},{"size":1589,"mtime":1625325294952,"results":"172","hashOfConfig":"117"},{"size":1837,"mtime":1626244411165,"results":"173","hashOfConfig":"117"},{"size":2066,"mtime":1626244411188,"results":"174","hashOfConfig":"117"},{"size":271,"mtime":1626244411196,"results":"175","hashOfConfig":"117"},{"size":4728,"mtime":1626244411188,"results":"176","hashOfConfig":"117"},{"size":359,"mtime":1626244411196,"results":"177","hashOfConfig":"117"},{"size":8053,"mtime":1628396955675,"results":"178","hashOfConfig":"117"},{"size":2030,"mtime":1628396955673,"results":"179","hashOfConfig":"117"},{"size":656,"mtime":1625325294978,"results":"180","hashOfConfig":"117"},{"size":640,"mtime":1625325294972,"results":"181","hashOfConfig":"117"},{"size":31809,"mtime":1628396955676,"results":"182","hashOfConfig":"117"},{"size":1631,"mtime":1625325294906,"results":"183","hashOfConfig":"117"},{"size":314,"mtime":1625325294865,"results":"184","hashOfConfig":"117"},{"size":8575,"mtime":1627873987918,"results":"185","hashOfConfig":"117"},{"size":8664,"mtime":1626244411141,"results":"186","hashOfConfig":"117"},{"size":8112,"mtime":1626244411141,"results":"187","hashOfConfig":"117"},{"size":12686,"mtime":1626244411157,"results":"188","hashOfConfig":"117"},{"size":5263,"mtime":1627707354292,"results":"189","hashOfConfig":"117"},{"size":2516,"mtime":1626244411173,"results":"190","hashOfConfig":"117"},{"size":37047,"mtime":1628396955671,"results":"191","hashOfConfig":"117"},{"size":494,"mtime":1626244411173,"results":"192","hashOfConfig":"117"},{"size":2506,"mtime":1625325294939,"results":"193","hashOfConfig":"117"},{"size":4956,"mtime":1625325294845,"results":"194","hashOfConfig":"117"},{"size":1372,"mtime":1626244411173,"results":"195","hashOfConfig":"117"},{"size":790,"mtime":1626685275971,"results":"196","hashOfConfig":"117"},{"size":25730,"mtime":1628396955685,"results":"197","hashOfConfig":"117"},{"size":8280,"mtime":1628219326946,"results":"198","hashOfConfig":"117"},{"size":271,"mtime":1626244411149,"results":"199","hashOfConfig":"117"},{"size":268,"mtime":1626244411149,"results":"200","hashOfConfig":"117"},{"size":1545,"mtime":1628396955695,"results":"201","hashOfConfig":"117"},{"size":939,"mtime":1626685275963,"results":"202","hashOfConfig":"117"},{"size":32533,"mtime":1628396955692,"results":"203","hashOfConfig":"117"},{"size":40064,"mtime":1628398637132,"results":"204","hashOfConfig":"117"},{"size":17249,"mtime":1628396955689,"results":"205","hashOfConfig":"117"},{"size":9571,"mtime":1628396955684,"results":"206","hashOfConfig":"117"},{"size":2181,"mtime":1628396955674,"results":"207","hashOfConfig":"117"},{"size":5998,"mtime":1626837827909,"results":"208","hashOfConfig":"117"},{"size":1384,"mtime":1627686384201,"results":"209","hashOfConfig":"117"},{"size":270,"mtime":1626685275947,"results":"210","hashOfConfig":"117"},{"size":64166,"mtime":1628396955694,"results":"211","hashOfConfig":"117"},{"size":9665,"mtime":1628396955693,"results":"212","hashOfConfig":"117"},{"size":870,"mtime":1628219326957,"results":"213","hashOfConfig":"117"},{"size":64345,"mtime":1627989110162,"results":"214","hashOfConfig":"117"},{"size":19880,"mtime":1628396955687,"results":"215","hashOfConfig":"117"},{"size":273,"mtime":1627873987918,"results":"216","hashOfConfig":"117"},{"size":929,"mtime":1627686384218,"results":"217","hashOfConfig":"117"},{"size":3011,"mtime":1627686384201,"results":"218","hashOfConfig":"117"},{"size":391,"mtime":1627686384201,"results":"219","hashOfConfig":"117"},{"size":691,"mtime":1627686384201,"results":"220","hashOfConfig":"117"},{"size":28564,"mtime":1628396955688,"results":"221","hashOfConfig":"117"},{"size":1040,"mtime":1628396955682,"results":"222","hashOfConfig":"117"},{"size":272,"mtime":1628219326948,"results":"223","hashOfConfig":"117"},{"size":1767,"mtime":1628396955667,"results":"224","hashOfConfig":"117"},{"size":1843,"mtime":1628219326954,"results":"225","hashOfConfig":"117"},{"size":41271,"mtime":1628396955681,"results":"226","hashOfConfig":"117"},{"size":33363,"mtime":1628396955678,"results":"227","hashOfConfig":"117"},{"size":12474,"mtime":1628396955679,"results":"228","hashOfConfig":"117"},{"size":280,"mtime":1628396955668,"results":"229","hashOfConfig":"117"},{"size":394,"mtime":1628396955667,"results":"230","hashOfConfig":"117"},{"size":7997,"mtime":1628396955683,"results":"231","hashOfConfig":"117"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},"3mliq",{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"234"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"234"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"234"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"234"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"234"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"234"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"234"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"234"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"234"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"234"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"234"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"234"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"234"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"234"},{"filePath":"421","messages":"422","errorCount":2,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"423","messages":"424","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"234"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428","usedDeprecatedRules":"234"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"234"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"441"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"234"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"234"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"234"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"469","messages":"470","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"234"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"476","messages":"477","errorCount":1,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"234"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},"C:\\tagons\\src\\index.js",[],["487","488","489","490","491","492","493"],"C:\\tagons\\src\\AppRenderer.js",[],"C:\\tagons\\src\\constants\\defaultValues.js",[],"C:\\tagons\\src\\helpers\\Utils.js",[],"C:\\tagons\\src\\reportWebVitals.js",[],"C:\\tagons\\src\\App.js",[],"C:\\tagons\\src\\redux\\store.js",[],"C:\\tagons\\src\\helpers\\authHelper.js",[],"C:\\tagons\\src\\helpers\\Firebase.js",[],"C:\\tagons\\src\\views\\error.js",[],"C:\\tagons\\src\\views\\unauthorized.js",[],"C:\\tagons\\src\\redux\\reducers.js",[],"C:\\tagons\\src\\redux\\sagas.js",[],"C:\\tagons\\src\\lang\\index.js",[],"C:\\tagons\\src\\views\\user\\index.js",[],"C:\\tagons\\src\\views\\app\\index.js",[],"C:\\tagons\\src\\components\\common\\react-notifications\\index.js",[],"C:\\tagons\\src\\components\\common\\CustomBootstrap.js",[],"C:\\tagons\\src\\helpers\\IntlMessages.js",[],"C:\\tagons\\src\\redux\\settings\\reducer.js",[],"C:\\tagons\\src\\redux\\menu\\reducer.js",[],"C:\\tagons\\src\\redux\\auth\\reducer.js",[],"C:\\tagons\\src\\redux\\auth\\saga.js",[],"C:\\tagons\\src\\redux\\chat\\reducer.js",[],"C:\\tagons\\src\\redux\\todo\\reducer.js",[],"C:\\tagons\\src\\redux\\chat\\saga.js",[],"C:\\tagons\\src\\redux\\surveyList\\reducer.js",[],"C:\\tagons\\src\\redux\\todo\\saga.js",[],"C:\\tagons\\src\\redux\\surveyList\\saga.js",[],"C:\\tagons\\src\\redux\\industry\\reducer.js",[],"C:\\tagons\\src\\redux\\surveyDetail\\saga.js",[],"C:\\tagons\\src\\redux\\start\\reducer.js",[],"C:\\tagons\\src\\redux\\surveyDetail\\reducer.js",[],"C:\\tagons\\src\\views\\user\\register.js",[],"C:\\tagons\\src\\views\\user\\login.js",["494"],"import React, { useState, useEffect } from 'react';\r\n/* eslint no-unused-vars: 0 */\r\nimport { \r\n  Row, \r\n  Card, \r\n  CardTitle, \r\n  Label, \r\n  FormGroup, \r\n  Button, \r\n  CustomInput, \r\n  UncontrolledDropdown,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  DropdownMenu, } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { NotificationManager } from '../../components/common/react-notifications'; // eslint-disable-line no-unused-vars\r\n\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { login, UserInfo, logout } from '../../services/LoginService';\r\nimport { setCurrentUser } from '../../helpers/Utils';\r\n\r\nconst validatePassword = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your password';\r\n  } else if (value.length < 4) {\r\n    error = 'Value must be longer than 3 characters';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst Login = ({ history, loading, error, loginUserAction , logoutUserAction}) => {\r\n  const [loginBefore, setLoginBefore] = useState(UserInfo() !== null);\r\n  const [email] = useState('testuser');\r\n  const [password] = useState('1234');\r\n  const [rememberMe] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      NotificationManager.warning(error, 'Login Error', 3000, null, null, '');\r\n    }\r\n  }, [error]);\r\n\r\n  const onLoginView = () => {\r\n    setLoginBefore(false);\r\n  }\r\n\r\n  const onLogout = () => {\r\n    logout();\r\n  }\r\n\r\n  const onUserLogin = (values) => {\r\n    var requestData = {};\r\n    if (!loading) {\r\n      if (values.email !== '' && values.password !== '') {\r\n        requestData.UserId = values.email;\r\n        requestData.UserPassword = values.password;\r\n        axios.post(\"/login/Login\", requestData)\r\n        .then((response) => {\r\n          console.log('userLogin ->', response.data);\r\n          let errCode = response.data.ErrorCode;\r\n          let errMsg = response.data.Message;\r\n          if (errCode === \"OK\") {\r\n            // 로그인 성공\r\n            login(response.data.Userinfo, rememberMe);\r\n            setCurrentUser(response.data.Userinfo);\r\n            // TODO: Prime -> State 이동\r\n            history.push('/app/prime/prime');\r\n            console.log('CompanyName', UserInfo().CompanyName);\r\n          }\r\n          else {\r\n            // 로그인 실패\r\n            // alert(errMsg);\r\n            NotificationManager.error(errMsg, '로그인 실패', 3000, null, null, '');\r\n          }\r\n        })\r\n        .catch(function (error1) {\r\n            console.log(error1);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const initialValues = { email, password, rememberMe };\r\n\r\n  const handleLogout = () => {\r\n    // logoutUserAction(history);\r\n    console.log('handleLogout');\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <div className=\"user d-inline-block\">\r\n      <UncontrolledDropdown className=\"dropdown-menu-right\">\r\n        <DropdownToggle className=\"p-0\" color=\"empty\">\r\n          <span>\r\n            <img alt=\"Profile\" src=\"/assets/img/pic_default.png\" />\r\n          </span>\r\n        </DropdownToggle>\r\n        <DropdownMenu className=\"mt-2\" right>\r\n          <div className=\"name\">\r\n            <span>\r\n              <img alt=\"Profile\" src=\"/assets/img/pic_default.png\" />\r\n            </span>\r\n            <p>{UserInfo() !== null ? UserInfo().CompanyName : \"\"}</p>\r\n          </div>\r\n          <DropdownItem>MY PAGE</DropdownItem>\r\n          <DropdownItem onClick={() => onLoginView()}>LOGIN</DropdownItem>\r\n          <DropdownItem onClick={() => onLogout() }>LOGOUT</DropdownItem>\r\n        </DropdownMenu>\r\n      </UncontrolledDropdown>\r\n    </div>\r\n\r\n    <Row className={`h-100 login-area ${loginBefore && 'home-area'}`}>\r\n      <Colxx xxs=\"12\" md=\"12\" className=\"mx-auto my-auto\">\r\n        <Card className=\"\">\r\n          <div className=\"\">\r\n            <NavLink to=\"/\" className=\"home-logo white\">\r\n              <span className=\"logo-single\" />\r\n            </NavLink>\r\n\r\n            {loginBefore === true ?\r\n              <div className=\"quick-link\">\r\n                <NavLink to=\"/\" className=\"link1\">메뉴1</NavLink>\r\n                <NavLink to=\"/\" className=\"link2\">메뉴2</NavLink>\r\n                <NavLink to=\"/\" className=\"link3\">메뉴3</NavLink>\r\n                <NavLink to=\"/\" className=\"link4\">메뉴4</NavLink>\r\n                <NavLink to=\"/\" className=\"link5\">메뉴5</NavLink>\r\n              </div>\r\n            :\r\n            <Formik initialValues={initialValues} onSubmit={onUserLogin}>\r\n              {({ errors, touched }) => (\r\n                <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"email\"\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      validate={validatePassword}\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.password}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    {/* <NavLink to=\"/user/forgot-password\">\r\n                      <IntlMessages id=\"user.forgot-password-question\" />\r\n                    </NavLink> */}\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.login-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                  <CustomInput\r\n                    type=\"checkbox\"\r\n                    id=\"exCustomCheckbox\"\r\n                    label=\"Remember me\"\r\n                    name=\"rememberMe\"\r\n                    className=\"chk-remember\"\r\n                  />\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n            }\r\n\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  </>\r\n  );\r\n};\r\nexport default Login ;\r\n/* const mapStateToProps = ({ authUser }) => {\r\n  const { loading, error } = authUser;\r\n  return { loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  loginUserAction: loginUser,\r\n  logoutUserAction: logoutUser,\r\n})(Login); */","C:\\tagons\\src\\views\\user\\forgot-password.js",[],"C:\\tagons\\src\\views\\user\\reset-password.js",[],"C:\\tagons\\src\\lang\\entries\\en-US-rtl.js",[],"C:\\tagons\\src\\lang\\entries\\es-ES.js",[],"C:\\tagons\\src\\lang\\entries\\en-US.js",[],"C:\\tagons\\src\\layout\\UserLayout.js",[],"C:\\tagons\\src\\layout\\AppLayout.js",[],"C:\\tagons\\src\\components\\common\\react-notifications\\NotificationContainer.js",[],"C:\\tagons\\src\\components\\common\\react-notifications\\NotificationManager.js",[],"C:\\tagons\\src\\components\\common\\react-notifications\\Notifications.js",[],"C:\\tagons\\src\\redux\\actions.js",[],"C:\\tagons\\src\\redux\\auth\\actions.js",[],"C:\\tagons\\src\\redux\\surveyList\\actions.js",[],"C:\\tagons\\src\\redux\\surveyDetail\\actions.js",[],"C:\\tagons\\src\\redux\\todo\\actions.js",[],"C:\\tagons\\src\\redux\\chat\\actions.js",[],"C:\\tagons\\src\\views\\app\\gogo\\index.js",[],"C:\\tagons\\src\\views\\app\\about\\index.js",[],"C:\\tagons\\src\\views\\app\\second-menu\\index.js",[],"C:\\tagons\\src\\lang\\locales\\en_US.js",[],"C:\\tagons\\src\\lang\\locales\\es_ES.js",[],"C:\\tagons\\src\\components\\common\\react-notifications\\Notification.js",["495"],"// /* eslint-disable react-hooks/exhaustive-deps */\r\n// /* eslint-disable jsx-a11y/click-events-have-key-events */\r\n// /* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nconst Notification = ({\r\n  title,\r\n  type,\r\n  message,\r\n  customClassName,\r\n  timeOut,\r\n  onClick,\r\n  onRequestHide,\r\n}) => {\r\n  const requestHide = () => {\r\n    if (onRequestHide) {\r\n      onRequestHide();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let timer = null;\r\n    if (timeOut !== 0) {\r\n      timer = setTimeout(requestHide, timeOut);\r\n    }\r\n    return () => {\r\n      if (timer) {\r\n        clearTimeout(timer);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleClick = () => {\r\n    if (onClick) {\r\n      onClick();\r\n    }\r\n    requestHide();\r\n  };\r\n\r\n  const className = classnames([\r\n    'notification',\r\n    `notification-${type}`,\r\n    customClassName,\r\n  ]);\r\n  const titleHtml = title ? <h4 className=\"title\">{title}</h4> : null;\r\n  return (\r\n    <div className={className} onClick={() => handleClick()}>\r\n      <div className=\"notification-message\" role=\"alert\">\r\n        {titleHtml}\r\n        <div className=\"message\">{message}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nNotification.propTypes = {\r\n  type: PropTypes.oneOf([\r\n    'info',\r\n    'success',\r\n    'warning',\r\n    'error',\r\n    'primary',\r\n    'secondary',\r\n  ]),\r\n  title: PropTypes.node,\r\n  message: PropTypes.node,\r\n  timeOut: PropTypes.number,\r\n  onClick: PropTypes.func,\r\n  onRequestHide: PropTypes.func,\r\n  customClassName: PropTypes.string,\r\n};\r\n\r\nNotification.defaultProps = {\r\n  type: 'info',\r\n  title: null,\r\n  message: null,\r\n  timeOut: 5000,\r\n  onClick: () => {},\r\n  onRequestHide: () => {},\r\n  customClassName: '',\r\n};\r\n\r\nexport default Notification;\r\n","C:\\tagons\\src\\redux\\industry\\actions.js",[],"C:\\tagons\\src\\redux\\start\\actions.js",[],"C:\\tagons\\src\\redux\\menu\\actions.js",[],"C:\\tagons\\src\\redux\\settings\\actions.js",[],"C:\\tagons\\src\\containers\\navs\\Topnav.js",[],"C:\\tagons\\src\\containers\\navs\\Leftmenu.js",[],"C:\\tagons\\src\\views\\app\\second-menu\\second.js",[],"C:\\tagons\\src\\views\\app\\about\\about.js",[],"C:\\tagons\\src\\views\\app\\gogo\\start.js",["496","497","498","499","500","501","502","503"],"import React, { useState , useEffect} from 'react';\r\nimport { \r\n  Row, \r\n  Card, \r\n  CardBody, \r\n  Form, \r\n  FormGroup,\r\n  Nav,\r\n  NavItem,\r\n  TabContent,\r\n  TabPane,\r\n  Button,\r\n  Popover, \r\n  PopoverBody } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik, Field } from 'formik';\r\nimport { injectIntl } from 'react-intl';\r\nimport classnames from 'classnames';\r\nimport Select from 'react-select';\r\nimport DatePicker from 'react-datepicker';\r\nimport { ko } from \"date-fns/esm/locale\";\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport ShowRoom from '../../../containers/pages/ShowRoom';\r\nimport RelationImage from '../../../containers/pages/RelationImage';\r\nimport Bubble from '../../../components/charts/Bubble';\r\nimport Line from '../../../components/charts/Line';\r\nimport Bar from '../../../components/charts/Bar';\r\nimport Scatter from '../../../components/charts/ScatterDatetime';\r\nimport { ReactTableWithPaginationCard } from '../../../containers/ui/ReactTableCards';\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\nimport CustomSelectInput from '../../../components/common/CustomSelectInput';\r\nimport { getSearchCondition, getIndustryTotalcategoryList , getSearchType,\r\n         getIndustryPfactorGiRelatedwords,getGiBubble,getIndustryPfactorTrendandfactor} from '../../../redux/actions';\r\n\r\nconst Start = ({ intl }) => {\r\n  const dispatch = useDispatch();\r\n  const { industryApp } = useSelector(state => state.industryApp);\r\n  const store = useSelector(state => state.startApp);\r\n  const param1 = {};\r\n  const [startDateRange, setStartDateRange] = useState(new Date());\r\n  const [endDateRange, setEndDateRange] = useState(new Date());\r\n\r\n  const [selectedOptionsStep1, setSelectedOptionsStep1] = useState([]);// eslint-disable-line no-unused-vars\r\n  const [selectedOptionsStep2, setSelectedOptionsStep2] = useState([]);// eslint-disable-line no-unused-vars\r\n  const [selectedOptionsStep3, setSelectedOptionsStep3] = useState([]);// eslint-disable-line no-unused-vars\r\n\r\n  const [popoverOpenHelp1, setPopoverOpenHelp1] = useState(false);\r\n  const [popoverOpenHelp2, setPopoverOpenHelp2] = useState(false);\r\n  const [popoverOpenHelp3, setPopoverOpenHelp3] = useState(false);\r\n  const [popoverOpenHelp4, setPopoverOpenHelp4] = useState(false);\r\n  const [popoverOpenHelp5, setPopoverOpenHelp5] = useState(false);\r\n  const [popoverOpenHelp6, setPopoverOpenHelp6] = useState(false);\r\n \r\n  const [selectDataTypeStep1,setSelectDataTypeStep1] = useState([]); // eslint-disable-line no-unused-vars\r\n  const [selectDataTypeStep2,setSelectDataTypeStep2] = useState([]); // eslint-disable-line no-unused-vars\r\n  const [selectDataTypeStep3,setSelectDataTypeStep3] = useState([]); // eslint-disable-line no-unused-vars\r\n\r\n  const [selectCategoryUpper , setCategoryUpper] = useState([]);// eslint-disable-line no-unused-vars\r\n  const [selectName , setName] = useState('');// eslint-disable-line no-unused-vars\r\n  const [selectCategoryList, setCategoryList] = useState([]);// eslint-disable-line no-unused-vars\r\n\r\n  const [selectPretrendPercent, setPretrendPercent] = useState('0.0%');\r\n  const [showPreTrend, setShowPreTrend] = useState(false);\r\n\r\n  let categoryList = [];\r\n  let categoryList1 = [];\r\n  let categoryList2 = [];\r\n  const categoryList3 = [];\r\n\r\n  const { messages } = intl;\r\n  const [selectTableData, setTableData] = useState([]);\r\n  const [keyWordtext , setKeyWordtext] = useState('');\r\n  const [selectKeyword, setKeyword] = useState('');      \r\n  const [activeFirstTab, setActiveFirstTab] = useState('1');\r\n  const [activeSentiment, setActiveSentiment] = useState('1');\r\n  // api 호출시 로딩바 적용 테스트\r\n  const [loading, setLoading] = useState(false);\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [loaderror, setLoadError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    var date = new Date();\r\n    var date1 = new Date();\r\n    date.setDate(date.getDate() - 9);\r\n    setStartDateRange(date); //시작일 \r\n    \r\n    date1.setDate(date1.getDate() -2);\r\n    setEndDateRange(date1);// 종료일\r\n    setLoading(true);  \r\n    axios.post(\"/industry/GetIndustry_TotalCategory_List\")\r\n    .then((response) => {\r\n        categoryList = response.data;\r\n        setCategoryList(categoryList);\r\n        setCategory();\r\n        setLoading(false);\r\n    })\r\n    .catch(function (error) {\r\n        console.log(error);\r\n        setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n\r\n  const setCategory = () => {\r\n    let preKey = '';\r\n    \r\n    var c1value = {label: \"패션의류\", value: \"패션의류\"};\r\n    var c2value = {label: \"여성의류\", value: \"여성의류\"};\r\n    var c3value = {label: \"니트/스웨터\", value: \"니트/스웨터\"};\r\n    var tempcategoryList2 = [];\r\n    let categoryData = {};\r\n    categoryList1 = [];\r\n    categoryList.Data.forEach(function(item, index) {\r\n        if ( index === 0 ) {\r\n            categoryData = item;\r\n        }\r\n        if (preKey !== item.Category1 ){\r\n            preKey = item.Category1 ;\r\n            categoryList1.push({ label : preKey, value : preKey });\r\n        }\r\n    });\r\n    setSelectDataTypeStep1(categoryList1);\r\n    //setSelectDataTypeStep1(\"패션의류\");\r\n    setSelectedOptionsStep1(c1value);\r\n    preKey = '-1';\r\n    setSelectedOptionsStep2([]); \r\n    setSelectedOptionsStep3([]);\r\n    categoryList.Data.forEach(function(item,index){ // eslint-disable-line no-unused-vars\r\n        if (c1value.value === item.Category1 && preKey !== item.Category2 ){\r\n            preKey = item.Category2 ;\r\n            tempcategoryList2.push({label:preKey,value:preKey});\r\n        }\r\n    });\r\n    setSelectDataTypeStep2(tempcategoryList2);\r\n    setSelectedOptionsStep2(c2value); \r\n\r\n    setSelectedOptionsStep3([]);\r\n    tempcategoryList2 = [];\r\n    preKey = '-1';\r\n\r\n    categoryList.Data.forEach(function(item,index){ // eslint-disable-line no-unused-vars\r\n        if (c1value.value === item.Category1 && c2value.value === item.Category2 && preKey !== item.Category3 ){\r\n            preKey = item.Category3 ; \r\n            tempcategoryList2.push({label:preKey,value:preKey});\r\n        }\r\n    });\r\n    setSelectDataTypeStep3(tempcategoryList2);\r\n    setSelectedOptionsStep3(c3value);\r\n  }\r\n  \r\n  const category1Change = value =>{\r\n    setSelectedOptionsStep1(value);\r\n    setSelectedOptionsStep2([]); \r\n    setSelectedOptionsStep3([]);\r\n  \r\n    let preKey = '-1';\r\n    categoryList1 = [];\r\n    selectCategoryList.Data.forEach(function(item,index){ // eslint-disable-line no-unused-vars\r\n        if (value.value === item.Category1 && preKey !== item.Category2 ){\r\n            preKey = item.Category2 ;\r\n            categoryList1.push({label:preKey,value:preKey});\r\n        }\r\n    });\r\n    setSelectDataTypeStep2(categoryList1);\r\n  }\r\n  const category2Change = value =>{\r\n    setSelectedOptionsStep2(value); \r\n    setSelectedOptionsStep3([]);\r\n    let preKey = '-1';\r\n    categoryList2 = []; \r\n    selectCategoryList.Data.forEach(function(item,index){ // eslint-disable-line no-unused-vars\r\n        if (selectedOptionsStep1.value === item.Category1 && value.value === item.Category2 && preKey !== item.Category3 ){\r\n            preKey = item.Category3 ;\r\n            categoryList2.push({label:preKey,value:preKey});\r\n        }\r\n    });\r\n    setSelectDataTypeStep3(categoryList2);\r\n  }\r\n  //datePicker format 수정\r\n  const dateString = (dateValue) => {\r\n    let retStr = '';\r\n    //Year\r\n    retStr = retStr.concat(dateValue.getFullYear());\r\n    //Month\r\n    if(dateValue.getMonth() < 10) {\r\n        retStr = retStr.concat('-0', dateValue.getMonth() + 1);\r\n    }\r\n    else {\r\n        retStr = retStr.concat('-', dateValue.getMonth() + 1);\r\n    }\r\n    //Date\r\n    if(dateValue.getDate() < 10) {\r\n        retStr = retStr.concat('-0', dateValue.getDate());\r\n    }\r\n    else {\r\n        retStr = retStr.concat('-', dateValue.getDate());\r\n    }\r\n    return retStr;\r\n  }\r\n  //\r\n  const preTrendClick = () => {\r\n    console.log('preTrendClick',showPreTrend);\r\n    if (showPreTrend){\r\n      setShowPreTrend(false) ;\r\n    }\r\n    else{\r\n      setShowPreTrend(true) ;\r\n    }\r\n  }\r\n  //검색조건 엔터버튼 클릭\r\n  const handleSearchClick = (e) => {\r\n    var param = {};\r\n    var searchType = {};\r\n    param.FromDate = dateString(startDateRange);\r\n    param.ToDate = dateString(endDateRange);\r\n    param.Category1 = selectedOptionsStep1.value;\r\n    param.Category2 = selectedOptionsStep2.value;\r\n    param.Category3 = selectedOptionsStep3.value;\r\n    param.Keyword = keyWordtext;\r\n    param.Category_upper = '';\r\n    param.Name = '';\r\n    param.activeFirstTab = activeFirstTab;\r\n\r\n    searchType.ShowRoom = true;\r\n    searchType.TrendQuad  = true;\r\n    searchType.PostTrend  = false;\r\n    searchType.FactorNBrand  = false;\r\n    searchType.GiAnalysis  = true;\r\n    searchType.GiAnalysisBubble  = true;\r\n    searchType.RelationWord = false;\r\n    setShowPreTrend(false);\r\n    // 검색조건 스토어에 저장\r\n    dispatch(getSearchType(searchType)); // 검색 조건 추가\r\n    dispatch(getSearchCondition(param));\r\n  }\r\n  const chageShowTrend = (showVal) =>{\r\n    setShowPreTrend(showVal) ;\r\n  }\r\n  //검색조건 엔터버튼 클릭\r\n  const searchActivrClick = () => {\r\n    var param = {};\r\n    var searchType = {};\r\n    param.FromDate = dateString(startDateRange);\r\n    param.ToDate = dateString(endDateRange);\r\n    param.Category1 = selectedOptionsStep1.value;\r\n    param.Category2 = selectedOptionsStep2.value;\r\n    param.Category3 = selectedOptionsStep3.value;\r\n    param.Keyword = keyWordtext;\r\n    param.Category_upper = '';\r\n    param.Name = '';\r\n    param.activeFirstTab = activeFirstTab;\r\n\r\n    searchType.ShowRoom = false;\r\n    searchType.TrendQuad  = true;\r\n    searchType.PostTrend  = false;\r\n    searchType.FactorNBrand  = false;\r\n    searchType.GiAnalysis  = true;\r\n    searchType.GiAnalysisBubble  = true;\r\n    searchType.RelationWord = false;\r\n    // 검색조건 스토어에 저장\r\n    setShowPreTrend(false);\r\n    dispatch(getIndustryPfactorTrendandfactor(null));\r\n    dispatch(getIndustryPfactorGiRelatedwords(null));\r\n    dispatch(getGiBubble(null));\r\n    dispatch(getSearchType(searchType)); // 검색 조건 추가\r\n    dispatch(getSearchCondition(param));\r\n  }\r\n  const validateKeyword = (value) => {\r\n    let error;\r\n    if (!keyWordtext) {\r\n      error = 'No Keywords';\r\n    }\r\n    return error;\r\n  };\r\n  const onKeywordChange = (e) =>{\r\n    setKeyWordtext(e.target.value);\r\n  };\r\n  useEffect(() => {\r\n    searchActivrClick();\r\n  }, [activeFirstTab]);  \r\n  if (loading) return <div className=\"loading\" />;\r\n  if (loaderror) return <div>에러가 발생했습니다</div>;\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <Card>\r\n            <CardBody>\r\n              { /* s: 검색 조건 일단 여기 */ }\r\n              <Form className=\"select-box-wrap multi\">\r\n              <div className=\"tbl-vertical-heading\">\r\n                <table>\r\n                  <tbody>\r\n                    <tr>\r\n                      {/* vertical유형의 테이블 th 값은 인라인 스타일로 지정 바랍니다. */}\r\n                      <th style={{ width:'15%' }}>Period</th>\r\n                      <td style={{ width:'85%' }} colSpan=\"3\">\r\n                        <div className=\"date-picker-wrap\">\r\n                          <DatePicker\r\n                            locale={ko}\r\n                            dateFormat=\"yyyy.MM.dd\"\r\n                            selected={startDateRange}\r\n                            selectsStart\r\n                            startDate={startDateRange}\r\n                            endDate={endDateRange}\r\n                            onChange={setStartDateRange}\r\n                            placeholderText={messages['form-components.start']}\r\n                          />\r\n                          <span className=\"cal-range\"> ~ </span>\r\n                          <DatePicker\r\n                            locale={ko}\r\n                            dateFormat=\"yyyy.MM.dd\"\r\n                            selected={endDateRange}\r\n                            selectsEnd\r\n                            startDate={startDateRange}\r\n                            endDate={endDateRange}\r\n                            onChange={setEndDateRange}\r\n                            placeholderText={messages['form-components.end']}\r\n                          />\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th style={{ width:'15%' }}>Product(上) Category</th>\r\n                      <td style={{ width:'35%' }}>\r\n                        <FormGroup className=\"select-box\">\r\n                          <Select\r\n                            components={{ Input: CustomSelectInput }}\r\n                            className=\"react-select\"\r\n                            classNamePrefix=\"react-select\"\r\n                            name=\"form-field-name\"\r\n                            value={selectedOptionsStep1 }\r\n                            onChange={category1Change}\r\n                            options={selectDataTypeStep1}\r\n                          />\r\n                        </FormGroup>\r\n                        <FormGroup className=\"select-box\">\r\n                          <Select\r\n                            components={{ Input: CustomSelectInput }}\r\n                            className=\"react-select\"\r\n                            classNamePrefix=\"react-select\"\r\n                            name=\"form-field-name\"\r\n                            value={selectedOptionsStep2}\r\n                            onChange={category2Change}\r\n                            options={selectDataTypeStep2}\r\n                          />\r\n                        </FormGroup>\r\n                        <FormGroup className=\"select-box\">\r\n                          <Select\r\n                            components={{ Input: CustomSelectInput }}\r\n                            className=\"react-select\"\r\n                            classNamePrefix=\"react-select\"\r\n                            name=\"form-field-name\"\r\n                            value={selectedOptionsStep3}\r\n                            onChange={(val) => setSelectedOptionsStep3(val)}\r\n                            options={selectDataTypeStep3}\r\n                          />\r\n                        </FormGroup>\r\n                      </td>\r\n                      <th style={{ width:'15%' }}>Product(下) Category</th>\r\n                      <td style={{ width:'35%' }}>\r\n                      <Formik\r\n                        initialValues={{\r\n                          keyword: '',\r\n                        }}\r\n                         //onSubmit={onSubmit}\r\n                      >\r\n                      {({ errors, touched }) => (\r\n                        <FormGroup className=\"keyword-area\">\r\n                          <Field\r\n                            className=\"form-control\"\r\n                            name=\"keyword\"\r\n                            validate={validateKeyword}\r\n                            value={keyWordtext}\r\n                            onChange={onKeywordChange}\r\n                          />\r\n                          {errors.keyword && touched.keyword && (\r\n                            <div className=\"d-block noti-text\">\r\n                              {errors.keyword}\r\n                            </div>\r\n                          )}\r\n                        </FormGroup>\r\n                      )}\r\n                      </Formik>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n\r\n              <div className=\"text-center\">\r\n                <Button className=\"btn-xl mt-4\" color=\"gray\" onClick={handleSearchClick} >\r\n                  ENTER\r\n                </Button>\r\n              </div>\r\n              </Form>\r\n              { /* e: 검색 조건 일단 여기 */ }\r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n      </Row>\r\n      {/* s:showwoom */}\r\n      <Row className=\"mt-5\">\r\n        <Colxx xxs=\"12\">\r\n          <Card>\r\n            <CardBody>\r\n              <div className=\"box-title\">\r\n                <h2>Showroom</h2>\r\n                <button type=\"button\" className=\"help\" id=\"popover_1\" onClick={() => setPopoverOpenHelp1(true)} onKeyDown={() => setPopoverOpenHelp1(true)}><img src=\"/assets/img/icon/icon_help.png\" alt=\"도움말\" /></button>\r\n                <Popover \r\n                  placement=\"right\"\r\n                  isOpen={popoverOpenHelp1}\r\n                  target=\"popover_1\"\r\n                  toggle={() => setPopoverOpenHelp1(!popoverOpenHelp1)}\r\n                  trigger=\"legacy\"\r\n                >\r\n                  <PopoverBody>조회한 상품(키워드)와 관련한 상위 top14개 상품 이미지</PopoverBody>\r\n                </Popover>\r\n              </div>\r\n              {/* 이미지 갤러리 */}\r\n              <div className=\"showroom-gallery\">\r\n                {/* 이미지 갤러리 */}\r\n                {/* <ShowRoom  ref={showRoonGetData} /> */}\r\n                <ShowRoom name=\"Showroom\"/>\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n      </Row>\r\n      {/* e:showwoom */}\r\n      {/* s:tab menu */}\r\n      <Row className=\"mt-5\">\r\n        <Colxx xxs=\"12\">\r\n          {/* s: 탭메뉴 */}\r\n          <Nav tabs className=\"card-header-tabs \">\r\n            <NavItem>\r\n              <NavLink\r\n                to=\"#\"\r\n                location={{}}\r\n                className={classnames({\r\n                  active: activeFirstTab === '1',\r\n                  'nav-link': true,\r\n                })}\r\n                onClick={() => {\r\n                  setActiveFirstTab('1');\r\n                }}\r\n              >\r\n                P-Factor Analysis\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                to=\"#\"\r\n                location={{}}\r\n                className={classnames({\r\n                  active: activeFirstTab === '2',\r\n                  'nav-link': true,\r\n                })}\r\n                onClick={() => {\r\n                  setActiveFirstTab('2');\r\n                }}\r\n              >\r\n                E-Factor Analysis\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n          {/* e: 탭메뉴 */}\r\n        </Colxx>\r\n      </Row>\r\n      {/* e:tab menu */}\r\n      \r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <Card className=\"bor-top-radius0\">\r\n            <CardBody>\r\n              {/* s:trend-quad */}\r\n              <div className=\"box-title\">\r\n                <h2>Trend-Quad</h2>\r\n                <button type=\"button\" className=\"help\" id=\"popover_2\" onClick={() => setPopoverOpenHelp2(true)} onKeyDown={() => setPopoverOpenHelp2(true)}><img src=\"/assets/img/icon/icon_help.png\" alt=\"도움말\" /></button>\r\n                <Popover \r\n                  placement=\"right\"\r\n                  isOpen={popoverOpenHelp2}\r\n                  target=\"popover_2\"\r\n                  toggle={() => setPopoverOpenHelp2(!popoverOpenHelp2)}\r\n                  trigger=\"legacy\"\r\n                >\r\n                  <PopoverBody>\r\n                    <div>(가로축) P/R Index는 상품수와 리뷰수의 합을 계산한 것으로, <span className=\"f-blue\">상품수와 리뷰수가 많을수록 우측에 위치함</span></div>\r\n                    <div>(세로축) Rise/Fall 은 요소의 랭킹 변화를 나타내는 지표로써, 네이버 쇼핑 Best100에서 <br />(P-Factor인 경우) <span className=\"f-blue\">상품의 랭킹이 높아질수록 위쪽에 위치함</span><br/>(E-Factor인 경우) <span className=\"f-blue\">요소의중요도가 높아질수록 위쪽에 위치함</span></div>\r\n                    <img src=\"/assets/img/icon/help.png\" alt=\"도움말 이미지\" />\r\n                    <div className=\"f-red\">포인트 클릭시, 우측 그래프가 활성화됩니다.</div>\r\n                  </PopoverBody>\r\n                </Popover>\r\n              </div>\r\n              <div className=\"clearfix box-line\">\r\n                <div className=\"box left\">\r\n                  <p className=\"desc\">- 키워드(dot) 클릭시, 우측 그래프가 활성화됩니다.</p>\r\n                  {/* 각 차트별 height 값은 props로 전달 차트 */}\r\n                  {/* <Bubble height={550} /> */}\r\n                  <Scatter height={600} name=\"TrendQuadScatter\" chageShowTrend={chageShowTrend} activeFirstTab={activeFirstTab} className=\"scatter-chart\"/>\r\n                </div>\r\n                <div className=\"box right\">\r\n                  <p className=\"desc\">- Pre-Trend 클릭 시, 예측트렌드가 노출됩니다.</p>\r\n                  <div className=\"chart-area\">\r\n                    <div className=\"chart-header\">\r\n                      <div className=\"chart-title\">\r\n                        <h4>Post-Trend</h4>\r\n                        <button type=\"button\" className=\"help\" id=\"popover_3\" onClick={() => setPopoverOpenHelp3(true)} onKeyDown={() => setPopoverOpenHelp3(true)}><img src=\"/assets/img/icon/icon_help_small.png\" alt=\"도움말\" /></button>\r\n                        <Popover\r\n                          style={{ maxWidth: '600px' }}\r\n                          placement=\"right\"\r\n                          isOpen={popoverOpenHelp3}\r\n                          target=\"popover_3\"\r\n                          toggle={() => setPopoverOpenHelp3(!popoverOpenHelp3)}\r\n                          trigger=\"legacy\"\r\n                        >\r\n                          <PopoverBody>\r\n                            좌측 포지셔닝 맵에서 선택한 요소에 대하여 트렌드의 흐름을 보여줌 <br/>\r\n                            재생버튼 클릭시, 앞으로의 <span className=\"f-blue\">미래 트렌드를 예측</span>하여 나타내며, 우측 상단으로 뻗어가는 그래프일수록 잠재 트렌드 요소인 것으로 판단됨.<br/>\r\n                            Pre-Trend 퍼센트가 높을수록 향후 트렌드에 있어 변동이 큰 요소라고 볼 수 있음.\r\n                          </PopoverBody>\r\n                        </Popover>\r\n                      </div>\r\n                      <span className=\"mean\" style={{ left: '70.0%' }} onClick={preTrendClick} aria-hidden=\"true\">Pre-Trend <span className=\"number\">{selectPretrendPercent}</span></span>\r\n                      {/* 전체 100% 기준으로 number 값의 나머지 값을 style 값에 인라인으로 대입바랍니다.  */}\r\n                    </div>\r\n                    {/* 각 차트별 height 값은 props로 전달 */}\r\n                    <Line setPercent={setPretrendPercent} showPreTrend={showPreTrend} height={210} name=\"PostTrendLine\" activeFirstTab={activeFirstTab} className=\"linetrend-chart\"/>\r\n                  </div>\r\n                  <div className=\"chart-area mb-0\">\r\n                    <div className=\"chart-header\">\r\n                        {/* s: Sentiment Factor 탭 */}\r\n                        <Nav tabs className=\"card-header-tabs chart-tab\">\r\n                          <NavItem>\r\n                          {activeFirstTab === '1'?\r\n                            <NavLink\r\n                              to=\"#\"\r\n                              location={{}}\r\n                              className={classnames({\r\n                                active: activeSentiment === '1',\r\n                                'nav-link': true,\r\n                              })}\r\n                              onClick={() => {\r\n                                setActiveSentiment('1');\r\n                              }}\r\n                            >\r\n                              Sentiment Factor\r\n                            </NavLink>\r\n                            :\r\n                            <NavLink\r\n                              to=\"#\"\r\n                              location={{}}\r\n                              className={classnames({\r\n                                active: activeSentiment === '1',\r\n                                'nav-link': true,\r\n                              })}\r\n                              onClick={() => {\r\n                                setActiveSentiment('1');\r\n                              }}\r\n                            >\r\n                              Product Factor\r\n                            </NavLink>\r\n                          }\r\n                          </NavItem>\r\n                          <NavItem>\r\n                            <NavLink\r\n                              to=\"#\"\r\n                              location={{}}\r\n                              className={classnames({\r\n                                active: activeSentiment === '2',\r\n                                'nav-link': true,\r\n                              })}\r\n                              onClick={() => {\r\n                                setActiveSentiment('2');\r\n                              }}\r\n                            >\r\n                              Brand\r\n                            </NavLink>\r\n                          </NavItem>\r\n                          <NavItem>\r\n                            <button type=\"button\" className=\"help\" id=\"popover_4\" onClick={() => setPopoverOpenHelp4(true)} onKeyDown={() => setPopoverOpenHelp4(true)}><img src=\"/assets/img/icon/icon_help_small.png\" alt=\"도움말\" /></button>\r\n                            <Popover \r\n                              style={{ maxWidth: '600px' }}\r\n                              placement=\"right\"\r\n                              isOpen={popoverOpenHelp4}\r\n                              target=\"popover_4\"\r\n                              toggle={() => setPopoverOpenHelp4(!popoverOpenHelp4)}\r\n                              trigger=\"legacy\"\r\n                            >\r\n                              <PopoverBody>\r\n                                (Sentiment Factor) <br/>\r\n                                - 좌측 포지셔닝 맵에서 선택한 요소에 대하여 소비자가 느낀 이미지 상위 10개<br/>\r\n                                - 빨간색: 소비자가 가장 많이 연상하는 이미지 / 파란색: 소비자가 10번째로 연상하는 이미지 <br/>\r\n                                (Brand) <br/>\r\n                                - 좌측 포지셔닝 맵에서 선택한 요소가 가장 많이 언급되는 브랜드 상위 10개 <br/>\r\n                                - 빨간색: 해당 요소가 가장 많이 언급된 브랜드 / 파란색: 해당요소가 10번째로 언급된 브랜드 \r\n                              </PopoverBody>\r\n                            </Popover>\r\n                          </NavItem>\r\n                        </Nav>\r\n                        {/* e: Sentiment Factor 탭 */}\r\n                        {/* <h4>Sentiment Factor | <span>Brand</span></h4> */}\r\n                    </div>\r\n                    {/* 각 차트별 height 값은 props로 전달 */}\r\n                    <Bar height={210} name=\"TrendQuadBar\" activeFirstTab={activeFirstTab} activeTab={activeSentiment}/>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* e:trend-quad */}\r\n\r\n              {/* s:grobal index analysis */}\r\n              <div className=\"box-title mt-5\">\r\n                <h2>GI(Global Index) Analysis</h2>\r\n                <button type=\"button\" className=\"help\" id=\"popover_5\" onClick={() => setPopoverOpenHelp5(true)} onKeyDown={() => setPopoverOpenHelp5(true)}><img src=\"/assets/img/icon/icon_help.png\" alt=\"도움말\" /></button>\r\n                <Popover\r\n                  style={{ maxWidth: '700px' }}\r\n                  placement=\"right\"\r\n                  isOpen={popoverOpenHelp5}\r\n                  target=\"popover_5\"\r\n                  toggle={() => setPopoverOpenHelp5(!popoverOpenHelp5)}\r\n                  trigger=\"legacy\"\r\n                >\r\n                  <PopoverBody>\r\n                    <div>\r\n                      Global Index는 온라인 소비자 글과 패션 주요 속성 간의 연관성을 측정하여 나타내는 지표이며, 구매요인, 만족요인, 불만족요인에 따라 GI값을 보기위해 PGI(Purchase GI), SGI(Satisfaction GI), DGI(Dis-satisfaction GI) 지표를 생성함.\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"f-blue\">(Purchase Factor)</span> 상품의 잠재적 구매 요인 랭킹을 보여주며, PGI를 구성하는 요인 <br/>\r\n                      - 랭킹이 높을수록, 조회한 상품을 구매할 때 많이 고려하는 요소임\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"f-blue\">(Satisfaction Factor)</span> 상품의 만족요인 랭킹을 보여주며, SGI를 구성하는 요인 <br/>\r\n                      - 랭킹이 높을수록, 상품 구매 후 만족도가 높게 나타나는 요소임\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"f-blue\">(Dis-satisfaction Factor)</span> 상품의 불만족 요인 랭킹을 보여주며, DGI를 구성하는 요인<br/>\r\n                      - 랭킹이 높을수록, 상품 구매 후 불만족도가 높게 나타나는 요소임\r\n                    </div>\r\n                  </PopoverBody>\r\n                </Popover>\r\n              </div>\r\n              \r\n              <div className=\"table-sort-area\">\r\n                <div className=\"clearfix box-line\">\r\n                  <div className=\"box left\">\r\n                    <ReactTableWithPaginationCard  activeFirstTab={activeFirstTab}/>\r\n                  </div>\r\n                  <div className=\"box right relation-img\">\r\n                  {/* <button type=\"button\" className=\"help\" id=\"popover_6\" onClick={() => setPopoverOpenHelp6(true)} onKeyDown={() => setPopoverOpenHelp6(true)}><img src=\"/assets/img/icon/icon_help_small.png\" alt=\"도움말\" /></button>\r\n                  <Popover\r\n                    className=\"pop-left\"\r\n                    style={{ maxWidth: '700px'}}\r\n                    placement=\"left\"\r\n                    isOpen={popoverOpenHelp6}\r\n                    target=\"popover_6\"\r\n                    toggle={() => setPopoverOpenHelp6(!popoverOpenHelp6)}\r\n                    trigger=\"legacy\"\r\n                  >\r\n                    <PopoverBody className=\"help-popup-body\">\r\n                      <div>\r\n                        (가로축) DGI, 불만족을 나타내는 정도 <br/>\r\n                        (세로축) SGI, 만족을 나타내는 정도 <br/>\r\n                        (버블크기) PGI, 잠재 구매욕구를 나타내는 정도\r\n                      </div>     \r\n                      <img src=\"/assets/img/icon/help2.png\" alt=\"도움말 이미지\" />\r\n                      <p className=\"f-red\">버블 클릭시, 그래프 아래에 연관된 이미지가 활성화됩니다.</p>\r\n                    </PopoverBody>\r\n                  </Popover> */}\r\n                    <Bubble height={470} className=\"relation-bubble\" name=\"GiBubble\" activeFirstTab={activeFirstTab}/>\r\n                    <p className=\"desc text-right\">- 위 버블 클릭 시, 연관 이미지 노출됩니다.</p>\r\n                  </div>\r\n                </div>\r\n                {/* s: 연관 이미지 영역 */}\r\n                <div className=\"showroom-gallery relation-gallery\" style={{overflow: 'hidden'}}>\r\n                   <RelationImage activeTab={activeSentiment}/> \r\n                </div>\r\n                {/* e: 연관 이미지 영역 */}\r\n                \r\n              </div>\r\n              {/* e:grobal index analysis */}\r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n      </Row>\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default injectIntl(Start);\r\n\r\n// const mapStateToProps = ({ authUser }) => {\r\n//   const { loading, error } = authUser;\r\n\r\n//   return { loading, error };\r\n// }\r\n\r\n// export default connect(mapStateToProps, {\r\n//     loginUserAction : loginUser,\r\n// })(Start);","C:\\tagons\\src\\containers\\navs\\Breadcrumb.js",[],"C:\\tagons\\src\\components\\common\\CustomSelectInput.js",[],"C:\\tagons\\src\\containers\\ui\\ReactTableCards.js",["504","505","506"],"/* eslint-disable no-nested-ternary */\r\n/* eslint-disable react/jsx-key */\r\n/* eslint-disable react/no-array-index-key */\r\n/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable react/display-name */\r\n/* eslint no-undef: \"off\" */\r\n/* eslint no-unused-vars: \"off\" */\r\n/* eslint-disable react/no-this-in-sfc */\r\n/* eslint no-else-return: \"off\" */\r\nimport React ,{useState ,useEffect} from 'react';\r\nimport { Card, CardBody, CardTitle } from 'reactstrap';\r\nimport { useTable, usePagination, useSortBy } from 'react-table';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport classnames from 'classnames';\r\nimport axios from 'axios';\r\nimport { getGiBubble } from '../../redux/actions';\r\n\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport DatatablePagination from '../../components/DatatablePagination';\r\n\r\n//import products from '../../data/products';\r\n\r\nfunction Table({ columns, data, divided = false, defaultPageSize = 6 }) {\r\n  \r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    prepareRow,\r\n    headerGroups,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageCount,\r\n    gotoPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: { pageIndex: 0, pageSize: defaultPageSize },\r\n    },\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <table\r\n        {...getTableProps()}\r\n        className={`r-table table ${classnames({ 'table-divided': divided })}`}\r\n      >\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column, columnIndex) => (\r\n                <th\r\n                  key={`th_${columnIndex}`}\r\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                  title='클릭시 정렬'\r\n                  className={\r\n                    column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? 'text-center sorted-desc'\r\n                        : 'text-center sorted-asc'\r\n                      : ' text-center'\r\n                  }\r\n                >\r\n                  {column.render('Header')}\r\n                  <span />\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()} onClick={() => console.log(row.original)}>\r\n                {row.cells.map((cell, cellIndex) => (\r\n                  <td\r\n                    key={`td_${cellIndex}`}\r\n                    {...cell.getCellProps({\r\n                      className: cell.column.cellClass,\r\n                    })}\r\n                  >\r\n                    {cell.render('Cell')}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n\r\n      <DatatablePagination\r\n        page={pageIndex}\r\n        pages={pageCount}\r\n        canPrevious={canPreviousPage}\r\n        canNext={canNextPage}\r\n        pageSizeOptions={[4, 10, 20, 30, 40, 50]}\r\n        showPageSizeOptions={false}\r\n        showPageJump={false}\r\n        defaultPageSize={pageSize}\r\n        onPageChange={(p) => gotoPage(p)}\r\n        onPageSizeChange={(s) => setPageSize(s)}\r\n        paginationMaxSize={pageCount}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const ReactTableWithPaginationCard = () => {\r\n  const cols = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Rank',\r\n        accessor: 'Rank',\r\n        cellClass: 'list-item-heading text-center',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n      {\r\n        Header: 'Purchase Factor',\r\n        accessor: 'PurchaseFactor',\r\n        cellClass: 'list-item-heading text-muted text-center',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n      {\r\n        Header: 'Satisfaction Factor',\r\n        accessor: 'SatisfactionFactor',\r\n        cellClass: 'list-item-heading text-muted text-center',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n      {\r\n        Header: 'Dis-satisfaction Factor',\r\n        accessor: 'DisSatisfactionFactor',\r\n        cellClass: 'list-item-heading text-muted text-center',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n    ],\r\n    []\r\n  );\r\n  const dispatch = useDispatch();\r\n  const store = useSelector(state => state.startApp);\r\n  const store2 = useSelector(state => state.industryApp);\r\n\r\n  const [products , setProducts] = useState([]);\r\n  // api 호출시 로딩바 적용 테스트\r\n  const [loading, setLoading] = useState(false);\r\n  const [loaderror, setLoadError] = useState(null);\r\n\r\n  const callGIApi = async (paramValue,callUrl) =>{ \r\n    setLoading(true);\r\n    await axios.post(callUrl,paramValue)\r\n      .then(function (response) { \r\n        setProducts(response.data.TableData); //getGiBubble\r\n        dispatch(getGiBubble(response.data));\r\n        setLoading(false);\r\n      })\r\n      .catch(function (error) {\r\n        setLoading(false);\r\n        console.log(error);\r\n      });\r\n  };\r\n  const replaceAll = (str,p1,p2) => {\r\n    return str.split(p1).join(p2);\r\n  }\r\n  useEffect(() => {\r\n    var param1 = {};\r\n    var callUrl = \"\";\r\n    if (!(store.SearchCondition.Category1 === \"\" || store.SearchCondition.Category1 === null || store.SearchCondition.Category1 === undefined)){\r\n        param1.FromDate = replaceAll(store.SearchCondition.FromDate,\"-\",\"\");\r\n        param1.ToDate = replaceAll(store.SearchCondition.ToDate,\"-\",\"\");\r\n        param1.Category1 = store.SearchCondition.Category1;\r\n        param1.Category2 = store.SearchCondition.Category2;\r\n        param1.Category3 = store.SearchCondition.Category3;\r\n        param1.Keyword = store.SearchCondition.Keyword;\r\n        if (store.SearchCondition.activeFirstTab === \"1\") {\r\n          callUrl = \"/industry/GetIndustry_PFactor_GI\";\r\n        }\r\n        else{\r\n          callUrl = \"/industry/GetIndustry_EFactor_GI\";\r\n        }\r\n        dispatch(getGiBubble(null));\r\n        callGIApi(param1,callUrl);\r\n      }\r\n    \r\n  },[store.SearchCondition]);\r\n\r\n  if (loading) return <div className=\"loading\" />;\r\n  if (loaderror) return <div>에러가 발생했습니다</div>;\r\n\r\n  return (\r\n    <Card className=\"mb-4\">\r\n      <CardBody>\r\n        {/* <CardTitle>\r\n          <IntlMessages id=\"table.react-pagination\" />\r\n        </CardTitle> */}\r\n        <Table columns={cols} data={products} />\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const ReactTableDivided = () => {\r\n  const cols = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Name',\r\n        accessor: 'title',\r\n        cellClass: 'list-item-heading w-40',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n      {\r\n        Header: 'Sales',\r\n        accessor: 'sales',\r\n        cellClass: 'text-muted  w-10',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n      {\r\n        Header: 'Stock',\r\n        accessor: 'stock',\r\n        cellClass: 'text-muted  w-10',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n      {\r\n        Header: 'Category',\r\n        accessor: 'category',\r\n        cellClass: 'text-muted  w-40',\r\n        Cell: (props) => <>{props.value}</>,\r\n      },\r\n    ],\r\n    []\r\n  );\r\n  const [products , setProducts] = useState([]);\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <CardTitle>\r\n        <IntlMessages id=\"table.divided\" />\r\n      </CardTitle>\r\n      <Table columns={cols} data={products} divided />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ReactTable = ({columns,data,defaultPageSize = 8}) => {\r\n\r\n  const rowStyles = [\r\n    {\r\n      when: row => row.toggleSelected,\r\n      style: {\r\n        backgroundColor: \"green\",\r\n        userSelect: \"none\"\r\n      }\r\n    }\r\n  ];\r\n\r\n  const handleRowClicked = row => {\r\n    const updatedData = data.map(item => {\r\n      if (row.id !== item.id) {\r\n        return item;\r\n      }\r\n\r\n      return {\r\n        ...item,\r\n        toggleSelected: !item.toggleSelected\r\n      };\r\n    });\r\n\r\n    setData(updatedData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <Table \r\n        columns={columns} \r\n        data={data}\r\n        defaultPageSize={defaultPageSize}\r\n        rowProps={( row ) => ({\r\n          onClick: () => {\r\n            console.log('1: ', row , '2: ', row.original);\r\n          },\r\n          style: {\r\n            cursor: \"pointer\",\r\n            // background: row.original === 'flagged' ? 'yellow' : 'white',\r\n          }\r\n        })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","C:\\tagons\\src\\components\\charts\\Bar.js",["507","508"],"import React , { useState , useEffect}  from 'react';\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { barChartOptions } from './config';\r\nimport { getIndustryPfactorTrendandfactor, getIndustryTotalcategoryList } from '../../redux/actions';\r\n/* Sentiment Factor | Brand */\r\nconst Bar = (props) => {\r\n    const [barName, setbarName] = useState(props.name) ;\r\n    const [barSentiName, setBarSentiName] = useState(props.activeTab) ;\r\n    const dispatch = useDispatch();\r\n    const store = useSelector(state => state.startApp);\r\n    const store2 = useSelector(state => state.industryApp);\r\n\r\n    //라인 옵션\r\n    const [barOption, setBarOption] = React.useState(barChartOptions);\r\n\r\n\r\n    useEffect(() => {\r\n      var seriesData = [];\r\n      var dataArr = [];\r\n      var categoryArr = [];\r\n      var iPfactorTrendandfactor = [];\r\n      var colorArrr = [];\r\n      var barlen = 0;\r\n      var chartTypeName = \"\";\r\n      if (!(store2.iPfactorTrendandfactor === null || store2.iPfactorTrendandfactor=== undefined || store2.iPfactorTrendandfactor === \"\" || JSON.stringify(store2.iPfactorTrendandfactor) === \"{}\")){\r\n        if (props.activeTab === '1') {          \r\n          if (store.SearchCondition.activeFirstTab === \"1\"){\r\n            iPfactorTrendandfactor = store2.iPfactorTrendandfactor.SentimentFactorData;\r\n            chartTypeName = \"Sentiment Factor\"; // ProductFactorData\r\n          }\r\n          else{\r\n            iPfactorTrendandfactor = store2.iPfactorTrendandfactor.ProductFactorData;\r\n            chartTypeName = \"Product FactorData\"; // ProductFactorData\r\n          }     \r\n        }\r\n        else{\r\n          iPfactorTrendandfactor = store2.iPfactorTrendandfactor.BrandFactorData;\r\n          chartTypeName = \"Brand\";\r\n        }\r\n\r\n        if (!(iPfactorTrendandfactor === null  || iPfactorTrendandfactor=== undefined || iPfactorTrendandfactor === \"\"  || JSON.stringify(iPfactorTrendandfactor) === \"[]\")) {\r\n          iPfactorTrendandfactor.map((tData,index) => {\r\n            dataArr.push(tData.Value);\r\n            categoryArr.push(tData.name);\r\n            if (index === 0){\r\n              colorArrr.push('#CC0000');\r\n            }\r\n            else if (index === (iPfactorTrendandfactor.length -1)){\r\n              colorArrr.push('#0000CC'); \r\n            }\r\n            else{\r\n              colorArrr.push('#808080'); \r\n            }\r\n          });\r\n          seriesData = [{\r\n                    name : chartTypeName,\r\n                    data: dataArr}];\r\n        } \r\n        \r\n        \r\n        setBarOption({\r\n          options: {\r\n              chart: {\r\n                type: 'bar',\r\n                height: 350,\r\n                toolbar: {\r\n                  show: false,\r\n                },\r\n                zoom: {\r\n                  enabled: false\r\n                },\r\n                \r\n              },\r\n              dataLabels: {\r\n                enabled: true\r\n              },\r\n              fill: {\r\n                opacity: 0.7 ,\r\n                colors: colorArrr,\r\n              },\r\n              plotOptions: {\r\n                bar: {\r\n                    distributed: true\r\n                }\r\n              },\r\n              title: {\r\n                // text: \"\"\r\n              },\r\n              grid : {\r\n                        yaxis : {\r\n                            lines : {\r\n                                show : false\r\n                            }\r\n                        }\r\n                    },\r\n              xaxis: {\r\n                categories:categoryArr,\r\n              },\r\n              yaxis: {\r\n                  show: false,\r\n              },\r\n              legend : {\r\n                show: false ,\r\n              },\r\n            },\r\n            series: seriesData,\r\n         }\r\n        );\r\n        // console.log('bar',seriesData); \r\n      }\r\n      else{\r\n        setBarOption({\r\n          options: {\r\n              chart: {\r\n                type: 'bar',\r\n                height: 350,\r\n                toolbar: {\r\n                  show: false,\r\n                },\r\n                zoom: {\r\n                  enabled: false\r\n                },\r\n                \r\n              },\r\n              dataLabels: {\r\n                enabled: true\r\n              },\r\n              fill: {\r\n                opacity: 0.7,\r\n                type: 'solid', \r\n                colors: colorArrr,\r\n              },\r\n              title: {\r\n                // text: \"\"\r\n              },\r\n              plotOptions: {\r\n                bar: {\r\n                    distributed: true\r\n                }\r\n              },\r\n              grid : {\r\n                        yaxis : {\r\n                            lines : {\r\n                                show : false\r\n                            }\r\n                        }\r\n                    },\r\n              xaxis: {\r\n                categories:[],\r\n              },\r\n              yaxis: {\r\n                  show: false,\r\n              },\r\n              legend : {\r\n                show: false ,\r\n              },\r\n            },\r\n            series: [],\r\n         }\r\n        );\r\n      }\r\n    }, [store2.iPfactorTrendandfactor]);\r\n\r\n    useEffect(() => {\r\n      var seriesData = [];\r\n      var dataArr = [];\r\n      var categoryArr = [];\r\n      var colorArrr = [];\r\n      var iPfactorTrendandfactor = [];\r\n      var barlen = 0;\r\n      var chartTypeName = \"\";\r\n      if (!(store2.iPfactorTrendandfactor === null || store2.iPfactorTrendandfactor=== undefined || store2.iPfactorTrendandfactor === \"\" || JSON.stringify(store2.iPfactorTrendandfactor) === \"{}\")){\r\n        if (props.activeTab === '1') {\r\n          if (store.SearchCondition.activeFirstTab === \"1\"){\r\n            iPfactorTrendandfactor = store2.iPfactorTrendandfactor.SentimentFactorData;\r\n            chartTypeName = \"Sentiment Factor\"; // ProductFactorData\r\n          }\r\n          else{\r\n            iPfactorTrendandfactor = store2.iPfactorTrendandfactor.ProductFactorData;\r\n            chartTypeName = \"Product FactorData\"; // ProductFactorData\r\n          }  \r\n        }\r\n        else{\r\n          iPfactorTrendandfactor = store2.iPfactorTrendandfactor.BrandFactorData;\r\n          chartTypeName = \"Brand\";\r\n        }\r\n        if (iPfactorTrendandfactor === null || iPfactorTrendandfactor=== undefined || iPfactorTrendandfactor === \"\"  ){\r\n          iPfactorTrendandfactor = [];\r\n        }\r\n        // console.log('data', iPfactorTrendandfactor,store2.iPfactorTrendandfactor.SentimentFactorData,store2.iPfactorTrendandfactor.BrandFactorData );\r\n\r\n        iPfactorTrendandfactor.map((tData,index) => {\r\n          dataArr.push(tData.Value);\r\n          categoryArr.push(tData.name);\r\n          if (index === 0){\r\n            colorArrr.push('#CC0000');\r\n          }\r\n          else if (index === (iPfactorTrendandfactor.length -1)){\r\n            colorArrr.push('#0000CC'); \r\n          }\r\n          else{\r\n            colorArrr.push('#808080'); \r\n          }\r\n        });\r\n        /* \r\n        barlen = iPfactorTrendandfactor.length;        \r\n        if (barlen === 0){\r\n          if (props.activeTab === '1')\r\n            alert('Sentiment Factor 데이타가 없습니다');\r\n          else\r\n            alert('Brand 데이타가 없습니다');\r\n        } */\r\n        seriesData = [{\r\n                  name : chartTypeName,\r\n                  data: dataArr}];\r\n\r\n        setBarOption({\r\n          options: {\r\n              chart: {\r\n                type: 'bar',\r\n                height: 350,\r\n                toolbar: {\r\n                  show: false,\r\n                },\r\n                zoom: {\r\n                  enabled: false\r\n                }\r\n                \r\n              },\r\n              dataLabels: {\r\n                enabled: true \r\n              },\r\n              fill: {\r\n                opacity: 0.7 ,\r\n                type: 'solid',\r\n                colors: colorArrr, \r\n              },\r\n              title: {\r\n                // text: \"\"\r\n              },\r\n              grid : {\r\n                        yaxis : {\r\n                            lines : {\r\n                                show : false\r\n                            }\r\n                        }\r\n                    },\r\n              xaxis: {\r\n                categories:categoryArr,\r\n              },\r\n              yaxis: {\r\n                  show: false,\r\n              },\r\n            },\r\n            series: seriesData,\r\n         }\r\n        );\r\n      }\r\n      \r\n    }, [props.activeTab]);\r\n    return (\r\n        <ReactApexChart options={barOption.options} series={barOption.series} type=\"bar\" height={props.height} />\r\n    );\r\n};\r\n\r\nexport default Bar;","C:\\tagons\\src\\components\\charts\\Bubble.js",["509","510","511","512","513","514","515","516","517","518","519"],"import React , { useState , useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport axios from 'axios';\r\nimport { bubbleChartOptions } from './config';\r\nimport { getIndustryPfactorGiRelatedwords } from '../../redux/actions';\r\n\r\nconst Bubble = (props) => {\r\n  const [bubbleName, setBubbleName] = useState(props.name) ;\r\n  const [bubbleOptions,setBubbleOptions] = useState(bubbleChartOptions);\r\n  const [activeFirstTab, setActiveFirstTab] = useState(props.activeFirstTab) ;\r\n    // api 호출시 로딩바 적용 테스트\r\n  const [loading, setLoading] = useState(false);\r\n  const [loaderror, setLoadError] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n  const store = useSelector(state => state.startApp);\r\n  const store2 = useSelector(state => state.industryApp);\r\n  const clickChart = (seriesIndex,factor) => {\r\n    var param1 = {} ;\r\n    var callUrl = \"\";\r\n    if (seriesIndex >= 0 ){\r\n      if (!(store.SearchCondition.activeFirstTab === \"\" || store.SearchCondition.activeFirstTab === null || store.SearchCondition.activeFirstTab === undefined)){\r\n        param1.FromDate = store.SearchCondition.FromDate;\r\n        param1.ToDate = store.SearchCondition.ToDate;\r\n        param1.Category1 = store.SearchCondition.Category1;\r\n        param1.Category2 = store.SearchCondition.Category2;\r\n        param1.Category3 = store.SearchCondition.Category3;\r\n        param1.Keyword = store.SearchCondition.Keyword;\r\n        param1.Factor = factor ;\r\n        if (store.SearchCondition.activeFirstTab === '1'){\r\n          callUrl = \"/industry/GetIndustry_PFactor_GI_RelatedWords\";\r\n        }\r\n        else {\r\n          callUrl = \"/industry/GetIndustry_EFactor_GI_RelatedWords\";\r\n        }\r\n        axios.post(callUrl,param1)\r\n          .then(function (response) {\r\n            dispatch(getIndustryPfactorGiRelatedwords(response.data));\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      }\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    var seriesData = [];\r\n    var bubbleXArr = [];\r\n    var bubbleYArr = [];\r\n    var xMin, xMax, yMin, yMax = 0;\r\n    // console.log('bubble', store2.iGiBubbleelectData );\r\n    dispatch(getIndustryPfactorGiRelatedwords(null));\r\n    if (!(store2.iGiBubbleelectData === null || store2.iGiBubbleelectData=== undefined || store2.iGiBubbleelectData === \"\" || JSON.stringify(store2.iGiBubbleelectData) === \"{}\")){\r\n      // console.log('bubble set ',store2.iGiBubbleelectData.BubbleData);\r\n      store2.iGiBubbleelectData.BubbleData.map((bData) => {\r\n        seriesData.push({\r\n          name: bData.Topics,\r\n          data: [[bData.DGI, bData.SGI, bData.PGI]],\r\n          relationTxt: [\r\n            '<>DGI ('.concat(bData.DGI,')</>'),\r\n            '<>SGI ('.concat(bData.SGI,')</>'),\r\n            '<>PGI ('.concat(bData.PGI,')</>'),\r\n          ],\r\n        });\r\n        bubbleXArr.push(bData.DGI);\r\n        bubbleYArr.push(bData.SGI);\r\n      });\r\n      // bubbleChartOptions.series = seriesData;\r\n\r\n      xMin = Math.min.apply(null, bubbleXArr) - 5;\r\n      xMax = Math.max.apply(null, bubbleXArr) + 5;\r\n      yMin = Math.min.apply(null, bubbleYArr) - 5;\r\n      yMax = Math.max.apply(null, bubbleYArr) + 5;\r\n      setBubbleOptions({\r\n        options: {\r\n          chart: {\r\n            toolbar: {\r\n              show: false,\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n            events: {\r\n              click:\r\n                function(event, chartContext, w) {\r\n                  if (w.seriesIndex >=0 ) {\r\n                    clickChart(w.seriesIndex, w.config.series[w.seriesIndex].name);\r\n                  }\r\n                }\r\n            },\r\n          },\r\n          tooltip: {\r\n            custom: function({ series, seriesIndex, dataPointIndex, w}) {\r\n              return `${'<div class=\"arrow_box\" style=\"padding:5px;\">' +\r\n              '<span>'} \r\n                  ${ w.config.series[seriesIndex].name } <br/>\r\n                  DGI: ${ Math.trunc(w.config.series[seriesIndex].data[0][0]) } <br/>\r\n                  SGI: ${ Math.trunc(w.config.series[seriesIndex].data[0][1]) } <br/>\r\n                  PGI: ${ Math.trunc(w.config.series[seriesIndex].data[0][2]) } <br/>\r\n              </span></div>`\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: true,\r\n            formatter: function(value, { seriesIndex, dataPointIndex, w }) {\r\n              return w.config.series[seriesIndex].name\r\n            }\r\n          },\r\n          fill: {\r\n            opacity: 0.7\r\n          },\r\n          title: {\r\n            //text: \"\"\r\n          },\r\n          xaxis: {\r\n            min: -10,\r\n            max: 110,\r\n            tickAmount: 12,\r\n            type: \"category\",\r\n            show: false,\r\n            title: {\r\n              text: \"DGI\"\r\n            },\r\n          },\r\n          yaxis:{\r\n            min: -10,\r\n            max: 110 ,\r\n            labels: {\r\n              formatter: function(value, index) {\r\n                return value.toFixed();\r\n              }\r\n            },\r\n            title: {\r\n              text: \"SGI\"\r\n            },\r\n          },\r\n          legend : {\r\n            show: false ,\r\n          },\r\n          grid: {\r\n            show: false,\r\n          },\r\n          // plotOptions: {\r\n          //   bubble: {\r\n          //     minBubbleRadius: 18,\r\n          //   }\r\n          // },\r\n        },\r\n        series: seriesData\r\n      });\r\n\r\n    }\r\n    else{\r\n      setBubbleOptions({\r\n        options: {\r\n          chart: {\r\n            toolbar: {\r\n              show: false,\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n            events: {\r\n              click:\r\n                function(event, chartContext, w) {\r\n                  if (w.seriesIndex >=0 ) {\r\n                    clickChart(w.seriesIndex, w.config.series[w.seriesIndex].name);\r\n                  }\r\n                }\r\n            },\r\n          },\r\n          tooltip: {\r\n            custom: function({ series, seriesIndex, dataPointIndex, w}) {\r\n              return `${'<div class=\"arrow_box\" style=\"padding:5px;\">' +\r\n              '<span>'} \r\n                  DGI: ${ Math.trunc(w.config.series[seriesIndex].data[0][0]) } <br/>\r\n                  SGI: ${ Math.trunc(w.config.series[seriesIndex].data[0][1]) } <br/>\r\n                  PGI: ${ Math.trunc(w.config.series[seriesIndex].data[0][2]) } <br/>\r\n              </span></div>`\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: true,\r\n            formatter: function(value, { seriesIndex, dataPointIndex, w }) {\r\n              return w.config.series[seriesIndex].name\r\n            }\r\n          },\r\n          fill: {\r\n            opacity: 0.7\r\n          },\r\n          title: {\r\n            //text: \"\"\r\n          },\r\n          xaxis: {\r\n            min: -10,\r\n            max: 110,\r\n            tickAmount: 12,\r\n            type: \"category\",\r\n            show: false,\r\n            title: {\r\n              text: \"DGI\"\r\n            },\r\n          },\r\n          yaxis:{\r\n            min: -10,\r\n            max: 110,\r\n            labels: {\r\n              formatter: function(value, index) {\r\n                return value.toFixed();\r\n              }\r\n            },\r\n            title: {\r\n              text: \"SGI\"\r\n            },\r\n          },\r\n          legend : {\r\n            show: false ,\r\n          },\r\n          grid: {\r\n            show: false,\r\n          },\r\n          // plotOptions: {\r\n          //   bubble: {\r\n          //     minBubbleRadius: 18,\r\n          //   }\r\n          // },\r\n        },\r\n        series: []\r\n      });\r\n      dispatch(getIndustryPfactorGiRelatedwords(null));\r\n    }\r\n  },[store2.iGiBubbleelectData]);\r\n  // Loading \r\n  if (loading) return <div className=\"loading\" />;\r\n  if (loaderror) return <div>에러가 발생했습니다</div>;\r\n  return (\r\n    <ReactApexChart options={bubbleOptions.options} series={bubbleOptions.series} type=\"bubble\" height={props.height} className={props.className} />\r\n  );\r\n};\r\n\r\nexport default Bubble;","C:\\tagons\\src\\components\\charts\\ScatterDatetime.js",["520","521","522","523","524","525","526","527","528","529"],"/* eslint-disable no-plusplus */\r\nimport React , { useState , useEffect} from 'react';\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { scatterDatetimeChartOptions } from './config';\r\nimport { getIndustryPfactorTrendandfactor } from '../../redux/actions';\r\n\r\nconst ScatterDatetime = (props) => {\r\n  var categoryData = [];\r\n  const [ScatterDatetimeOption, setScatterDatetimeOption] = React.useState(scatterDatetimeChartOptions);\r\n  const [resData, setResData] = useState({});\r\n  const [categoryStateData, setCategoryStateData] = useState([]);\r\n  const [scatterName, setScatter] = useState(props.name) ;\r\n  const [activeFirstTab, setActiveFirstTab] = useState(props.activeFirstTab) ;\r\n  const dispatch = useDispatch();\r\n  const store = useSelector(state => state.startApp);\r\n  const store2 = useSelector(state => state.industryApp);\r\n  // api 호출시 로딩바 적용 테스트\r\n  const [loading, setLoading] = useState(false);\r\n  const [loaderror, setLoadError] = useState(null);\r\n  //색 지정\r\n  var colorArr = [];\r\n  var color = '';\r\n\r\n  const replaceAll = (str,p1,p2) => {\r\n    return str.split(p1).join(p2);\r\n  }\r\n\r\n  const clickChart = (seriesIndex,seriesData,seriesLength) => {\r\n    var param1 = {} ;\r\n    var callUrl = \"\";\r\n    let i = 0 ;\r\n    colorArr = [];\r\n    if (seriesIndex >= 0 ){\r\n      // const categoryUpLow = name.split('-');\r\n      const categoryUpper = categoryData[seriesIndex][0];\r\n      const name = categoryData[seriesIndex][1];\r\n      dispatch(getIndustryPfactorTrendandfactor(null));\r\n      if (!(store.SearchCondition.activeFirstTab === \"\" || store.SearchCondition.activeFirstTab === null || store.SearchCondition.activeFirstTab === undefined)){\r\n        param1.FromDate = store.SearchCondition.FromDate;\r\n        param1.ToDate = store.SearchCondition.ToDate;\r\n        param1.Category1 = store.SearchCondition.Category1;\r\n        param1.Category2 = store.SearchCondition.Category2;\r\n        param1.Category3 = store.SearchCondition.Category3;\r\n        param1.Keyword = store.SearchCondition.Keyword;\r\n        param1.Category_upper = categoryUpper;\r\n        param1.Name = name ;\r\n        props.chageShowTrend(false);\r\n        if (store.SearchCondition.activeFirstTab === '1'){\r\n          callUrl = \"/industry/GetIndustry_PFactor_TrendAndFactor\";\r\n        }\r\n        else {\r\n          callUrl = \"/industry/GetIndustry_EFactor_TrendAndFactor\";\r\n        }\r\n        i = 0 ;\r\n        while (i < seriesLength ){\r\n          if ( i === seriesIndex){\r\n            colorArr.push('#d50028');\r\n          }\r\n          else{\r\n            colorArr.push('#868686');\r\n          }\r\n           i++ ;\r\n        }\r\n        \r\n\r\n        axios.post(callUrl,param1)\r\n          .then(function (response) {\r\n            dispatch(getIndustryPfactorTrendandfactor(response.data));\r\n            /*  setScatterDatetimeOption({...ScatterDatetimeOption,\r\n              options : {\r\n                colors : colorArr\r\n              } ,\r\n              series : seriesData, }); */\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n                      \r\n      }\r\n\r\n\r\n    }\r\n\r\n  }\r\n  const clickChart2 = (seriesIndex,Categoryupper,Categorylower, fSeriesData ) => {\r\n    var param1 = {} ;\r\n    var callUrl = \"\";\r\n    if (seriesIndex >= 0 ){\r\n      if (!(store.SearchCondition.activeFirstTab === \"\" || store.SearchCondition.activeFirstTab === null || store.SearchCondition.activeFirstTab === undefined)){\r\n        dispatch(getIndustryPfactorTrendandfactor(null));\r\n        param1.FromDate = store.SearchCondition.FromDate;\r\n        param1.ToDate = store.SearchCondition.ToDate;\r\n        param1.Category1 = store.SearchCondition.Category1;\r\n        param1.Category2 = store.SearchCondition.Category2;\r\n        param1.Category3 = store.SearchCondition.Category3;\r\n        param1.Keyword = store.SearchCondition.Keyword;\r\n        param1.Category_upper = Categoryupper;\r\n        param1.Name = Categorylower ;\r\n        if (store.SearchCondition.activeFirstTab === '1'){\r\n          callUrl = \"/industry/GetIndustry_PFactor_TrendAndFactor\";\r\n        }\r\n        else {\r\n          callUrl = \"/industry/GetIndustry_EFactor_TrendAndFactor\";\r\n        }\r\n        props.chageShowTrend(false);\r\n        // console.log('파라메터 clickChart2', callUrl ,param1);\r\n        axios.post(callUrl,param1)\r\n          .then(function (response) {\r\n            if (!(response.data === \"\" || response.data === null || response.data === undefined )){\r\n               /* setScatterDatetimeOption({...ScatterDatetimeOption,\r\n                options : {\r\n                  colors : colorArr\r\n                } ,\r\n                series : fSeriesData, }); */\r\n              dispatch(getIndustryPfactorTrendandfactor(response.data));\r\n\r\n            }\r\n            else{\r\n              console.log('factor error',response);\r\n            }\r\n          })\r\n          .catch(function (error) {\r\n            console.log('파라메터 clickChart2 error', error);\r\n          });\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n  const ScatterChartOption = {\r\n      options: {\r\n        chart: {\r\n          height: 350,\r\n          type: 'scatter',\r\n          toolbar: {show:true },\r\n          zoom: {\r\n            type: 'xy'\r\n          } ,\r\n          events: {\r\n            click: function(event, chartContext, config) {\r\n              if (config.seriesIndex >= 0) {\r\n                clickChart(config.seriesIndex,config.config.series,config.config.series.length);\r\n              }\r\n            }\r\n          },\r\n        },\r\n        tooltip: {\r\n          custom: function({ series, seriesIndex, dataPointIndex, w}) {\r\n            const prName = w.config.series[seriesIndex].name;\r\n            const prIndex = w.config.series[seriesIndex].data[0][0];\r\n            const riseFall = w.config.series[seriesIndex].data[0][1]\r\n            return `${'<div class=\"arrow_box\" style=\"padding:5px;\">' +\r\n            '<span>'}\r\n            ${ prName }<br/>\r\n                P_R_INDEX/RISE_FALL: ${ prIndex.toFixed(1) }\r\n                /${ riseFall.toFixed(1) }<br/>\r\n              </span></div>`\r\n          }\r\n        },\r\n        annotations: {\r\n          position: \"back\",\r\n          xaxis: [\r\n            {\r\n              x: 1,\r\n              x2: 1.5,\r\n              strokeDashArray: 0,\r\n              borderColor: \"#666\",\r\n              fillColor: \"#797979\",\r\n              opacity: 0.1 ,\r\n              label: {\r\n                text: 'Rise',\r\n                borderWidth: 0,\r\n                position: 'top',\r\n                offsetX: '46%',\r\n                offsetY: -7,\r\n                orientation: 'horizontal',\r\n                style: {\r\n                  background: 'transparent',\r\n                  fontSize: '16px',\r\n                  fontWeight: '700',\r\n                  color: '#000'\r\n                }\r\n              },\r\n            },\r\n            {\r\n              x: 1.5,\r\n              x2: 2,\r\n              strokeDashArray: 0,\r\n              borderColor: \"#666\",\r\n              fillColor: \"#fd7b7a\",\r\n              opacity: 0.1,\r\n              label: {\r\n                text: 'Fall',\r\n                borderWidth: 0,\r\n                position: 'bottom',\r\n                offsetY: 15,\r\n                orientation: 'horizontal',\r\n                style: {\r\n                  background: 'transparent',\r\n                  fontSize: '16px',\r\n                  fontWeight: '700',\r\n                  color: '#000'\r\n                }\r\n              }, \r\n              \r\n            }\r\n          ],\r\n          yaxis: [\r\n            {\r\n              y: 1,\r\n              y2: 1.5,\r\n              strokeDashArray: 0,\r\n              borderColor: \"#666\",\r\n              fillColor: \"#c8c4c3\",\r\n              opacity: 0.3\r\n            },\r\n            {\r\n              y: 1.5,\r\n              y2: 2,\r\n              strokeDashArray: 0,\r\n              borderColor: \"#666\",\r\n              fillColor: \"#bbd5ee\",\r\n              opacity: 0.3 ,\r\n              label: {\r\n                  text: 'P/R Index',\r\n                  borderWidth: 0,\r\n                  offsetX: 75,\r\n                  offsetY: 7,\r\n                  orientation: 'horizontal',\r\n                  style: {\r\n                    background: 'transparent',\r\n                    fontSize: '16px',\r\n                    fontWeight: '700',\r\n                    color: '#000',\r\n                  }\r\n                },\r\n            }\r\n          ]\r\n        },\r\n        dataLabels: {\r\n          enabled: true,\r\n          formatter: function(value, { seriesIndex, dataPointIndex, w }) {\r\n            return w.config.series[seriesIndex].name\r\n          },\r\n          offsetX: 0,\r\n          offsetY: -8\r\n        },\r\n        grid: {\r\n          xaxis: {\r\n            lines: {\r\n              show: true\r\n            }\r\n          },\r\n          yaxis: {\r\n            lines: {\r\n              show: true\r\n            }\r\n          },\r\n          padding : {\r\n            top : 0,\r\n            bottom : 0,\r\n            right : 0,\r\n            left : 0 ,\r\n          }\r\n        },\r\n        colors: ['#868686'], // marker&label 회색\r\n        xaxis: {\r\n          min: 1,\r\n          max: 2, //x축은 소수점이 안먹힘\r\n          type: 'numeric',\r\n          // tickPlacement: 'between',\r\n          tickAmount: 2 ,\r\n          show: false\r\n        },\r\n        yaxis: {\r\n          min: 1,\r\n          max: 2,\r\n          tickAmount: 2,\r\n          // forceNiceScale: true\r\n          show: false,\r\n        },\r\n        legend : {\r\n          show: false ,\r\n        },\r\n\r\n      }  \r\n  \r\n  };\r\n  const setChartData = (chartData) => {\r\n    var seriesData = [];\r\n    var i = 0 ;\r\n    var maxRiseData = {};\r\n    var maxindex = -1;\r\n    colorArr = [];\r\n    if (categoryData.length > 0 ){\r\n      categoryData = [];    \r\n    } \r\n    chartData.Data.map((res,index) => {\r\n      if (index === 0) {\r\n        maxRiseData = res;\r\n        maxindex =index;\r\n      }\r\n      else if (maxRiseData.RISE_FALL <= res.RISE_FALL){\r\n          maxRiseData = res;\r\n          maxindex =index;\r\n      }\r\n      categoryData.push([res.Category_upper,res.Category_lower]);\r\n      seriesData.push({\r\n        name: res.Category_lower,\r\n        data: [[res.P_R_INDEX, res.RISE_FALL]],\r\n      });\r\n    });\r\n\r\n    i = 0 ;\r\n    while (i < chartData.Data.length ){\r\n      if ( i === maxindex){\r\n        colorArr.push('#d50028');\r\n      }\r\n      else{\r\n        colorArr.push('#868686');\r\n      }\r\n       i++ ;\r\n    }\r\n    // ScatterChartOption.options.colors = colorArr;\r\n\r\n    setScatterDatetimeOption({\r\n      options: ScatterChartOption.options,\r\n      series: seriesData,\r\n\r\n    });\r\n\r\n    if (maxindex >=0 ){\r\n     clickChart2(maxindex ,chartData.Data[maxindex].Category_upper , chartData.Data[maxindex].Category_lower , seriesData );\r\n    }\r\n  }\r\n  const callTrendQuadApi = async (paramValue,callUrl) =>{\r\n    setLoading(true);\r\n    await axios.post(callUrl,paramValue)\r\n      .then(function (response) {\r\n        setResData(response.data);\r\n        setChartData(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch(function (error) {\r\n        setLoading(false);\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    var seriesData = [];\r\n    var param1 = {};\r\n\r\n    var callUrl = \"\";\r\n    if (!(store.SearchCondition.activeFirstTab === \"\" || store.SearchCondition.activeFirstTab === null || store.SearchCondition.activeFirstTab === undefined)){\r\n      param1.FromDate = replaceAll(store.SearchCondition.FromDate,\"-\",\"\");\r\n      param1.ToDate = replaceAll(store.SearchCondition.ToDate,\"-\",\"\");\r\n      param1.Category1 = store.SearchCondition.Category1;\r\n      param1.Category2 = store.SearchCondition.Category2;\r\n      param1.Category3 = store.SearchCondition.Category3;\r\n      param1.Keyword = store.SearchCondition.Keyword;\r\n      props.chageShowTrend(false);\r\n      dispatch(getIndustryPfactorTrendandfactor(null));\r\n      if (store.SearchCondition.activeFirstTab === '1'){\r\n        callUrl = \"/industry/GetIndustry_PFactor_TrendQuad\";\r\n      }\r\n      else {\r\n        callUrl = \"/industry/GetIndustry_EFactor_TrendQuad\";\r\n      }\r\n      callTrendQuadApi(param1,callUrl);\r\n    }\r\n\r\n    setScatterDatetimeOption({\r\n      series: seriesData,\r\n      options: ScatterChartOption.options,\r\n    });\r\n\r\n  }, [store.SearchCondition]);\r\n  // Loading \r\n  if (loading) return <div className=\"loading\" />;\r\n  if (loaderror) return <div>에러가 발생했습니다</div>;\r\n  return (\r\n    <ReactApexChart options={ScatterDatetimeOption.options} series={ScatterDatetimeOption.series} type=\"scatter\" height={props.height} className={props.className} />\r\n  );\r\n};\r\n\r\nexport default ScatterDatetime;","C:\\tagons\\src\\components\\charts\\Line.js",["530","531"],"import React , { useState , useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { checkPropTypes } from 'prop-types';\r\nimport { lineChartOptions } from './config';\r\n/* Post-Trend */\r\nconst Line = (props) => {\r\n    const [lineName, setLineName] = useState(props.name) ;\r\n    const [lineOptions, setLineOptions] = useState(lineChartOptions) ;\r\n    const dispatch = useDispatch();\r\n    const startApp = useSelector(state => state.startApp);\r\n    const industryApp = useSelector(state => state.industryApp);\r\n  \r\n    useEffect(() => {\r\n        var categoryArr = [];\r\n        var toolCate = [];\r\n        var postArr = [];\r\n        var preArr = [];\r\n\r\n        if (!(industryApp.iPfactorTrendandfactor === null || industryApp.iPfactorTrendandfactor === undefined || industryApp.iPfactorTrendandfactor === \"\" || JSON.stringify(industryApp.iPfactorTrendandfactor) === \"{}\")) {\r\n            //이하 퍼센트 계산\r\n            const percent = industryApp.iPfactorTrendandfactor.PreTrendChange;\r\n            let resultPercent = percent.substr(0, percent.indexOf('%'));\r\n            \r\n            //양수/음수 판별\r\n            if(resultPercent >= 0) {\r\n                resultPercent = 100 - resultPercent;\r\n            }\r\n            //셋팅\r\n            props.setPercent(`${resultPercent  }%`);\r\n\r\n            //이하 차트 데이터\r\n            const fromDate = startApp.SearchCondition.FromDate;\r\n            const toDate = startApp.SearchCondition.ToDate;\r\n            const preEndIndex = industryApp.iPfactorTrendandfactor.TrendData.length - 1;\r\n            const clickData = industryApp.iPfactorTrendandfactor.Name;\r\n        \r\n            industryApp.iPfactorTrendandfactor.TrendData.map((tData, index) => {\r\n                const dateString = tData.date.substring(0,10);\r\n               \r\n                // series (line data)\r\n                if(props.showPreTrend) {\r\n                    // post만 보여줄 경우\r\n                    if(dateString < toDate) {\r\n                        postArr.push(tData.Value);\r\n                        preArr.push(null);\r\n                    }\r\n                    else if(dateString === toDate) {\r\n                        postArr.push(tData.Value);\r\n                        preArr.push(tData.Value);\r\n                    }\r\n                    else {\r\n                        postArr.push(null);\r\n                        preArr.push(tData.Value);\r\n                    }\r\n                }\r\n                else if(dateString <= toDate) {\r\n                    postArr.push(tData.Value);\r\n                }\r\n                else{\r\n                    postArr.push(null);\r\n                }\r\n\r\n                // x축 label\r\n                if(dateString === fromDate || dateString === toDate) {\r\n                    categoryArr.push(dateString);\r\n                }\r\n                else if(preEndIndex === index){\r\n                    categoryArr.push(dateString);\r\n                }\r\n                else{\r\n                    categoryArr.push(\"\");\r\n                }\r\n\r\n                toolCate.push(dateString);\r\n            });\r\n\r\n            setLineOptions({\r\n                ...lineOptions,\r\n                options : {\r\n                    title : {\r\n                        text : clickData\r\n                    },\r\n                    xaxis : {\r\n                        categories : categoryArr,\r\n                        show : false\r\n                    },\r\n                    tooltip: {\r\n                        x: {\r\n                            formatter: function(value) {\r\n                                return toolCate[value - 1];\r\n                            }\r\n                        }\r\n                    },\r\n                    grid : {\r\n                        padding : {\r\n                            top : 0,\r\n                            bottom : 0,\r\n                            right : 6,\r\n                            left : 37 ,\r\n                        }\r\n                    },\r\n                    colors : ['#25e9ae', '#d50028']\r\n                },\r\n                series : [\r\n                    { name: \"post-Trend\",  data: postArr },\r\n                    { name: \"pre-Trend\",  data: preArr }\r\n                ]\r\n            });\r\n        }\r\n        else{\r\n          setLineOptions({\r\n                ...lineOptions,\r\n                options : {\r\n                    title : {\r\n                        text : \"\"\r\n                    },\r\n                    xaxis : {\r\n                        categories : [],\r\n                        show : false\r\n                    },\r\n                    grid : {\r\n                        padding : {\r\n                            top : 0,\r\n                            bottom : 0,\r\n                            right : 6,\r\n                            left : 37 ,\r\n                        }\r\n                    },\r\n                    colors : []\r\n                },\r\n                series : []\r\n            });\r\n        }\r\n    },[industryApp.iPfactorTrendandfactor, props.showPreTrend]);\r\n\r\n    return (\r\n        <ReactApexChart options={lineOptions.options} series={lineOptions.series} type=\"line\" height={props.height} />\r\n    );\r\n};\r\n\r\nexport default Line;","C:\\tagons\\src\\containers\\pages\\ShowRoom.js",["532","533","534"],"/* eslint-disable react/no-array-index-key */\r\nimport React , { useState , useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nconst ShowRoom = (props) => {\r\n  const [thumbList , setThumbList] = useState([]);\r\n  const [showRoomName, setShowRoomName] = useState(props.name) ;\r\n  const dispatch = useDispatch();\r\n  const store = useSelector(state => state.startApp);\r\n  const store2 = useSelector(state => state.industryApp);\r\n  // api 호출시 로딩바 적용 테스트\r\n  const [loading, setLoading] = useState(false);\r\n  const [loaderror, setLoadError] = useState(null);\r\n\r\n  const callShowroomApi =  async (paramValue) =>{  \r\n    setLoading(true);\r\n    await axios.post(\"/industry/GetIndustry_Showroom\",paramValue)\r\n    .then(function (response) {\r\n      setThumbList(response.data);\r\n      setLoading(false);\r\n    })\r\n    .catch(function (error) {\r\n      setLoading(false);\r\n      console.log(error);\r\n    });\r\n  };\r\n  const replaceAll = (str,p1,p2) => {\r\n    return str.split(p1).join(p2);\r\n  }\r\n  React.useEffect(() => {\r\n    var param1 = {};\r\n    var category = {};  \r\n    var {SearchChart} = store;\r\n    console.log('ShowRoom : ', store.SearchChart);\r\n    \r\n    if (store.SearchChart.ShowRoom === true){\r\n      setThumbList([]);\r\n      param1.FromDate = replaceAll(store.SearchCondition.FromDate,\"-\",\"\");\r\n      param1.ToDate = replaceAll(store.SearchCondition.ToDate,\"-\",\"\");\r\n      param1.Category1 = store.SearchCondition.Category1;\r\n      param1.Category2 = store.SearchCondition.Category2;\r\n      param1.Category3 = store.SearchCondition.Category3;\r\n      param1.Keyword = store.SearchCondition.Keyword;\r\n      callShowroomApi(param1);\r\n    }\r\n  }, [store.SearchCondition]);\r\n  if (loading) return <div className=\"loading\" />;\r\n  if (loaderror) return <div>에러가 발생했습니다</div>;\r\n  return (\r\n    <>\r\n      <ul>\r\n        {!thumbList.URL || thumbList.URL.length === 0  ? <li> 자료가 없습니다. </li> : thumbList.URL.map((item, index) => {\r\n            return (\r\n              <li key={index}>\r\n                <span>{index+1}</span>\r\n                <a href={item.SiteURL} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <img\r\n                  className=\"img-fluid border-radius\"\r\n                  src={item.ImageURL}\r\n                  alt=\"thumbnail\"\r\n                />\r\n                </a>\r\n              </li>\r\n            );\r\n          }) }\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShowRoom;\r\n","C:\\tagons\\src\\components\\charts\\config.js",["535"],"import React from 'react';\r\nimport {renderToString} from 'react-dom/server';\r\nimport ActiveKeyword from '../../containers/pages/ActiveKeyword';\r\n\r\nfunction displayTooltip() {\r\n  return renderToString(<ActiveKeyword />);\r\n}\r\n\r\n// bubble config options 설정\r\nexport const bubbleChartOptions = {\r\n  options: {\r\n    chart: {\r\n      toolbar: {\r\n        show: false,\r\n      },\r\n      zoom: {\r\n        enabled: false\r\n      },\r\n      \r\n    },\r\n    grid: {\r\n      show: false,\r\n    },\r\n    dataLabels: {\r\n      enabled: true\r\n    },\r\n    fill: {\r\n      opacity: 0.7\r\n    },\r\n    xaxis: {\r\n      min: 0,\r\n      max: 70,\r\n      tickAmount: 12,\r\n      type: \"category\",\r\n      show: false,\r\n      title: {\r\n        text: \"DGI\"\r\n      },\r\n    },\r\n    yaxis:{\r\n            min: 0,\r\n            max: 70,\r\n            labels: {\r\n              formatter: function(value, index) {\r\n                return value.toFixed();\r\n              }\r\n            },\r\n            title: {\r\n              text: \"SGI\"\r\n            },\r\n          },\r\n  },\r\n  series: []\r\n}\r\n\r\n// line config options 설정\r\nexport const lineChartOptions = {\r\n  options: {\r\n    chart: {\r\n      type: 'line',\r\n      height: 350,\r\n      toolbar: {\r\n        show: false,\r\n      },\r\n      zoom: {\r\n        enabled: false\r\n      }\r\n    },\r\n    grid: {\r\n        yaxis: {\r\n            lines: {\r\n                show: false\r\n            }\r\n        },\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    fill: {\r\n      opacity: 0.7\r\n    },\r\n    title: {\r\n      // text: \"\"\r\n    },\r\n    xaxis: {\r\n      categories: [],\r\n    },\r\n    yaxis: {\r\n      show: false,\r\n    },\r\n    legend: { // 범례\r\n        show: false\r\n    },\r\n    colors:[]\r\n    },\r\n    series: []\r\n};\r\n\r\nexport const barChartOptions = {\r\n  options: {\r\n    chart: {\r\n      type: 'bar',\r\n      height: 350,\r\n      toolbar: {\r\n        show: false,\r\n      },\r\n      zoom: {\r\n        enabled: false\r\n      }\r\n    },\r\n    grid: {\r\n        yaxis: {\r\n            lines: {\r\n                show: false\r\n            }\r\n        },\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    fill: {\r\n      opacity: 0.7\r\n    },\r\n    title: {\r\n      // text: \"\"\r\n    },\r\n    xaxis: {\r\n      categories: [],\r\n    },\r\n  },\r\n  series: []\r\n};\r\nexport const scatterChartOptions = {\r\n  series: [{\r\n    name: \"SAMPLE A\",\r\n    data: [\r\n    [16.4, 5.4], [21.7, 2], [25.4, 3], [19, 2], [10.9, 1], [13.6, 3.2], [10.9, 7.4], [10.9, 0], [10.9, 8.2], [16.4, 0], [16.4, 1.8], [13.6, 0.3], [13.6, 0], [29.9, 0], [27.1, 2.3], [16.4, 0], [13.6, 3.7], [10.9, 5.2], [16.4, 6.5], [10.9, 0], [24.5, 7.1], [10.9, 0], [8.1, 4.7], [19, 0], [21.7, 1.8], [27.1, 0], [24.5, 0], [27.1, 0], [29.9, 1.5], [27.1, 0.8], [22.1, 2]]\r\n  },{\r\n    name: \"SAMPLE B\",\r\n    data: [\r\n    [36.4, 13.4], [1.7, 11], [5.4, 8], [9, 17], [1.9, 4], [3.6, 12.2], [1.9, 14.4], [1.9, 9], [1.9, 13.2], [1.4, 7], [6.4, 8.8], [3.6, 4.3], [1.6, 10], [9.9, 2], [7.1, 15], [1.4, 0], [3.6, 13.7], [1.9, 15.2], [6.4, 16.5], [0.9, 10], [4.5, 17.1], [10.9, 10], [0.1, 14.7], [9, 10], [12.7, 11.8], [2.1, 10], [2.5, 10], [27.1, 10], [2.9, 11.5], [7.1, 10.8], [2.1, 12]]\r\n  },{\r\n    name: \"SAMPLE C\",\r\n    data: [\r\n    [21.7, 3], [23.6, 3.5], [24.6, 3], [29.9, 3], [21.7, 20], [23, 2], [10.9, 3], [28, 4], [27.1, 0.3], [16.4, 4], [13.6, 0], [19, 5], [22.4, 3], [24.5, 3], [32.6, 3], [27.1, 4], [29.6, 6], [31.6, 8], [21.6, 5], [20.9, 4], [22.4, 0], [32.6, 10.3], [29.7, 20.8], [24.5, 0.8], [21.4, 0], [21.7, 6.9], [28.6, 7.7], [15.4, 0], [18.1, 0], [33.4, 0], [16.4, 0]]\r\n  }]\r\n};\r\n\r\nexport const scatterDatetimeChartOptions = {\r\n  // 전부 지워야 함. 샘플임\r\n  options: {\r\n    chart: {\r\n      height: 350,\r\n      type: 'scatter',\r\n      zoom: {\r\n        type: 'xy'\r\n      }\r\n    },\r\n    /*\r\n    noData: {\r\n      text: 'Data loading...',\r\n      align: 'center',\r\n      verticalAlign: 'middle',\r\n      style: {\r\n        fontSize: '14px',\r\n      }\r\n    }, */\r\n    annotations: {\r\n      position: \"back\",\r\n      xaxis: [\r\n        {\r\n          x: 0,\r\n          x2: 50,\r\n          label: {\r\n            text: 'Rise',\r\n            borderWidth: 0,\r\n            position: 'top',\r\n            offsetX: '46%',\r\n            offsetY: -7,\r\n            orientation: 'horizontal',\r\n            style: {\r\n              background: 'transparent',\r\n              fontSize: '16px',\r\n              fontWeight: '700',\r\n              color: '#000'\r\n            }\r\n          },\r\n          strokeDashArray: 0,\r\n          borderColor: \"#666\",\r\n          fillColor: \"#797979\",\r\n          opacity: 0.1\r\n        },\r\n        {\r\n          x: 50,\r\n          x2: 100,\r\n          label: {\r\n            text: 'Fall',\r\n            borderWidth: 0,\r\n            position: 'bottom',\r\n            offsetY: 15,\r\n            orientation: 'horizontal',\r\n            style: {\r\n              background: 'transparent',\r\n              fontSize: '16px',\r\n              fontWeight: '700',\r\n              color: '#000'\r\n            }\r\n          },\r\n          strokeDashArray: 0,\r\n          borderColor: \"#666\",\r\n          fillColor: \"#fd7b7a\",\r\n          opacity: 0.1\r\n        }\r\n      ],\r\n      yaxis: [\r\n        {\r\n          y: 0,\r\n          y2: 50,\r\n          strokeDashArray: 0,\r\n          borderColor: \"#666\",\r\n          fillColor: \"#c8c4c3\",\r\n          opacity: 0.3,\r\n        },\r\n        {\r\n          y: 50,\r\n          y2: 100,\r\n          label: {\r\n            text: 'P/R Index',\r\n            borderWidth: 0,\r\n            offsetX: 75,\r\n            offsetY: 7,\r\n            orientation: 'horizontal',\r\n            style: {\r\n              background: 'transparent',\r\n              fontSize: '16px',\r\n              fontWeight: '700',\r\n              color: '#000',\r\n            }\r\n          },\r\n          strokeDashArray: 0,\r\n          borderColor: \"#666\",\r\n          fillColor: \"#bbd5ee\",\r\n          opacity: 0.3\r\n        }\r\n      ]\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    grid: {\r\n      xaxis: {\r\n        lines: {\r\n          show: false\r\n        }\r\n      },\r\n      yaxis: {\r\n        lines: {\r\n          show: false\r\n        }\r\n      },\r\n    },\r\n    xaxis: {\r\n      type: 'datetime',\r\n    },\r\n    yaxis: {\r\n      max: 70\r\n    }\r\n  },\r\n  series: [{\r\n      name: \"디테일\",\r\n      data: [\r\n      [1.0, 1.0]]\r\n    },{\r\n      name: \"목적\",\r\n      data: [\r\n      [1.1, 1.9]]\r\n    },{\r\n      name: \"스타일\",\r\n      data: [\r\n      [21.7, 2]]\r\n  }]\r\n};\r\n\r\n\r\nexport const heatMapGraphData = {\r\n    series: [\r\n      /*\r\n      {\r\n        name: 'Coupang',\r\n        data: [\r\n          {x: \"1/1\", y: -30},\r\n          {x: \"1/2\", y: 10},\r\n          {x: \"1/3\", y: 40},\r\n          {x: \"1/4\", y: 55},\r\n          {x: \"1/5\", y: -20},\r\n          {x: \"1/6\", y: 30},\r\n          {x: \"1/7\", y: -10},\r\n          {x: \"1/8\", y: 5},\r\n          {x: \"1/9\", y: 20},\r\n          {x: \"1/10\", y: 40},\r\n          {x: \"1/11\", y: -5},\r\n          {x: \"1/12\", y: 10},\r\n          {x: \"1/13\", y: 50},\r\n          {x: \"1/14\", y: 30},\r\n          {x: \"1/15\", y: 20},\r\n          {x: \"1/16\", y: 30},\r\n          {x: \"1/17\", y: 20},\r\n          {x: \"1/18\", y: 10},\r\n          {x: \"1/19\", y: 30},\r\n          {x: \"1/20\", y: 0},\r\n          {x: \"1/21\", y: 6},\r\n          {x: \"1/22\", y: 20},\r\n          {x: \"1/23\", y: 30},\r\n          {x: \"1/24\", y: 50},\r\n          {x: \"1/25\", y: 40},\r\n          {x: \"1/26\", y: 9},\r\n          {x: \"1/27\", y: 20},\r\n          {x: \"1/28\", y: 10},\r\n          {x: \"1/29\", y: 44},\r\n          {x: \"1/30\", y: 43},\r\n          {x: \"1/31\", y: 9},\r\n        ]\r\n      },\r\n      {\r\n        name: 'Naver Shopping',\r\n        data: [\r\n          {x: \"1/1\", y: -9},\r\n          {x: \"1/2\", y: 43},\r\n          {x: \"1/3\", y: 44},\r\n          {x: \"1/4\", y: 50},\r\n          {x: \"1/5\", y: -30},\r\n          {x: \"1/6\", y: 10},\r\n          {x: \"1/7\", y: -5},\r\n          {x: \"1/8\", y: 15},\r\n          {x: \"1/9\", y: 40},\r\n          {x: \"1/10\", y: -8},\r\n          {x: \"1/11\", y: -50},\r\n          {x: \"1/12\", y: 12},\r\n          {x: \"1/13\", y: 56},\r\n          {x: \"1/14\", y: 18},\r\n          {x: \"1/15\", y: 28},\r\n          {x: \"1/16\", y: 33},\r\n          {x: \"1/17\", y: 26},\r\n          {x: \"1/18\", y: 17},\r\n          {x: \"1/19\", y: 31},\r\n          {x: \"1/20\", y: -10},\r\n          {x: \"1/21\", y: 16},\r\n          {x: \"1/22\", y: 27},\r\n          {x: \"1/23\", y: 0},\r\n          {x: \"1/24\", y: 7},\r\n          {x: \"1/25\", y: 6},\r\n          {x: \"1/26\", y: 3},\r\n          {x: \"1/27\", y: -10},\r\n          {x: \"1/28\", y: 9},\r\n          {x: \"1/29\", y: 5},\r\n          {x: \"1/30\", y: 27},\r\n          {x: \"1/31\", y: 11},\r\n        ]\r\n      },\r\n      {\r\n        name: 'YouTube',\r\n        data: [\r\n          {x: \"1/1\", y: -30},\r\n          {x: \"1/2\", y: 10},\r\n          {x: \"1/3\", y: 40},\r\n          {x: \"1/4\", y: 55},\r\n          {x: \"1/5\", y: -20},\r\n          {x: \"1/6\", y: 30},\r\n          {x: \"1/7\", y: -10},\r\n          {x: \"1/8\", y: 5},\r\n          {x: \"1/9\", y: 20},\r\n          {x: \"1/10\", y: 40},\r\n          {x: \"1/11\", y: -5},\r\n          {x: \"1/12\", y: 10},\r\n          {x: \"1/13\", y: 50},\r\n          {x: \"1/14\", y: 30},\r\n          {x: \"1/15\", y: 20},\r\n          {x: \"1/16\", y: 30},\r\n          {x: \"1/17\", y: 20},\r\n          {x: \"1/18\", y: 10},\r\n          {x: \"1/19\", y: 30},\r\n          {x: \"1/20\", y: 0},\r\n          {x: \"1/21\", y: 6},\r\n          {x: \"1/22\", y: 20},\r\n          {x: \"1/23\", y: 30},\r\n          {x: \"1/24\", y: 50},\r\n          {x: \"1/25\", y: 40},\r\n          {x: \"1/26\", y: 9},\r\n          {x: \"1/27\", y: 20},\r\n          {x: \"1/28\", y: 10},\r\n          {x: \"1/29\", y: 44},\r\n          {x: \"1/30\", y: 43},\r\n          {x: \"1/31\", y: 9},\r\n        ]\r\n      },\r\n      {\r\n        name: 'Facebook',\r\n        catagory: 'social',\r\n        data: [\r\n          {x: \"1/1\", y: -9},\r\n          {x: \"1/2\", y: 43},\r\n          {x: \"1/3\", y: 44},\r\n          {x: \"1/4\", y: 50},\r\n          {x: \"1/5\", y: -30},\r\n          {x: \"1/6\", y: 10},\r\n          {x: \"1/7\", y: -5},\r\n          {x: \"1/8\", y: 15},\r\n          {x: \"1/9\", y: 40},\r\n          {x: \"1/10\", y: -8},\r\n          {x: \"1/11\", y: -50},\r\n          {x: \"1/12\", y: 12},\r\n          {x: \"1/13\", y: 56},\r\n          {x: \"1/14\", y: 18},\r\n          {x: \"1/15\", y: 28},\r\n          {x: \"1/16\", y: 33},\r\n          {x: \"1/17\", y: 26},\r\n          {x: \"1/18\", y: 17},\r\n          {x: \"1/19\", y: 31},\r\n          {x: \"1/20\", y: -10},\r\n          {x: \"1/21\", y: 16},\r\n          {x: \"1/22\", y: 27},\r\n          {x: \"1/23\", y: 0},\r\n          {x: \"1/24\", y: 7},\r\n          {x: \"1/25\", y: 6},\r\n          {x: \"1/26\", y: 3},\r\n          {x: \"1/27\", y: -10},\r\n          {x: \"1/28\", y: 9},\r\n          {x: \"1/29\", y: 5},\r\n          {x: \"1/30\", y: 27},\r\n          {x: \"1/31\", y: 11},\r\n        ]\r\n      },\r\n      {\r\n        name: 'Instagram',\r\n        catagory: 'social',\r\n        data: [\r\n          {x: \"1/1\", y: -30},\r\n          {x: \"1/2\", y: 10},\r\n          {x: \"1/3\", y: 40},\r\n          {x: \"1/4\", y: 55},\r\n          {x: \"1/5\", y: -20},\r\n          {x: \"1/6\", y: 30},\r\n          {x: \"1/7\", y: -10},\r\n          {x: \"1/8\", y: 5},\r\n          {x: \"1/9\", y: 20},\r\n          {x: \"1/10\", y: 40},\r\n          {x: \"1/11\", y: -5},\r\n          {x: \"1/12\", y: 10},\r\n          {x: \"1/13\", y: 50},\r\n          {x: \"1/14\", y: 30},\r\n          {x: \"1/15\", y: 20},\r\n          {x: \"1/16\", y: 30},\r\n          {x: \"1/17\", y: 20},\r\n          {x: \"1/18\", y: 10},\r\n          {x: \"1/19\", y: 30},\r\n          {x: \"1/20\", y: 0},\r\n          {x: \"1/21\", y: 6},\r\n          {x: \"1/22\", y: 20},\r\n          {x: \"1/23\", y: 30},\r\n          {x: \"1/24\", y: 50},\r\n          {x: \"1/25\", y: 40},\r\n          {x: \"1/26\", y: 9},\r\n          {x: \"1/27\", y: 20},\r\n          {x: \"1/28\", y: 10},\r\n          {x: \"1/29\", y: 44},\r\n          {x: \"1/30\", y: 43},\r\n          {x: \"1/31\", y: 9},\r\n        ]\r\n      },\r\n      {\r\n        name: 'Naver Blog',\r\n        catagory: 'social',\r\n        data: [\r\n          {x: \"1/1\", y: -9},\r\n          {x: \"1/2\", y: 43},\r\n          {x: \"1/3\", y: 44},\r\n          {x: \"1/4\", y: 50},\r\n          {x: \"1/5\", y: -30},\r\n          {x: \"1/6\", y: 10},\r\n          {x: \"1/7\", y: -5},\r\n          {x: \"1/8\", y: 15},\r\n          {x: \"1/9\", y: 40},\r\n          {x: \"1/10\", y: -8},\r\n          {x: \"1/11\", y: -50},\r\n          {x: \"1/12\", y: 12},\r\n          {x: \"1/13\", y: 56},\r\n          {x: \"1/14\", y: 18},\r\n          {x: \"1/15\", y: 28},\r\n          {x: \"1/16\", y: 33},\r\n          {x: \"1/17\", y: 26},\r\n          {x: \"1/18\", y: 17},\r\n          {x: \"1/19\", y: 31},\r\n          {x: \"1/20\", y: -10},\r\n          {x: \"1/21\", y: 16},\r\n          {x: \"1/22\", y: 27},\r\n          {x: \"1/23\", y: 0},\r\n          {x: \"1/24\", y: 7},\r\n          {x: \"1/25\", y: 6},\r\n          {x: \"1/26\", y: 3},\r\n          {x: \"1/27\", y: -10},\r\n          {x: \"1/28\", y: 9},\r\n          {x: \"1/29\", y: 5},\r\n          {x: \"1/30\", y: 27},\r\n          {x: \"1/31\", y: 11},\r\n        ]\r\n      },\r\n      {\r\n        name: 'Naver News',\r\n        catagory: 'social',\r\n        data: [\r\n          {x: \"1/1\", y: -30},\r\n          {x: \"1/2\", y: 10},\r\n          {x: \"1/3\", y: 40},\r\n          {x: \"1/4\", y: 55},\r\n          {x: \"1/5\", y: -20},\r\n          {x: \"1/6\", y: 30},\r\n          {x: \"1/7\", y: -10},\r\n          {x: \"1/8\", y: 5},\r\n          {x: \"1/9\", y: 20},\r\n          {x: \"1/10\", y: 40},\r\n          {x: \"1/11\", y: -5},\r\n          {x: \"1/12\", y: 10},\r\n          {x: \"1/13\", y: 50},\r\n          {x: \"1/14\", y: 30},\r\n          {x: \"1/15\", y: 20},\r\n          {x: \"1/16\", y: 30},\r\n          {x: \"1/17\", y: 20},\r\n          {x: \"1/18\", y: 10},\r\n          {x: \"1/19\", y: 30},\r\n          {x: \"1/20\", y: 0},\r\n          {x: \"1/21\", y: 6},\r\n          {x: \"1/22\", y: 20},\r\n          {x: \"1/23\", y: 30},\r\n          {x: \"1/24\", y: 50},\r\n          {x: \"1/25\", y: 40},\r\n          {x: \"1/26\", y: 9},\r\n          {x: \"1/27\", y: 20},\r\n          {x: \"1/28\", y: 10},\r\n          {x: \"1/29\", y: 44},\r\n          {x: \"1/30\", y: 43},\r\n          {x: \"1/31\", y: 9},\r\n        ]\r\n      },\r\n      {\r\n        name: 'Naver',\r\n        catagory: 'search volume',\r\n        data: [\r\n          {x: \"1/1\", y: -9},\r\n          {x: \"1/2\", y: 43},\r\n          {x: \"1/3\", y: 44},\r\n          {x: \"1/4\", y: 50},\r\n          {x: \"1/5\", y: -30},\r\n          {x: \"1/6\", y: 10},\r\n          {x: \"1/7\", y: -5},\r\n          {x: \"1/8\", y: 15},\r\n          {x: \"1/9\", y: 40},\r\n          {x: \"1/10\", y: -8},\r\n          {x: \"1/11\", y: -50},\r\n          {x: \"1/12\", y: 12},\r\n          {x: \"1/13\", y: 56},\r\n          {x: \"1/14\", y: 18},\r\n          {x: \"1/15\", y: 28},\r\n          {x: \"1/16\", y: 33},\r\n          {x: \"1/17\", y: 26},\r\n          {x: \"1/18\", y: 17},\r\n          {x: \"1/19\", y: 31},\r\n          {x: \"1/20\", y: -10},\r\n          {x: \"1/21\", y: 16},\r\n          {x: \"1/22\", y: 27},\r\n          {x: \"1/23\", y: 0},\r\n          {x: \"1/24\", y: 7},\r\n          {x: \"1/25\", y: 6},\r\n          {x: \"1/26\", y: 3},\r\n          {x: \"1/27\", y: -10},\r\n          {x: \"1/28\", y: 9},\r\n          {x: \"1/29\", y: 5},\r\n          {x: \"1/30\", y: 27},\r\n          {x: \"1/31\", y: 11},\r\n        ]\r\n      },\r\n      */\r\n    ],\r\n    height: 500,\r\n    options: {\r\n      grid: {\r\n        show: true,\r\n        borderColor: '#90A4AE',\r\n        yaxis: {\r\n          lines: {\r\n              show: false\r\n            }\r\n        },\r\n      },\r\n      chart: {\r\n        type: 'heatmap',\r\n        toolbar: {\r\n          show: false\r\n        }, \r\n      },\r\n      plotOptions: {\r\n          heatmap: {\r\n              shadeIntensity: 0.5,\r\n              radius: 0,\r\n              useFillColorAsStroke: true,\r\n              colorScale: {\r\n                  ranges: [{\r\n                      from: 0.00,\r\n                      to: 0.19,\r\n                      name: 'min',\r\n                      color: '#00A100'\r\n                  },\r\n                  {\r\n                      from: 0.20,\r\n                      to: 0.39,\r\n                      name: 'low',\r\n                      color: '#a6d082'\r\n                  },\r\n                  {\r\n                      from: 0.40,\r\n                      to: 0.59,\r\n                      name: 'medium',\r\n                      color: '#ffea89'\r\n                  },\r\n                  {\r\n                      from: 0.60,\r\n                      to: 0.79,\r\n                      name: 'high',\r\n                      color: '#FFB200'\r\n                  },\r\n                  {\r\n                      from: 0.80,\r\n                      to: 1.00,\r\n                      name: 'extreme',\r\n                      color: '#FF0000'\r\n                  }\r\n                  ]\r\n              }\r\n          }\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        width: 1\r\n      },\r\n      xaxis: {\r\n        position: 'top',\r\n      },\r\n      yaxis: {\r\n        show: false,\r\n      },\r\n      legend: {\r\n        show : false\r\n      }\r\n    },\r\n}\r\n\r\n\r\nexport const columeNegativeGraph = {\r\n  series: [{\r\n    name: 'Cash Flow',\r\n    data: [1.45, 5.42, 5.9, -0.42, -12.6, -18.1, -18.2, -14.16, -11.1, -6.09, 0.34, 3.88, 13.07,\r\n      5.8, 2, 7.37, 8.1, 13.57, 15.75, 17.1, 19.8, -27.03, -54.4, -47.2, -43.3, -18.6, -\r\n      48.6, -41.1, -39.6, -37.6, -29.4, -21.4,\r\n    ]\r\n  }],\r\n  height: 350,\r\n  options: {\r\n    grid: {\r\n      show: true,\r\n    },\r\n    chart: {\r\n      type: 'bar',\r\n      toolbar: {\r\n        show: false,\r\n      },\r\n      zoom: {\r\n        enabled: false\r\n      },\r\n    },\r\n    colors :['#a5a5a5'],\r\n    plotOptions: {\r\n      bar: {\r\n        colors: {\r\n          ranges: [{\r\n            from: -9999999,\r\n            to: 0,\r\n            color: '#2f5597'\r\n          }]\r\n        },\r\n        columnWidth: '50%',\r\n      }\r\n    },\r\n    dataLabels: {\r\n      enabled: true,\r\n      offsetY: 40,\r\n      style: {\r\n        fontSize: '12px',\r\n        colors: [\"#000\"]\r\n      }\r\n    },\r\n    xaxis: {\r\n      categories: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],\r\n    }, \r\n    yaxis: {\r\n      show: false\r\n    }, \r\n    \r\n  },\r\n}\r\n\r\nexport const columeNegativeGraphMix = {\r\n  series: [{\r\n    name: 'Instgram',\r\n    type: 'column',\r\n    data: [4.2, 3.9, 2.8, 2.1, 2.6, 0.9, 1.1, -1.8, -2.1, -3.3]\r\n  }, {\r\n    name: 'Coupang',\r\n    type: 'column',\r\n    data: [-0.8, 0.4, 1.1, 2.7, 3.7, 2.6, 3.6, 1.7, 3.4, 1.7]\r\n  }, {\r\n    name: 'Instgram',\r\n    type: 'line',\r\n    data: [4.2, 3.9, 2.8, 2.1, 2.6, 0.9, 1.1, -1.8, -2.1, -3.3]\r\n  }, {\r\n    name: 'Coupang',\r\n    type: 'line',\r\n    data: [-0.8, 0.4, 1.1, 2.7, 3.7, 2.6, 3.6, 1.7, 3.4, 1.7]\r\n  }\r\n],\r\n  \r\n  options: {\r\n    chart: {\r\n      height: 350,\r\n      type: 'line',\r\n      stacked: false,\r\n      toolbar: {\r\n        show: false,\r\n      },\r\n      zoom: {\r\n        enabled: false\r\n      },\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    stroke: {\r\n      width: [1, 1, 4, 4], \r\n      dashArray: [0, 0, 4, 4],  \r\n    },\r\n    xaxis: {\r\n      categories: ['휴가', '바캉스', '여름', '수영복', '비치웨어', '페이즐리', '썬캡', '비치숄', '래쉬가드', '비치가운'],\r\n      tickPlacement: 'between'\r\n    },\r\n    yaxis: {\r\n      show: false\r\n    },\r\n    tooltip: {\r\n      fixed: {\r\n        enabled: false,\r\n      },\r\n    },\r\n    legend: {\r\n      position:'top',\r\n      horizontalAlign: 'center',\r\n    }, \r\n    colors: ['#f5800b', '#ffc000','#f5800b', '#ffc000']\r\n  },\r\n}\r\n\r\nexport const gapTotalGraph = {\r\n  series: [\r\n    {\r\n      name: \"Search Volume\",\r\n      data: [0.77, 0.88, 0.99, 0.11, 0.12, 0.34, 0.56, 0.4, 0.56, 0.41, 0.42, 0.44, 0.55, 0.66, 0.77, 0.99, 0.11, 0.55, 0.11, 0.12, 0.13, 0.15, 0.46, 0.79, 0.53, 0.12, 0.86, 0.77, 0.2, 0.55, 0.44]\r\n    },\r\n    {\r\n      name: \"Social\",\r\n      data: [0.77, 0.8, 0.55, 0.22, 0.33, 0.44, 0.55,0.12, 0.13, 0.76, 0.45, 0.52, 0.01, 0.76, 0.22, 0.78, 0.65, 0.63, 0.93, 0.94, 0.82, 0.2, 0.46, 0.15, 0.76, 0.22, 0.46, 0.55, 0.34, 0.74, 0.45]\r\n    },\r\n    {\r\n      name: \"Online Shopping\",\r\n      data: [0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.4, 0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.28, 0.24,0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.77]\r\n    },\r\n  ],\r\n  height: 500,\r\n  options: {\r\n    chart: {\r\n      type: 'line',\r\n      dropShadow: {\r\n        enabled: false,\r\n        color: '#000',\r\n        top: 18,\r\n        left: 7,\r\n        blur: 10,\r\n        opacity: 0.2,\r\n      },\r\n      toolbar: {\r\n        show: false\r\n      }, \r\n      zoom: {\r\n        enabled: false,\r\n      }\r\n    },\r\n    colors: ['#555', '#a9a9a9', '#ffb800'],\r\n    dataLabels: {\r\n      enabled: true,\r\n      background: {\r\n        foreColor: '#000',\r\n        padding: 0,\r\n        borderRadius: 0,\r\n        borderColor: 'transparent',\r\n      },\r\n      style: {\r\n        fontSize: '14px',\r\n        fontFamily: 'Helvetica, Arial, sans-serif',\r\n        fontWeight: 'bold',\r\n        colors: ['transparent'],\r\n      },\r\n      offsetY: -10,\r\n    },\r\n    markers: {\r\n      size: 0,\r\n      hover: {\r\n        size: 5,\r\n        sizeOffset: 5,\r\n        fillColor: '#000',\r\n      },\r\n      discrete: [{\r\n        fillColor: '#e3e3e3',\r\n        strokeColor: '#fff',\r\n        size: 5\r\n      }]\r\n    },\r\n    stroke: {\r\n      curve: 'smooth'\r\n    },\r\n    grid: {\r\n      show: false,\r\n    },\r\n    xaxis: {\r\n      categories: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],\r\n      tickPlacement: 'between'\r\n    },\r\n    yaxis: {\r\n      show: false\r\n    }, \r\n    legend: {\r\n      position: 'top',\r\n      horizontalAlign: 'right', \r\n    }\r\n  },\r\n}\r\n\r\n\r\nexport const channelChartGraph = {\r\n  series: [\r\n    {\r\n      name: \"Instagram\",\r\n      data: [0.77, 0.88, 0.99, 0.11, 0.12, 0.34, 0.56, 0.4, 0.56, 0.41, 0.42, 0.44, 0.55, 0.66, 0.77, 0.99, 0.11, 0.55, 0.11, 0.12, 0.13, 0.15, 0.46, 0.79, 0.53, 0.12, 0.86, 0.77, 0.2, 0.55, 0.44]\r\n    },\r\n    {\r\n      name: \"Coupang\",\r\n      data: [0.77, 0.8, 0.55, 0.22, 0.33, 0.44, 0.55,0.12, 0.13, 0.76, 0.45, 0.52, 0.01, 0.76, 0.22, 0.78, 0.65, 0.63, 0.93, 0.94, 0.82, 0.2, 0.46, 0.15, 0.76, 0.22, 0.46, 0.55, 0.34, 0.74, 0.45]\r\n    },\r\n  ],\r\n  height: 330,\r\n  options: {\r\n    chart: {\r\n      type: 'line',\r\n      dropShadow: {\r\n        enabled: false,\r\n        color: '#000',\r\n        top: 18,\r\n        left: 7,\r\n        blur: 10,\r\n        opacity: 0.2,\r\n      },\r\n      toolbar: {\r\n        show: false\r\n      }, \r\n      zoom: {\r\n        enabled: false,\r\n      }\r\n    },\r\n    colors: ['#555', '#a9a9a9'],\r\n    dataLabels: {\r\n      enabled: true,\r\n      background: {\r\n        foreColor: '#000',\r\n        padding: 0,\r\n        borderRadius: 0,\r\n        borderColor: 'transparent',\r\n      },\r\n      style: {\r\n        fontSize: '14px',\r\n        fontFamily: 'Helvetica, Arial, sans-serif',\r\n        fontWeight: 'bold',\r\n        colors: ['transparent'],\r\n      },\r\n      offsetY: -10,\r\n    },\r\n    markers: {\r\n      size: 0,\r\n      hover: {\r\n        size: 5,\r\n        sizeOffset: 5,\r\n        fillColor: '#000',\r\n      },\r\n      discrete: [{\r\n        fillColor: '#e3e3e3',\r\n        strokeColor: '#fff',\r\n        size: 5\r\n      }]\r\n    },\r\n    stroke: {\r\n      curve: 'smooth'\r\n    },\r\n    grid: {\r\n      show: false,\r\n    },\r\n    xaxis: {\r\n      categories: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],\r\n      tickPlacement: 'between'\r\n    },\r\n    yaxis: {\r\n      show: false\r\n    }, \r\n    legend: {\r\n      position: 'top',\r\n      horizontalAlign: 'right', \r\n    }\r\n  },\r\n}\r\n\r\n\r\nexport const gapChartGraph = {\r\n  series: [\r\n    {\r\n      name: \"Coupang\",\r\n      data: [0.77, 0.8, 0.55, 0.22, 0.33, 0.44, 0.55,0.12, 0.13, 0.76, 0.45, 0.52, 0.01, 0.76, 0.22, 0.78, 0.65, 0.63, 0.93, 0.94, 0.82, 0.2, 0.46, 0.15, 0.76, 0.22, 0.46, 0.55, 0.34, 0.74, 0.45]\r\n    },\r\n  ],\r\n  height: 330,\r\n  options: {\r\n    chart: {\r\n      type: 'line',\r\n      dropShadow: {\r\n        enabled: false,\r\n        color: '#000',\r\n        top: 18,\r\n        left: 7,\r\n        blur: 10,\r\n        opacity: 0.2,\r\n      },\r\n      toolbar: {\r\n        show: false\r\n      }, \r\n      zoom: {\r\n        enabled: false,\r\n      }\r\n    },\r\n    colors: ['#ee843b'],\r\n    dataLabels: {\r\n      enabled: true,\r\n      background: {\r\n        foreColor: '#000',\r\n        padding: 0,\r\n        borderRadius: 0,\r\n        borderColor: 'transparent',\r\n      },\r\n      style: {\r\n        fontSize: '14px',\r\n        fontFamily: 'Helvetica, Arial, sans-serif',\r\n        fontWeight: 'bold',\r\n        colors: ['transparent'],\r\n      },\r\n      offsetY: -10,\r\n    },\r\n    markers: {\r\n      size: 0,\r\n      hover: {\r\n        size: 5,\r\n        sizeOffset: 5,\r\n        fillColor: '#000',\r\n      },\r\n      discrete: [{\r\n        fillColor: '#e3e3e3',\r\n        strokeColor: '#fff',\r\n        size: 5\r\n      }]\r\n    },\r\n    stroke: {\r\n      curve: 'smooth'\r\n    },\r\n    grid: {\r\n      show: false,\r\n    },\r\n    xaxis: {\r\n      categories: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],\r\n      tickPlacement: 'between'\r\n    },\r\n    yaxis: {\r\n      show: false\r\n    }, \r\n    legend: {\r\n      position: 'top',\r\n      horizontalAlign: 'right', \r\n    }\r\n  },\r\n}","C:\\tagons\\src\\containers\\pages\\ActiveKeyword.js",[],"C:\\tagons\\src\\data\\products.js",[],"C:\\tagons\\src\\components\\DatatablePagination.js",[],"C:\\tagons\\src\\containers\\pages\\RelationImage.js",["536"],"import React , { useState , useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nconst RelationImage = (props) =>  {\r\n  const [thumbList , setThumbList] = useState([]);\r\n  const store = useSelector(state => state.startApp);\r\n  const store2 = useSelector(state => state.industryApp);\r\n  useEffect(() => {\r\n    // console.log('RelationImage',JSON.stringify(store2.iPfactorGiRelatedwords));\r\n    if (store2.iPfactorGiRelatedwords === undefined  || store2.iPfactorGiRelatedwords === null || store2.iPfactorGiRelatedwords === \"\" || JSON.stringify(store2.iPfactorGiRelatedword) === \"{}\") {\r\n      setThumbList([]);\r\n    }\r\n    else{\r\n       setThumbList(store2.iPfactorGiRelatedwords.Data);\r\n    }\r\n    \r\n  } , [store2.iPfactorGiRelatedwords]);\r\n  return (\r\n    <>\r\n      {!thumbList || thumbList.length === 0  ? <> </> : thumbList.map((item,index) => {\r\n        return (\r\n          <div key={index} >\r\n            <p style={{ color: item.clickColor }}>{item.RelatedWord}</p>\r\n            <a href={item.SiteURL} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <img\r\n              className=\"img-fluid border-radius\"\r\n              src={item.ImageURL}\r\n              alt=\"thumbnail\"\r\n            />\r\n             </a>\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RelationImage;\r\n","C:\\tagons\\src\\views\\app\\prime\\index.js",[],"C:\\tagons\\src\\views\\app\\prime\\Prime.js",["537","538","539","540"],"/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport React from 'react';\r\nimport { Row, Card, CardBody, Form, Button, FormGroup } from 'reactstrap';\r\nimport { Formik, Field } from 'formik';\r\nimport DatePicker from 'react-datepicker';\r\nimport { ko } from \"date-fns/esm/locale\";\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\nimport CompareBar from '../../../components/charts/CompareBar';\r\nimport CompareLine from '../../../components/charts/CompareLine';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport ChannelButton from '../../../components/applications/ChannelButton'\r\nimport { login, UserInfo, logout } from '../../../services/LoginService';\r\nimport axios from 'axios';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass Prime extends React.Component {\r\n  constructor(props) {\r\n    super(props); // React.Component의 생성자 메소드를 먼저 실행\r\n    let date1 = new Date();\r\n    let date2 = new Date();\r\n    let loginYN = (UserInfo() !== null);\r\n    let userData = UserInfo();\r\n    date1.setDate(date1.getDate() - 9);\r\n    date2.setDate(date2.getDate() - 2);\r\n\r\n    this.state = {\r\n      barChart : {\r\n        options: {\r\n          chart: {\r\n            height: 350,\r\n            type: 'bar',\r\n            toolbar: {\r\n              show: false\r\n            }\r\n          },\r\n          colors: ['#8faadc' ,'#fb9874'],\r\n          plotOptions: {\r\n            bar: {\r\n              columnWidth: '45%',\r\n              distributed: true,\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          legend: {\r\n            show: false\r\n          },\r\n          grid: {\r\n            yaxis: {\r\n              lines: {\r\n                show: false\r\n              }\r\n            },\r\n          },\r\n          xaxis: {\r\n            categories: ['Past', 'Present'],\r\n            labels: {\r\n              style: {\r\n                colors: ['#8faadc' ,'#fb9874'],\r\n                fontSize: '12px'\r\n              }\r\n            },\r\n            title : {\r\n              text : 'Period',\r\n              offsetX: 100,\r\n              offsetY: 0,\r\n              style: {\r\n                color: undefined,\r\n                fontSize: '14px',\r\n                fontFamily: 'Helvetica, Arial, sans-serif',\r\n                fontWeight: 600,\r\n                cssClass: 'apexcharts-xaxis-title',\r\n              },\r\n            }\r\n          },\r\n          yaxis: {\r\n            labels: {\r\n              formatter: function(val, index) {\r\n                return '';\r\n              }\r\n            },\r\n            title : {\r\n              text : 'Post',\r\n              offsetX: 0,\r\n              offsetY: -110,\r\n              style: {\r\n                color: undefined,\r\n                fontSize: '14px',\r\n                fontFamily: 'Helvetica, Arial, sans-serif',\r\n                fontWeight: 600,\r\n                cssClass: 'apexcharts-xaxis-title',\r\n              },\r\n            }\r\n          }\r\n        },\r\n      },\r\n      \r\n      startDate: date1,\r\n      endDate: date2,\r\n      activeId: 0, \r\n      searchBtnClick : false ,\r\n      searchStart : false ,\r\n      keyWordtext :'' ,\r\n      searchCondition : {} ,\r\n      loginBefore : loginYN ,\r\n      userInfo : userData ,\r\n      indiCont : [\r\n                  {id: 1, title :  'Key-Rank.', count: '-'},\r\n                  {id: 2, title :  'Click', count: '-'},\r\n                  {id: 3, title :  'Social Buzz', count: '-'},\r\n                  {id: 4, title :  'Num of Product', count: '-'},\r\n                  {id: 5, title :  'Num of Conversion', count: '-'},\r\n                ] , \r\n      chartDataArray : [] ,\r\n    };\r\n  }\r\n\r\n  ChangeStartDate = (e) => { \r\n    this.setState({  \r\n      startDate: e,\r\n    });\r\n  };  \r\n  \r\n  ChangeEndDate = (e) => { \r\n    this.setState({  \r\n      endDate: e\r\n    });  \r\n  }; \r\n\r\n  SearchClick = (e) => {\r\n    console.log('SearchClick !!');\r\n    this.setState({  \r\n      searchBtnClick: true\r\n    });\r\n    \r\n  }\r\n\r\n  render() {\r\n\r\n    const statesItems = this.state;\r\n\r\n    const keyChartData = [\r\n      {id: 1, title: 'Post', count: 1000, series: [{data: [17, 15]}]},\r\n      {id: 2, title: 'Comment', count: 2000, series: [{data: [17, 15]}]},\r\n      {id: 3, title: 'Positive', count: 3000, series: [{data: [17, 15]}], class: 'blue'},\r\n      {id: 4, title: 'Negative', count: 4000, series: [{data: [17, 15]}], class: 'red'},\r\n    ]\r\n\r\n    const clickChartData = [\r\n      {id: 1, title: 'Buzz', count: 1000,series: [{data: [17, 15]}]},\r\n      {id: 2, title: 'Product', count: 2000,series: [{data: [17, 15]}]},\r\n      {id: 3, title: 'Conversion', count: 3000,series: [{data: [17, 15]}], class: 'blue'},\r\n    ]\r\n\r\n    const socialChartData = [\r\n      {id: 1, title: 'Post', count: 1000,series: [{data: [17, 15]}]},\r\n      {id: 2, title: 'Comment', count: 2000,series: [{data: [17, 15]}]},\r\n      {id: 3, title: 'Positive', count: 3000,series: [{data: [17, 15]}], class: 'blue'},\r\n      {id: 4, title: 'Negative', count: 3000,series: [{data: [17, 15]}], class: 'red'},\r\n    ]\r\n\r\n    const productChartData = [\r\n      {id: 1, title: 'Product', count: 1000,series: [{data: [17, 15]}]},\r\n      {id: 2, title: 'Review', count: 2000,series: [{data: [17, 15]}]},\r\n    ]\r\n\r\n    const converChartData = [\r\n      {id: 1, title: 'User', count: 1000,series: [{data: [17, 15]}]},\r\n      {id: 2, title: 'Session', count: 1000,series: [{data: [17, 15]}]},\r\n      {id: 3, title: 'Conver-sion', count: 1000,series: [{data: [17, 15]}], class: 'blue'},\r\n      {id: 4, title: 'Bounce', count: 1000,series: [{data: [17, 15]}], class: 'red'},\r\n    ]\r\n    \r\n    const genderChartData = {\r\n      series: [\r\n            {name: 'Male',  data: [45, 10]}, \r\n            {name: 'Female', data: [21, 50]}\r\n        ],\r\n        options: {\r\n          chart: {\r\n            height: 350,\r\n            type: 'line',\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            }\r\n          },\r\n          colors: ['#f69200', '#000'], \r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: 'straight'\r\n          },\r\n          xaxis: {\r\n            categories: ['Male', 'Female'],\r\n            tickPlacement: 'between'\r\n          },\r\n          legend: {\r\n            show: false\r\n          },\r\n        },\r\n        areaTitle : 'Gender'\r\n    }\r\n\r\n    const ageChartData = {\r\n      series: [\r\n            {name: 'Search',  data: [0.45, 0.1, 0.51, 0.94, 0.23, 0.65]}, \r\n            {name: 'Google Analyitcs', data: [0.21, 0.5, 0.45, 0.1, 0.51, 0.23,]}\r\n        ],\r\n        options: {\r\n          chart: {\r\n            height: 350,\r\n            type: 'line',\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            }\r\n          },\r\n          colors: ['#ea6910', '#000'], \r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: 'smooth'\r\n          },\r\n          xaxis: {\r\n            categories: ['10s', '20s', '30s', '40s', '50s', '60s+'],\r\n            tickPlacement: 'between'\r\n          },\r\n          legend: {\r\n            position: 'top'\r\n          },\r\n        },\r\n        areaTitle : 'Ages'\r\n    }\r\n\r\n    const deviceChartData = {\r\n      series: [\r\n            {name: 'PC',  data: [45, 10]}, \r\n            {name: 'Mobile', data: [21, 50]}\r\n        ],\r\n        options: {\r\n          chart: {\r\n            height: 350,\r\n            type: 'line',\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            }\r\n          },\r\n          colors: ['#f69200', '#000'], \r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: 'straight'\r\n          },\r\n          xaxis: {\r\n            categories: ['PC', 'Mobile'],\r\n            tickPlacement: 'between'\r\n          },\r\n          legend: {\r\n            show: false\r\n          }\r\n        },\r\n        areaTitle : 'Device'\r\n    }\r\n    // Search Flag Set \r\n    const setSearchFlag = (flag) => {\r\n      this.setState({  \r\n        searchStart : flag , \r\n      });\r\n    }\r\n    // get Chart Data\r\n    const getChartData = (clickId) => {    \r\n      var callUrl = \"\";\r\n      var cChartlist = []; \r\n      var cChartData = [];  \r\n      var chartData = {};\r\n      if (clickId === 1){ // Key-Rank\r\n        console.log('Key-Rank 아무것도 안한다.');\r\n        callUrl = \"\";\r\n      }\r\n      else if (clickId === 2){ // Click\r\n        callUrl = \"/prime/GetState_Total_Indicator_Click\";\r\n      }\r\n      else if (clickId === 3){ // Social Buzz\r\n        callUrl = \"/prime/GetState_Total_Indicator_SocialBuzz\";\r\n      }\r\n      else if (clickId === 4){ // Num of Product\r\n        callUrl = \"/prime/GetState_Total_Indicator_NumofProduct\";\r\n      }\r\n      else if (clickId === 5){ // Num of Conversion\r\n        callUrl = \"/prime/GetState_Total_Indicator_NumofConversion\";\r\n      }\r\n      \r\n      if (callUrl !== \"\"){\r\n        axios.post(callUrl,statesItems.searchCondition)\r\n        .then((response) => {\r\n            if (response.data.ErrorCode === 'OK'){    \r\n              let retJson = JSON.stringify(response.data);\r\n              if (retJson.indexOf(\"Data1\") !== -1){\r\n                chartData = {id: 1, title: response.data.Data1.Indicator_Name, count: response.data.Data1.Indicator_Value, series: [{data: [response.data.Data1.Past, response.data.Data1.Present]}]} ;\r\n                cChartData.push(chartData);\r\n              }\r\n              chartData = {};\r\n              if (retJson.indexOf(\"Data2\") !== -1){\r\n                chartData = {id: 2, title: response.data.Data2.Indicator_Name, count: response.data.Data2.Indicator_Value, series: [{data: [response.data.Data2.Past, response.data.Data2.Present]}]} ;\r\n                cChartData.push(chartData);\r\n              }\r\n              chartData = {};\r\n              if (retJson.indexOf(\"Data3\") !== -1){\r\n                if (response.data.Data3.Indicator_Name === 'Positive'){\r\n                  chartData = {id: 3, title: response.data.Data3.Indicator_Name, count: response.data.Data3.Indicator_Value, series: [{data: [response.data.Data3.Past, response.data.Data3.Present]}], class: 'blue'} ;\r\n                }\r\n                else{\r\n                  chartData = {id: 3, title: response.data.Data3.Indicator_Name, count: response.data.Data3.Indicator_Value, series: [{data: [response.data.Data3.Past, response.data.Data3.Present]}]} ;\r\n                }\r\n                \r\n                cChartData.push(chartData);\r\n              }\r\n              chartData = {};\r\n              if (retJson.indexOf(\"Data4\") !== -1){\r\n                if (response.data.Data4.Indicator_Name === 'Negative'){\r\n                  chartData = {id: 4, title: response.data.Data4.Indicator_Name, count: response.data.Data4.Indicator_Value, series: [{data: [response.data.Data4.Past, response.data.Data4.Present]}], class: 'red'} ;\r\n                }\r\n                else{\r\n                  chartData = {id: 4, title: response.data.Data4.Indicator_Name, count: response.data.Data4.Indicator_Value, series: [{data: [response.data.Data4.Past, response.data.Data4.Present]}]} ;\r\n                }\r\n                \r\n                cChartData.push(chartData);\r\n              }\r\n              cChartlist.push(cChartData);\r\n              statesItems.chartDataArray = cChartData;\r\n              this.setState({  \r\n                chartDataArray: [statesItems.chartDataArray,statesItems.chartDataArray,statesItems.chartDataArray,statesItems.chartDataArray,statesItems.chartDataArray] ,\r\n              });\r\n              console.log('chartDataArray - ' , statesItems.chartDataArray,cChartData);\r\n            }\r\n            else{\r\n              console.log('prime GetState4TrendIndicator click error!');\r\n            }\r\n            \r\n            setSearchFlag(false);\r\n            \r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            setSearchFlag(false);\r\n        });\r\n        \r\n      } \r\n\r\n    }\r\n    // 4-Trend indidcator\r\n    const getGetState4TrendIndicator = (param) =>{\r\n      axios.post(\"/prime/GetState_4_Trend_Indicator\",param)\r\n      .then((response) => {\r\n          if (response.data.ErrorCode === 'OK'){    \r\n            //console.log('prime getGetState4TrendIndicator - ' , response);\r\n            statesItems.indiCont[0].count = response.data.KeyRank;//Key-Rank.\r\n            statesItems.indiCont[1].count = response.data.Click;//Click\r\n            statesItems.indiCont[2].count = response.data.SocialBuzz;//Social Buzz\r\n            statesItems.indiCont[3].count = response.data.Num_Of_Product;//Num of Product\r\n            statesItems.indiCont[4].count = response.data.Num_Of_Conversion;//Num of Conversion\r\n            this.setState({  \r\n              indiCont: statesItems.indiCont,\r\n            });\r\n            console.log('prime getGetState4TrendIndicator set - ' , statesItems.indiCont);\r\n          }\r\n          else{\r\n            console.log('prime getGetState4TrendIndicator error');\r\n          }\r\n          setSearchFlag(false);\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);\r\n          setSearchFlag(false);\r\n      });\r\n\r\n    }\r\n    //4-Trend indidcator Click Event \r\n    const listClickEvt = (evt) => {\r\n      const getNum = Number(evt.currentTarget.className.replace('item-',''));\r\n      if (getNum > 1){\r\n        this.setState({\r\n          activeId : getNum ,\r\n        });\r\n        getChartData(getNum);\r\n        \r\n      }\r\n      \r\n    }\r\n    // 날짜 포맷\r\n    const dateString = (dateValue) => {\r\n      let retStr = '';\r\n      //Year\r\n      retStr = retStr.concat(dateValue.getFullYear());\r\n      //Month\r\n      if(dateValue.getMonth() < 10) {\r\n          retStr = retStr.concat('-0', dateValue.getMonth() + 1);\r\n      }\r\n      else {\r\n          retStr = retStr.concat('-', dateValue.getMonth() + 1);\r\n      }\r\n      //Date\r\n      if(dateValue.getDate() < 10) {\r\n          retStr = retStr.concat('-0', dateValue.getDate());\r\n      }\r\n      else {\r\n          retStr = retStr.concat('-', dateValue.getDate());\r\n      }\r\n      return retStr;\r\n    }\r\n    const chartDataArray = [keyChartData, clickChartData, socialChartData, productChartData, converChartData];\r\n    // const linechartDataArray = [genderChartData , ageChartData, deviceChartData];\r\n    const searchStart = (searchChannel) =>{\r\n      var searchCondition = {} ;\r\n      var ChannelUpper = [];\r\n      var ChannelLower = [];\r\n      this.setState({  \r\n        searchBtnClick: false\r\n      });\r\n      this.setState({  \r\n        searchCondition: {} ,\r\n        searchStart : false , \r\n      });\r\n      if (searchChannel.length > 0 ){\r\n         searchChannel.forEach(function(item,idx){\r\n           ChannelUpper.push(item.type);\r\n           ChannelLower.push(item.name);\r\n         });\r\n      }\r\n      else{\r\n        console.log('채널 선택 없음');\r\n      }\r\n      searchCondition.FromDate = dateString(statesItems.startDate); \r\n      searchCondition.ToDate = dateString(statesItems.endDate); \r\n      searchCondition.Period_Unit = \"Daily\";\r\n      searchCondition.Channel_Upper = ChannelUpper;\r\n      searchCondition.Channel_Lower = ChannelLower;\r\n      searchCondition.Keyword = statesItems.keyWordtext;\r\n      searchCondition.Company = statesItems.userInfo.CompanyName;\r\n      searchCondition.CompanyCode = statesItems.userInfo.CompanyCode;\r\n      // console.log('searchCondition',searchCondition);\r\n      this.setState({  \r\n        searchCondition: searchCondition ,\r\n        searchStart : true , \r\n      });\r\n      getGetState4TrendIndicator(statesItems.searchCondition);\r\n    };  \r\n    const validateKeyword = (value) => {\r\n      let error;\r\n      if (!statesItems.keyWordtext) {\r\n        error = 'No Keywords';\r\n      } \r\n      return error;\r\n    };\r\n\r\n    const onKeywordChange = (e) =>{\r\n      this.setState({\r\n        keyWordtext : e.target.value\r\n      }); \r\n    };\r\n\r\n    const onKeywordpress = (e) =>{\r\n      if (e.keyCode === 13){\r\n        e.preventDefault();\r\n        // 여기서 Search 로 이동\r\n      }\r\n    };\r\n\r\n    // eslint-disable-next-line prefer-const\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Form className=\"check-box-wrap multi\">\r\n                  <div className=\"tbl-vertical-heading\">\r\n                    <table>\r\n                      <tbody>\r\n                        <tr>\r\n                          {/* vertical유형의 테이블 th 값은 인라인 스타일로 지정 바랍니다. */}\r\n                          <th style={{ width:'15%' }}>Period</th>\r\n                          <td style={{ width:'85%' }} colSpan=\"3\">\r\n                            <div className=\"date-picker-wrap\">\r\n                              <DatePicker className=\"form-control\"  \r\n                              locale={ko}\r\n                              dateFormat=\"yyyy.MM.dd\"\r\n                              selected={statesItems.startDate} \r\n                              selectsStart\r\n                              startDate={statesItems.startDate}\r\n                              endDate={statesItems.endDate}\r\n                              onChange={this.ChangeStartDate}  \r\n                              placeholderText=\"Select Time\" \r\n                              /> \r\n                              <span className=\"cal-range\"> ~ </span>\r\n                              <DatePicker className=\"form-control\"  \r\n                              locale={ko}\r\n                              dateFormat=\"yyyy.MM.dd\"\r\n                              selected={statesItems.endDate}\r\n                              selectsEnd\r\n                              startDate={statesItems.startDate}\r\n                              endDate={statesItems.endDate}\r\n                              onChange={this.ChangeEndDate}  \r\n                              placeholderText=\"Select Time\" \r\n                              /> \r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th style={{ width:'15%' }}>Channel</th>\r\n                          <td style={{ width:'85%' }}>\r\n                            <ChannelButton searchStart={searchStart} searchBtnClick={statesItems.searchBtnClick}/>                             \r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th style={{ width:'15%' }}>Keywords</th>\r\n                          <td style={{ width:'85%' }}>\r\n                            <Formik\r\n                              initialValues={{\r\n                                keyword: '',\r\n                              }}\r\n                              // onSubmit={onSubmit}\r\n                            >\r\n                            {({ errors, touched }) => (\r\n                              <FormGroup className=\"keyword-area\">\r\n                                <Field\r\n                                  className=\"form-control\"\r\n                                  name=\"keyword\"\r\n                                  value={statesItems.keyWordtext}\r\n                                  onChange={onKeywordChange}\r\n                                  onKeyDown={onKeywordpress}\r\n                                  validate={validateKeyword}\r\n                                />\r\n                                {errors.keyword && touched.keyword && (\r\n                                  <div className=\"d-block noti-text\">\r\n                                    {errors.keyword}\r\n                                  </div>\r\n                                )}\r\n                              </FormGroup>\r\n                            )}\r\n                            </Formik>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <Button className=\"btn-xl mt-4\" color=\"gray\" onClick={this.SearchClick}>\r\n                      ENTER\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className='box-title'>\r\n                  <h2>4-Trend indidcator</h2>\r\n                </div>\r\n                <div className='indi-wrap'>\r\n                  <ul className='lst-indi'>\r\n                    {statesItems.indiCont.map((item, idx) => {\r\n                      const countNumberDot = item.count.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n                      return (\r\n                        // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\r\n                        <li \r\n                          // eslint-disable-next-line react/no-array-index-key\r\n                          key={idx} \r\n                          onClick={listClickEvt} // 여기서 클릭 이벤트 없애자\r\n                          className={`item-${item.id} ${statesItems.activeId === Number(item.id) ? ' active' : \"\"}` }\r\n                        >\r\n                          <div>\r\n                            <p>\r\n                              <span className='title'>{item.title}</span>\r\n                              <span className='count'>{countNumberDot}</span>\r\n                            </p>\r\n                          </div>\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                  <p className='cont-noti'>* 각 수치는 기간 내 일평균 값을 의미</p>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className='box-title'>\r\n                  <h2>Total Indicator</h2>\r\n                </div>\r\n                <div className='graph-area bar'>\r\n                  {/* <ul className='item-1 graph-list' > */}\r\n                  {statesItems.chartDataArray.map((list , indx) => {\r\n                    return(\r\n                      <ul \r\n                        // eslint-disable-next-line react/no-array-index-key\r\n                        key={indx} \r\n                        className={`item-${indx} graph-list`} style={statesItems.activeId === Number(`${indx + 1}`) ? {display : 'flex'} : {display : 'none'}}>\r\n                        {list.map((item, idx) => {\r\n                          const countNumberDot = item.count.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n                          return(\r\n                            <li \r\n                              // eslint-disable-next-line react/no-array-index-key\r\n                              key={idx}\r\n                            >\r\n                              <div className='count-area'>\r\n                                <p className='area-title'>{item.title}</p>\r\n                                <p className={`count ${item.class}`}>{countNumberDot}</p>\r\n                              </div>\r\n                              <div className='chart-area'>\r\n                                <div id=\"chart\">\r\n                                  <CompareBar options={statesItems.barChart.options} series={item.series} type=\"bar\" height={350} />\r\n                                </div>\r\n                              </div>\r\n                            </li>\r\n                          );\r\n                        })}\r\n                      </ul>\r\n                    )\r\n                  })}\r\n                  <p className='cont-noti'>* 각 수치는 기간 내 총 합계를 의미</p>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n       {/* \r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className='box-title'>\r\n                  <h2>Demographics Comparison</h2>\r\n                </div>\r\n                <div className='graph-area line'>\r\n                  <ul className='graph-list'>\r\n                    {linechartDataArray.map((item, idx)=>{\r\n                      return(\r\n                        // eslint-disable-next-line react/no-array-index-key\r\n                        <li key={idx} className={idx === 1 ? 'center_graph' : ''}>\r\n                          <div className='chart-area'>\r\n                            <div id=\"chart\">\r\n                              <CompareLine options={item.options} series={item.series} type=\"line\" height={350} />\r\n                            </div>\r\n                          </div>\r\n                          <div className='txt-area'>\r\n                            <p className='area-title'>{item.areaTitle}</p>\r\n                          </div>\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                  <p className='cont-noti'>* 각 수치는 기간 내 총 비율을 의미</p>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        */}\r\n      </>\r\n    ) // render end\r\n  }\r\n}\r\n\r\nexport default Prime;\r\n","C:\\tagons\\src\\components\\applications\\ChannelButton.js",["541","542","543","544","545","546","547"],"import React, { useState , useEffect} from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport axios from 'axios';\r\n\r\nconst ChannelButton = (props) => {\r\n  const [rSelected, setRSelected] = useState(null);\r\n  const [checkSelected, setCheckSelected] = useState([]);\r\n  const [selectArray, setSelectArray] = useState([]);\r\n  const [socialDataTitle,setSocialDataTitle] = useState([]); \r\n  const [socialDataList,setSocialDataList] = useState([]); \r\n  const [onlineShopData,setOnlineShopData] = useState([]); \r\n  const [googleAnalData,setGoogleAnalData] = useState([]); \r\n\r\n  var socialData = [];\r\n  const tabTitle = ['Social', 'Online Shopping', 'Google Analytics'];\r\n \r\n\r\n  const onCheckboxBtnClick = (id, name, type) => {\r\n    const checkFunc = selectArray.findIndex((item)=> item.id === id);\r\n    // console.log('onCheckboxBtnClick 1',checkSelected, selectArray);\r\n    if (checkFunc < 0) {\r\n        selectArray.push({id, name, type});\r\n        checkSelected.push(id);\r\n    } else {\r\n        selectArray.splice(checkFunc , 1);\r\n        checkSelected.splice(checkFunc , 1);\r\n    }\r\n\r\n    setCheckSelected([...checkSelected]);\r\n    setSelectArray([...selectArray]);\r\n    // console.log('onCheckboxBtnClick 2',checkSelected, selectArray);\r\n  };\r\n    \r\n  const tagRemoveBtn = (id) =>{ \r\n    // console.log('tagRemoveBtn1',id,checkFunc,selectArray);\r\n    const checkFunc = selectArray.findIndex((item)=> item.id === id);\r\n    // console.log('tagRemoveBtn2',id,checkFunc,selectArray,checkSelected);\r\n    selectArray.splice(checkFunc , 1);\r\n    checkSelected.splice(checkFunc , 1);\r\n    setCheckSelected([...checkSelected]);\r\n    setSelectArray([...selectArray]);\r\n  }\r\n\r\n  const resetArray = (id) => {\r\n      setCheckSelected([]);\r\n      setSelectArray([]);\r\n      setRSelected(id);        \r\n  }\r\n\r\n  const setChannelSelected = (id) => {\r\n      setRSelected(id);        \r\n  }\r\n\r\n  useEffect(() => {\r\n    var OnlineShopping = [];\r\n    var Social = {};\r\n    var socialTitle = [];\r\n    var oldChannelType = '';\r\n    var allIdx = 0;\r\n    axios.post(\"/common/GetChannel_List\")\r\n    .then((response) => {\r\n        if (response.data.ErrorCode === 'OK'){    \r\n          response.data.OnlineShopping.forEach(function(item,idx){\r\n            allIdx += 1;\r\n            OnlineShopping.push({id: allIdx, name: item.Channel , type:'Online Shopping'});\r\n          });\r\n          // console.log('OnlineShopping List', OnlineShopping);\r\n          response.data.Social.forEach(function(item,idx){\r\n            if (oldChannelType != item.ChannelType){\r\n              oldChannelType = item.ChannelType;\r\n              Social[oldChannelType] =[];\r\n            }\r\n            allIdx += 1;\r\n            Social[oldChannelType].push({id:allIdx,name:item.Channel,ChannelType:item.ChannelType,type:'Social'});\r\n          });\r\n          socialTitle = Object.keys(Social);\r\n          // console.log('SocialDataTitle List', Object.keys(Social),socialDataTitle);\r\n          socialTitle.forEach(function(item,idx){\r\n            socialData.push(Social[item]);\r\n          });\r\n          setSocialDataList(socialData);\r\n        }\r\n        else{\r\n          console.log('prime 조회조건 error');\r\n        }\r\n        setOnlineShopData(OnlineShopping);\r\n        setSocialDataTitle(socialTitle);\r\n        setSocialDataList(socialData);\r\n        allIdx += 1;\r\n        setGoogleAnalData([{id: allIdx, name: 'Google Analytics',type:'Google Analytics'}]);\r\n    })\r\n    .catch(function (error) {\r\n        console.log(error);\r\n    });\r\n\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log('socialDataTitle change', socialDataTitle,socialDataList);\r\n  }, [socialDataTitle]);\r\n  useEffect(() => {\r\n    if (props.searchBtnClick){\r\n      console.log('ChannelButton click');\r\n      props.searchStart(selectArray);\r\n    }\r\n  }, [props.searchBtnClick]);\r\n  return (\r\n    <>\r\n      <div className='channel_header'>\r\n      {tabTitle.map((title, idx) => {\r\n          return(\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            <Button key={idx} color='h_tab' onClick={() => setChannelSelected(idx)} active={rSelected === idx}>{title}</Button>\r\n          )\r\n      })}\r\n      </div>\r\n\r\n      <div className={`channel_cont ${rSelected === 0 ? ' active': ''}`}>\r\n        <table className='tbl_social'>\r\n            <tbody>\r\n                {socialDataList.map((list, idx) => {\r\n                    return(\r\n                        // eslint-disable-next-line react/no-array-index-key\r\n                        <tr key={idx}>\r\n                            <th>{socialDataTitle[idx]}</th>\r\n                            <td>\r\n                                {list.map(item => {\r\n                                    return (\r\n                                        <Button color=\"items\" key={item.id} onClick={() => onCheckboxBtnClick(item.id, item.name, item.type)} active={checkSelected.includes(item.id)}>{item.name}</Button>\r\n                                    )\r\n                                })}\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </table>\r\n        <ul className='list_tag'>\r\n            {selectArray.map((item, idx) =>{\r\n                return(\r\n                    // eslint-disable-next-line react/no-array-index-key\r\n                    <li key={idx}>{item.name} <Button close onClick={() => tagRemoveBtn(item.id)} /></li>\r\n                )\r\n            })}\r\n        </ul>\r\n      </div>\r\n\r\n      <div className={`channel_cont ${rSelected === 1 ? ' active': ''}`}>\r\n        <table className='tbl_social'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        {onlineShopData.map((item) => {\r\n                            return(\r\n                                <Button color=\"items\" key={item.id} onClick={() => onCheckboxBtnClick(item.id, item.name, item.type)} active={checkSelected.includes(item.id)}>{item.name}</Button>\r\n                            )\r\n                        })}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        \r\n        <ul className='list_tag'>\r\n            {selectArray.map((item, idx) =>{\r\n                return(\r\n                    // eslint-disable-next-line react/no-array-index-key\r\n                    <li key={idx}>{item.name} <Button close onClick={() => tagRemoveBtn(item.id)} /></li>\r\n                )\r\n            })}\r\n        </ul>\r\n      </div>\r\n\r\n      <div className={`channel_cont ${rSelected === 2 ? ' active': ''}`}>\r\n        <table className='tbl_social'>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        {googleAnalData.map((item) => {\r\n                            return(\r\n                                <Button color=\"items\" key={item.id} onClick={() => onCheckboxBtnClick(item.id, item.name, item.type)} active={checkSelected.includes(item.id)}>{item.name}</Button>\r\n                            )\r\n                        })}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <ul className='list_tag'>\r\n            {selectArray.map((item, idx) =>{\r\n                return(\r\n                    // eslint-disable-next-line react/no-array-index-key\r\n                    <li key={idx}>{item.name} <Button close onClick={() => tagRemoveBtn(item.id)} /></li>\r\n                )\r\n            })}\r\n        </ul>\r\n      </div>      \r\n    </>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default ChannelButton;","C:\\tagons\\src\\components\\charts\\CompareLine.js",[],"C:\\tagons\\src\\components\\charts\\CompareBar.js",[],"C:\\tagons\\src\\views\\app\\trend\\index.js",[],"C:\\tagons\\src\\services\\LoginService.js",[],"C:\\tagons\\src\\views\\app\\trend\\Social.js",["548","549","550","551","552","553","554","555","556","557"],"/* eslint-disable jsx-a11y/label-has-for */\r\n/* eslint-disable jsx-a11y/label-has-associated-control */\r\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\nimport React from 'react';\r\nimport { Row,\r\n     Card,\r\n     CardBody,\r\n     Form,\r\n     Button,\r\n     FormGroup,\r\n     Table , \r\n     Input \r\n    } from 'reactstrap';\r\nimport { Formik, Field } from 'formik';\r\nimport DatePicker from 'react-datepicker';\r\nimport Select from 'react-select';\r\nimport { ko } from \"date-fns/esm/locale\";\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport CompareLine from '../../../components/charts/CompareLine';\r\n// import NegativeBar from '../../../components/charts/NegativeBar';\r\n// import HeatMap from '../../../components/charts/HeatMap';\r\nimport ChannelButton from '../../../components/applications/ChannelButton'\r\nimport CustomSelectInput from '../../../components/common/CustomSelectInput';\r\nimport { login, UserInfo, logout } from '../../../services/LoginService';\r\nimport axios from 'axios';\r\n\r\nclass Social extends React.Component {\r\n    constructor(props) {\r\n      super(props); // React.Component의 생성자 메소드를 먼저 실행\r\n      let date1 = new Date();\r\n      let date2 = new Date();\r\n      let loginYN = (UserInfo() !== null);\r\n      let userData = UserInfo();\r\n      date1.setDate(date1.getDate() - 9);\r\n      date2.setDate(date2.getDate() - 2);\r\n      this.state = {\r\n        startDate: date1,\r\n        endDate: date2,\r\n        activeTab: '1',\r\n        searchBtnClick : false ,\r\n        searchStart : false , \r\n        userInfo : userData ,\r\n        keyWordtext : \"\" ,   \r\n        keywordSelected : \"\",\r\n        selectedOptionsBase : [],\r\n        keywordRankHeader :[] ,\r\n        keywordList : [] ,\r\n        // eslint-disable-next-line react/no-unused-state\r\n        selectedOptions : {}, //  label: 'Total', value: 'Total', key: 0 \r\n        // eslint-disable-next-line react/no-unused-state\r\n        checkInfo: [\r\n          { id: 1, value: \"Daily\", isChecked: true },\r\n          { id: 2, value: \"Weekly\", isChecked: false },\r\n          { id: 3, value: \"Monthly\", isChecked: false },\r\n          { id: 4, value: \"Yearly\", isChecked: false }\r\n        ],\r\n        buzzGraph : {\r\n          series: [],\r\n          height: 500,\r\n          options: {\r\n            chart: {\r\n              type: 'line',\r\n              dropShadow: {\r\n                enabled: true,\r\n                color: '#000',\r\n                top: 18,\r\n                left: 7,\r\n                blur: 10,\r\n                opacity: 0.2\r\n              },\r\n              toolbar: {\r\n                show: false\r\n              }\r\n            },\r\n            colors: ['#77B6EA', '#545454'],\r\n            dataLabels: {\r\n              enabled: true,\r\n            },\r\n            stroke: {\r\n              curve: 'smooth'\r\n            },\r\n            title: {\r\n              text: 'Average High & Low Temperature',\r\n              align: 'left'\r\n            },\r\n            grid: {\r\n              borderColor: '#e7e7e7',\r\n              row: {\r\n                colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n                opacity: 0.5\r\n              },\r\n            },\r\n            markers: {\r\n              size: 1\r\n            },\r\n            xaxis: {\r\n              categories: [],\r\n              title: {\r\n                text: ''\r\n              }\r\n            },\r\n            yaxis: {\r\n              title: {\r\n                text: 'Temperature'\r\n              },\r\n              min: 1,\r\n              max: 35\r\n            },\r\n            legend: {\r\n              position: 'top',\r\n              horizontalAlign: 'right',\r\n              floating: true,\r\n              offsetY: -25,\r\n              offsetX: -5\r\n            }\r\n          },\r\n        }, \r\n        commentGraph : {\r\n          series: [],\r\n          height: 500,\r\n          options: {\r\n            chart: {\r\n              type: 'line',\r\n              dropShadow: {\r\n                enabled: true,\r\n                color: '#000',\r\n                top: 18,\r\n                left: 7,\r\n                blur: 10,\r\n                opacity: 0.2\r\n              },\r\n              toolbar: {\r\n                show: false\r\n              }\r\n            },\r\n            colors: ['#77B6EA', '#545454'],\r\n            dataLabels: {\r\n              enabled: true,\r\n            },\r\n            stroke: {\r\n              curve: 'smooth'\r\n            },\r\n            title: {\r\n              text: 'Average High & Low Temperature',\r\n              align: 'left'\r\n            },\r\n            grid: {\r\n              borderColor: '#e7e7e7',\r\n              row: {\r\n                colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n                opacity: 0.5\r\n              },\r\n            },\r\n            markers: {\r\n              size: 1\r\n            },\r\n            xaxis: {\r\n              categories: [],\r\n              title: {\r\n                text: ''\r\n              }\r\n            },\r\n            yaxis: {\r\n              title: {\r\n                text: 'Temperature'\r\n              },\r\n              min: 1,\r\n              max: 35\r\n            },\r\n            legend: {\r\n              position: 'top',\r\n              horizontalAlign: 'right',\r\n              floating: true,\r\n              offsetY: -25,\r\n              offsetX: -5\r\n            }\r\n          },\r\n        }, \r\n        keywordGraph : {\r\n          series: [],\r\n          height: 500,\r\n          options: {\r\n            chart: {\r\n              type: 'line',\r\n              dropShadow: {\r\n                enabled: true,\r\n                color: '#000',\r\n                top: 18,\r\n                left: 7,\r\n                blur: 10,\r\n                opacity: 0.2\r\n              },\r\n              toolbar: {\r\n                show: false\r\n              }\r\n            },\r\n            colors: ['#77B6EA', '#545454'],\r\n            dataLabels: {\r\n              enabled: true,\r\n            },\r\n            stroke: {\r\n              curve: 'smooth'\r\n            },\r\n            title: {\r\n              text: 'Average High & Low Temperature',\r\n              align: 'left'\r\n            },\r\n            grid: {\r\n              borderColor: '#e7e7e7',\r\n              row: {\r\n                colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n                opacity: 0.5\r\n              },\r\n            },\r\n            markers: {\r\n              size: 1\r\n            },\r\n            xaxis: {\r\n              categories: [],\r\n              title: {\r\n                text: ''\r\n              }\r\n            },\r\n            yaxis: {\r\n              title: {\r\n                text: 'Temperature'\r\n              },\r\n              min: 1,\r\n              max: 35\r\n            },\r\n            legend: {\r\n              position: 'top',\r\n              horizontalAlign: 'right',\r\n              floating: true,\r\n              offsetY: -25,\r\n              offsetX: -5\r\n            }\r\n          },\r\n        }, \r\n      }\r\n    }\r\n\r\n    ChangeStartDate = (e) => { \r\n        this.setState({  \r\n          startDate: e,\r\n        });\r\n      };  \r\n      \r\n    ChangeEndDate = (e) => { \r\n        this.setState({  \r\n            endDate: e\r\n        });  \r\n    };\r\n    \r\n    toggle = (tab) => {\r\n        const { activeTab } = this.state;\r\n\r\n        if(activeTab !== tab){\r\n            this.setState({\r\n                activeTab : tab\r\n            })\r\n        }\r\n    }\r\n\r\n    handleOneChecked = (evt) => {\r\n      let { checkInfo } = this.state;\r\n      checkInfo.forEach(item => {\r\n        if (item.value === evt.target.value){\r\n          if (!item.isChecked ){\r\n            item.isChecked = evt.target.checked;\r\n          }         \r\n        }\r\n        else{\r\n          item.isChecked = false;\r\n        }\r\n      });\r\n      this.setState({ checkInfo });\r\n    }\r\n\r\n    generateData = (count, yrange) => {\r\n      let i = 0;\r\n      const series = [];\r\n      while (i < count) {\r\n        const x = (i + 1).toString();\r\n        const y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\r\n        series.push({\r\n          x,\r\n          y\r\n        });\r\n        // eslint-disable-next-line no-plusplus\r\n        i++;\r\n      }\r\n      // console.log(series);\r\n      return series;\r\n    }\r\n\r\n    SearchClick = (e) => {\r\n      console.log('Overview SearchClick !!');\r\n      this.setState({  \r\n        searchBtnClick: true\r\n      });\r\n      \r\n    } \r\n       \r\n    render() {\r\n        const statesItems = this.state;\r\n        /* const selectedOptionsBase = [\r\n          { label: 'Total', value: 'social_val01', key: 0 },\r\n          { label: 'Naver_news', value: 'social_val02', key: 1 },\r\n          { label: 'Naver_blog', value: 'social_val03', key: 2 },\r\n        ]; */\r\n        const setTrendChartData = (chartData, selectValue) => {\r\n\r\n          var buzzData = {};\r\n          var buzzMax = 0 ;\r\n          var commentData = {};\r\n          var commentMax = 0 ;\r\n          var buzzSeriesData = {name : selectValue.value ,\r\n                                data : [] ,};\r\n          var buzzCategoryData = [];\r\n          var commentSeriesData = {name : selectValue.value ,\r\n                                data : [] ,};\r\n          var commentCategoryData = [];\r\n          var buzzOption = {\r\n              series: [],\r\n              height: 500,\r\n              options: {\r\n                chart: {\r\n                  type: 'line',\r\n                  dropShadow: {\r\n                    enabled: true,\r\n                    color: '#000',\r\n                    top: 18,\r\n                    left: 7,\r\n                    blur: 10,\r\n                    opacity: 0.2\r\n                  },\r\n                  toolbar: {\r\n                    show: false\r\n                  }\r\n                },\r\n                colors: ['#77B6EA', '#545454'],\r\n                dataLabels: {\r\n                  enabled: true,\r\n                },\r\n                stroke: {\r\n                  curve: 'smooth'\r\n                },\r\n                title: {\r\n                  text: 'Average High & Low Temperature',\r\n                  align: 'left'\r\n                },\r\n                grid: {\r\n                  borderColor: '#e7e7e7',\r\n                  row: {\r\n                    colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n                    opacity: 0.5\r\n                  },\r\n                },\r\n                markers: {\r\n                  size: 1\r\n                },\r\n                xaxis: {\r\n                  categories: [],\r\n                  title: {\r\n                    text: ''\r\n                  }\r\n                },\r\n                yaxis: {\r\n                  title: {\r\n                    text: 'Temperature'\r\n                  },\r\n                  min: 1,\r\n                  max: 35\r\n                },\r\n                legend: {\r\n                  position: 'top',\r\n                  horizontalAlign: 'right',\r\n                  floating: true,\r\n                  offsetY: -25,\r\n                  offsetX: -5\r\n                }\r\n              },\r\n            };\r\n          var commentOption = {\r\n              series: [],\r\n              height: 500,\r\n              options: {\r\n                chart: {\r\n                  type: 'line',\r\n                  dropShadow: {\r\n                    enabled: true,\r\n                    color: '#000',\r\n                    top: 18,\r\n                    left: 7,\r\n                    blur: 10,\r\n                    opacity: 0.2\r\n                  },\r\n                  toolbar: {\r\n                    show: false\r\n                  }\r\n                },\r\n                colors: ['#77B6EA', '#545454'],\r\n                dataLabels: {\r\n                  enabled: true,\r\n                },\r\n                stroke: {\r\n                  curve: 'smooth'\r\n                },\r\n                title: {\r\n                  text: '',\r\n                  align: 'left'\r\n                },\r\n                grid: {\r\n                  borderColor: '#e7e7e7',\r\n                  row: {\r\n                    colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n                    opacity: 0.5\r\n                  },\r\n                },\r\n                markers: {\r\n                  size: 1\r\n                },\r\n                xaxis: {\r\n                  categories: [],\r\n                  title: {\r\n                    text: ''\r\n                  }\r\n                },\r\n                yaxis: {\r\n                  title: {\r\n                    text: 'Temperature'\r\n                  },\r\n                  min: 0,\r\n                  max: 35\r\n                },\r\n                legend: {\r\n                  position: 'top',\r\n                  horizontalAlign: 'right',\r\n                  floating: true,\r\n                  offsetY: -25,\r\n                  offsetX: -5\r\n                }\r\n              },\r\n            };\r\n          chartData.buzz.forEach(function(item,idx){\r\n             if (item.Channel === selectValue.value ){\r\n                buzzData = item;\r\n             }\r\n          });\r\n\r\n          chartData.comment.forEach(function(item,idx){\r\n            if (item.Channel === selectValue.value ){\r\n                commentData = item;\r\n             }\r\n          });\r\n\r\n          buzzData.Data.forEach(function(item,idx){\r\n            buzzSeriesData.data.push(Number(item.value));\r\n            buzzCategoryData.push(item.date.substring(0,10));\r\n            if (buzzMax < Number(item.value)){\r\n              buzzMax = Number(item.value);\r\n            }\r\n          });\r\n          buzzMax += 1;\r\n          commentData.Data.forEach(function(item,idx){\r\n            commentSeriesData.data.push(Number(item.value));\r\n            commentCategoryData.push(item.date.substring(0,10));\r\n            if (commentMax < Number(item.value)){\r\n              commentMax = Number(item.value);\r\n            }\r\n          });\r\n          commentMax += 1;\r\n          buzzOption.series.push(buzzSeriesData);\r\n          buzzOption.options.yaxis.max = buzzMax;\r\n          buzzOption.options.xaxis.categories = buzzCategoryData ;\r\n\r\n          commentOption.series.push(commentSeriesData);\r\n          commentOption.options.yaxis.max = commentMax;\r\n          commentOption.options.xaxis.categories = commentCategoryData;\r\n          // console.log('111' , buzzOption ,statesItems.buzzGraph);\r\n          this.setState({\r\n            buzzGraph : buzzOption ,\r\n            commentGraph : commentOption , \r\n          });\r\n\r\n        }\r\n\r\n        const getKeywordChart= (searchCondition, selectValue) => {\r\n          axios.post(\"/social/GetSocial_KeywordChart\",searchCondition)\r\n          .then((response) => {\r\n              if (response.data.ErrorCode === 'OK'){    \r\n                console.log('getKeywordChart ' , response.data);\r\n              }\r\n              else{\r\n                console.log('getKeywordChart error');\r\n              }\r\n              \r\n          })\r\n          .catch(function (error) {\r\n              console.log(error);\r\n              \r\n          });\r\n\r\n        }\r\n\r\n        const getKeywordRank = (searchCondition, selectValue) => {\r\n          var header = [];\r\n          var keywordBodyList = [];\r\n          axios.post(\"/social/GetSocial_KeywordRank\",searchCondition)\r\n          .then((response) => {\r\n              if (response.data.ErrorCode === 'OK'){    \r\n                console.log('getKeywordRank ' , response.data.Data[0] );\r\n                header.push(\"No\");\r\n                response.data.Data[0].channel.forEach(function(item,idx){\r\n                  header.push(item.name);\r\n                });\r\n                \r\n                response.data.Data.forEach(function(item,idx){\r\n                  keywordBodyList.push(item);\r\n                });\r\n                // 여기서 가져 오기\r\n                this.setState({\r\n                  keywordRankHeader : header ,\r\n                  keywordList : keywordBodyList ,\r\n                });\r\n                // getKeywordChart(searchCondition, selectValue) ;\r\n              }\r\n              else{\r\n                console.log('getKeywordRank error');\r\n              }\r\n              \r\n          })\r\n          .catch(function (error) {\r\n              console.log(error);\r\n             \r\n          });\r\n\r\n        }\r\n\r\n        const getTrendChartData = (searchCondition, selectValue) => {\r\n          axios.post(\"/social/GetSocial_TrendChart\",searchCondition)\r\n          .then((response) => {\r\n              if (response.data.ErrorCode === 'OK'){    \r\n                // console.log('getTrendChartData ' , response.data );\r\n                setTrendChartData(response.data,selectValue);\r\n                getKeywordRank(searchCondition,selectValue);\r\n              }\r\n              else{\r\n                console.log('getTrendChartData error');\r\n              }\r\n              \r\n          })\r\n          .catch(function (error) {\r\n              console.log(error);\r\n              \r\n          });\r\n\r\n        }\r\n        \r\n        \r\n        const getSocialData = (searchCondition , selectValue) => {\r\n          // console.log('getSocialData -> ' , searchCondition );  \r\n          getTrendChartData(searchCondition, selectValue);\r\n          // getKeywordRank(searchCondition);\r\n          // getKeywordChart(searchCondition);\r\n\r\n        }\r\n\r\n        const dateString = (dateValue) => {\r\n        let retStr = '';\r\n        //Year\r\n        retStr = retStr.concat(dateValue.getFullYear());\r\n        //Month\r\n        if(dateValue.getMonth() < 10) {\r\n            retStr = retStr.concat('-0', dateValue.getMonth() + 1);\r\n        }\r\n        else {\r\n            retStr = retStr.concat('-', dateValue.getMonth() + 1);\r\n        }\r\n        //Date\r\n        if(dateValue.getDate() < 10) {\r\n            retStr = retStr.concat('-0', dateValue.getDate());\r\n        }\r\n        else {\r\n            retStr = retStr.concat('-', dateValue.getDate());\r\n        }\r\n        return retStr;\r\n      }\r\n      \r\n      const setSelectedOptions = (val) => {\r\n        var channelList = [] ;\r\n        var searchCondition = statesItems.searchCondition;\r\n        //console.log(\"setSelectedOptions \" , val , searchCondition);\r\n        channelList.push(val.value);\r\n        searchCondition.Channel = channelList;\r\n        this.setState({  \r\n          selectedOptions: val ,\r\n        }); \r\n        getSocialData(searchCondition, val);\r\n        \r\n      }\r\n      const validateKeyword = (value) => {\r\n          let error;\r\n          if (!statesItems.keyWordtext) {\r\n            error = 'No Keywords';\r\n          } \r\n          return error;\r\n      };\r\n      const onKeywordChange = (e) =>{\r\n        this.setState({\r\n          keyWordtext : e.target.value\r\n        }); \r\n      };\r\n      const searchStart = (searchChannel) =>{\r\n        var searchCondition = {} ;\r\n        var ChannelUpper = [];\r\n        var ChannelLower = [];\r\n        var selectList = [];\r\n        var periodUnit = \"\";\r\n        this.setState({  \r\n          searchBtnClick: false\r\n        });\r\n        this.setState({  \r\n          searchCondition: {} ,\r\n          searchStart : false , \r\n        });\r\n        if (searchChannel.length > 0 ){\r\n          selectList.push({ label: 'Total', value: 'Total' , channelUp : \"Total\" , key: 0 });\r\n           searchChannel.forEach(function(item,idx){\r\n             ChannelUpper.push(item.type);\r\n             ChannelLower.push(item.name);\r\n             selectList.push({ label: item.name, value: item.name, channelUp : item.type , key: idx + 1});\r\n           });\r\n           \r\n        }\r\n        else{\r\n          console.log('채널 선택 없음');\r\n        }\r\n        statesItems.checkInfo.forEach(item => {\r\n          if (item.isChecked){\r\n            periodUnit = item.value;\r\n          }\r\n        });\r\n        this.setState({  \r\n          selectedOptionsBase: selectList ,\r\n        });\r\n\r\n        searchCondition.FromDate = dateString(statesItems.startDate); \r\n        searchCondition.ToDate = dateString(statesItems.endDate); \r\n        searchCondition.Period_Unit = periodUnit;\r\n        searchCondition.Channel = ChannelLower;\r\n        searchCondition.Keyword = statesItems.keyWordtext;\r\n        getSocialData(searchCondition , { label: 'Total', value: 'Total' , channelUp : \"Total\" , key: 0 } );\r\n        this.setState({  \r\n          searchCondition: searchCondition ,\r\n          searchStart : true , \r\n          selectedOptions: { label: 'Total', value: 'Total' , channelUp : \"Total\" , key: 0 } ,\r\n        });\r\n      }; \r\n\r\n      const keyWordClick = (clickItem) => {\r\n        console.log('keyWordClick -> ' , clickItem);\r\n      }\r\n\r\n      const onKeywordpress = (e) =>{\r\n        if (e.keyCode === 13){\r\n          e.preventDefault();\r\n          // 여기서 Search 로 이동\r\n        }\r\n      };\r\n\r\n      return(\r\n          <div className='social_area'>\r\n              <Row>\r\n                  <Colxx xxs=\"12\">\r\n                      <Card>\r\n                          <CardBody>\r\n                          <Form className=\"check-box-wrap multi\">\r\n                              <div className=\"tbl-vertical-heading\">\r\n                              <table>\r\n                                  <tbody>\r\n                                  <tr>\r\n                                      {/* vertical유형의 테이블 th 값은 인라인 스타일로 지정 바랍니다. */}\r\n                                      <th style={{ width:'15%' }}>Period</th>\r\n                                      <td style={{ width:'35%' }} >\r\n                                      <div className=\"date-picker-wrap\">\r\n                                          <DatePicker className=\"form-control\"  \r\n                                          locale={ko}\r\n                                          dateFormat=\"yyyy.MM.dd\"\r\n                                          selected={statesItems.startDate} \r\n                                          selectsStart\r\n                                          startDate={statesItems.startDate}\r\n                                          endDate={statesItems.endDate}\r\n                                          onChange={this.ChangeStartDate}  \r\n                                          placeholderText=\"Select Time\" \r\n                                          /> \r\n                                          <span className=\"cal-range\"> ~ </span>\r\n                                          <DatePicker className=\"form-control\"  \r\n                                          locale={ko}\r\n                                          dateFormat=\"yyyy.MM.dd\"\r\n                                          selected={statesItems.endDate}\r\n                                          selectsEnd\r\n                                          startDate={statesItems.startDate}\r\n                                          endDate={statesItems.endDate}\r\n                                          onChange={this.ChangeEndDate}  \r\n                                          placeholderText=\"Select Time\" \r\n                                          /> \r\n                                      </div>\r\n                                      </td>\r\n                                      <th style={{ width:'15%' }}>Period Unit</th>\r\n                                      <td  style={{ width:'35%' }}>\r\n                                      {statesItems.checkInfo.map(items => {\r\n                                          return(\r\n                                            <FormGroup check inline className='check-box lookup-area' key={items.id}>\r\n                                              <Input \r\n                                              id={items.id}\r\n                                              key={items.id}\r\n                                              onChange={this.handleOneChecked}\r\n                                              checked={items.isChecked}\r\n                                              type=\"checkbox\"\r\n                                              value={items.value}\r\n                                              className='check-single-box'\r\n                                              />{' '}\r\n                                              <label htmlFor={items.id} className='bx_check_oran'>\r\n                                                <span>{items.value}</span>\r\n                                              </label>\r\n                                            </FormGroup>\r\n                                          )\r\n                                        })}\r\n                                      </td>\r\n                                  </tr>\r\n                                  <tr>\r\n                                      <th style={{ width:'15%' }}>Channel</th>\r\n                                      <td style={{ width:'85%' }} colSpan=\"3\">\r\n                                      <ChannelButton searchStart={searchStart} searchBtnClick={statesItems.searchBtnClick} />                             \r\n                                      </td>\r\n                                  </tr>\r\n                                  <tr>\r\n                                      <th style={{ width:'15%' }}>Keywords</th>\r\n                                      <td style={{ width:'85%' }} colSpan=\"3\">\r\n                                      <Formik\r\n                                          initialValues={{\r\n                                          keyword: '',\r\n                                          }}\r\n                                          // onSubmit={onSubmit}\r\n                                      >\r\n                                      {({ errors, touched }) => (\r\n                                          <FormGroup className=\"keyword-area\">\r\n                                          <Field\r\n                                              className=\"form-control\"\r\n                                              name=\"keyword\"\r\n                                              value={statesItems.keyWordtext}\r\n                                              onChange={onKeywordChange}\r\n                                              onKeyDown={onKeywordpress}\r\n                                              validate={validateKeyword}\r\n                                          />\r\n                                          {errors.keyword && touched.keyword && (\r\n                                              <div className=\"d-block noti-text\">\r\n                                              {errors.keyword}\r\n                                              </div>\r\n                                          )}\r\n                                          </FormGroup>\r\n                                      )}\r\n                                      </Formik>\r\n                                      </td>\r\n                                  </tr>\r\n                                  </tbody>\r\n                              </table>\r\n                              </div>\r\n                              <div className=\"text-center\">\r\n                              <Button className=\"btn-xl mt-4\" color=\"gray\" onClick={this.SearchClick} >\r\n                                  ENTER\r\n                              </Button>\r\n                              </div>\r\n                          </Form>\r\n                          </CardBody>\r\n                      </Card>\r\n                  </Colxx>\r\n              </Row>\r\n\r\n              <Row className='mt-5'>\r\n                  <Colxx xxs=\"12\">\r\n                      <Card>\r\n                          <CardBody>\r\n                              <div>\r\n                                  <FormGroup className=\"select-box\">\r\n                                      <Select\r\n                                      components={{ Input: CustomSelectInput }}\r\n                                      className=\"react-select\"\r\n                                      classNamePrefix=\"react-select\"\r\n                                      name=\"form-field-name\"\r\n                                      onChange={(val) => setSelectedOptions(val)}\r\n                                      options={statesItems.selectedOptionsBase}\r\n                                      value={statesItems.selectedOptions}\r\n                                      />\r\n                                  </FormGroup>\r\n                              </div>\r\n                              <div className='clearfix box-line'>\r\n                                  <div className='box left'>\r\n                                      <div className=\"chart_area\">\r\n                                          <div className='chart-header'>\r\n                                              Buzz\r\n                                          </div>\r\n                                          <div className='chart-cont'>\r\n                                              <CompareLine options={statesItems.buzzGraph.options} series={statesItems.buzzGraph.series} height={statesItems.buzzGraph.height} />\r\n                                          </div>\r\n                                      </div>      \r\n                                  </div>\r\n                                  <div className='box right'>\r\n                                      <div className=\"chart_area\">\r\n                                          <div className='chart-header'>\r\n                                              Comment\r\n                                          </div>\r\n                                          <div className='chart-cont'>\r\n                                              <CompareLine options={statesItems.commentGraph.options} series={statesItems.commentGraph.series} height={statesItems.commentGraph.height} />\r\n                                          </div>\r\n                                      </div>      \r\n                                  </div>\r\n                              </div>\r\n                          </CardBody>\r\n                      </Card>\r\n                  </Colxx>\r\n              </Row>\r\n\r\n              <Row className='mt-5'>\r\n                  <Colxx xxs=\"12\">\r\n                      <Card>\r\n                          <CardBody>\r\n                            <Table bordered>\r\n                              <thead>\r\n                                <tr>\r\n                                  { statesItems.keywordRankHeader.map(items => {\r\n                                    return(\r\n                                      <th>{items}</th>   \r\n                                  )})}\r\n                                  \r\n                                </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                {statesItems.keywordList.map(items => {\r\n                                    return(\r\n                                      <tr>\r\n                                        <td>{items.Rank}</td>\r\n                                        {items.channel.map(item =>{\r\n                                          return (\r\n                                            <td  onClick={keyWordClick.bind(this,item)}>{item.Value}</td>\r\n                                          )})}\r\n                                      </tr>   \r\n                                 )})}\r\n                              </tbody>\r\n                            </Table>    \r\n                          </CardBody>\r\n                      </Card>\r\n                  </Colxx>\r\n              </Row>\r\n              <Row className='mt-5'>\r\n                  <Colxx xxs=\"12\">\r\n                      <Card>\r\n                          <CardBody>\r\n                            <div className=\"chart_area\">\r\n                              <div className='box-title'>\r\n                                  <h2>Social Keyword Chart {statesItems.keywordSelected} </h2>\r\n                              </div>\r\n                                <div className='chart-cont'>\r\n                                    <CompareLine options={statesItems.keywordGraph.options} series={statesItems.keywordGraph.series} height={statesItems.keywordGraph.height} />\r\n                                </div>\r\n                            </div>      \r\n                          </CardBody>\r\n                      </Card>\r\n                  </Colxx>\r\n              </Row>\r\n          </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Social;","C:\\tagons\\src\\views\\app\\trend\\Overview.js",["558","559","560","561","562","563","564","565"],"C:\\tagons\\src\\views\\app\\trend\\Ecommerce.js",["566"],"/* eslint-disable react/no-unused-state */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from 'react';\r\nimport { Row,\r\n     Card,\r\n     CardBody,\r\n     Form,\r\n     Button,\r\n     FormGroup, \r\n     Nav,\r\n     NavLink,\r\n     NavItem,\r\n     TabContent,\r\n     TabPane, \r\n    } from 'reactstrap';\r\nimport { Formik, Field } from 'formik';\r\nimport classnames from 'classnames';\r\nimport DatePicker from 'react-datepicker';\r\nimport { ko } from \"date-fns/esm/locale\";\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport CompareLine from '../../../components/charts/CompareLine';\r\n// import NegativeBar from '../../../components/charts/NegativeBar';\r\n// import HeatMap from '../../../components/charts/HeatMap';\r\nimport ChannelButton from '../../../components/applications/ChannelButton'\r\n// import CustomSelectInput from '../../../components/common/CustomSelectInput';\r\nimport { login, UserInfo, logout } from '../../../services/LoginService';\r\nimport axios from 'axios';\r\n\r\nclass Ecommerce extends React.Component {\r\n    constructor(props) {\r\n      super(props); // React.Component의 생성자 메소드를 먼저 실행\r\n      let date1 = new Date();\r\n      let date2 = new Date();\r\n      let loginYN = (UserInfo() !== null);\r\n      let userData = UserInfo();\r\n      date1.setDate(date1.getDate() - 9);\r\n      date2.setDate(date2.getDate() - 2);\r\n      this.state = {\r\n        startDate: date1,\r\n        endDate: date2,\r\n        activeTab: '1',\r\n        // eslint-disable-next-line react/no-unused-state\r\n        selectedOptions : [],\r\n        totalGraph : {\r\n          series: [\r\n              {\r\n                name: \"High - 2013\",\r\n                data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\r\n              },\r\n            ],\r\n            height: 500,\r\n            options: {\r\n              chart: {\r\n                type: 'line',\r\n                dropShadow: {\r\n                  enabled: true,\r\n                  color: '#000',\r\n                  top: 18,\r\n                  left: 7,\r\n                  blur: 10,\r\n                  opacity: 0.2\r\n                },\r\n                toolbar: {\r\n                  show: false\r\n                }\r\n              },\r\n              colors: ['#77B6EA', '#545454'],\r\n              dataLabels: {\r\n                enabled: true,\r\n              },\r\n              stroke: {\r\n                curve: 'smooth'\r\n              },\r\n              title: {\r\n                text: 'Average High & Low Temperature',\r\n                align: 'left'\r\n              },\r\n              grid: {\r\n                borderColor: '#e7e7e7',\r\n                row: {\r\n                  colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n                  opacity: 0.5\r\n                },\r\n              },\r\n              markers: {\r\n                size: 1\r\n              },\r\n              xaxis: {\r\n                categories: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],\r\n                title: {\r\n                  text: 'Month'\r\n                }\r\n              },\r\n              yaxis: {\r\n                title: {\r\n                  text: 'Temperature'\r\n                },\r\n                min: 1,\r\n                max: 35\r\n              },\r\n              legend: {\r\n                position: 'top',\r\n                horizontalAlign: 'right',\r\n                floating: true,\r\n                offsetY: -25,\r\n                offsetX: -5\r\n              }\r\n            },\r\n        }, \r\n      \r\n      }\r\n    }\r\n\r\n    ChangeStartDate = (e) => { \r\n        this.setState({  \r\n          startDate: e,\r\n        });\r\n      };  \r\n      \r\n    ChangeEndDate = (e) => { \r\n        this.setState({  \r\n            endDate: e\r\n        });  \r\n    };\r\n    \r\n    toggle = (tab) => {\r\n        const { activeTab } = this.state;\r\n\r\n        if(activeTab !== tab){\r\n            this.setState({\r\n                activeTab : tab\r\n            })\r\n        }\r\n    }\r\n\r\n    generateData = (count, yrange) => {\r\n        let i = 0;\r\n        const series = [];\r\n        while (i < count) {\r\n          const x = (i + 1).toString();\r\n          const y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\r\n          series.push({\r\n            x,\r\n            y\r\n          });\r\n          // eslint-disable-next-line no-plusplus\r\n          i++;\r\n        }\r\n        console.log(series);\r\n        return series;\r\n      }\r\n\r\n    //   setSelectedOptions = (val) => {\r\n    //     this.setState({  \r\n    //       selectedOptions: val\r\n    //     }); \r\n    //   }\r\n    \r\n\r\n    render() {\r\n\r\n      const statesItems = this.state;\r\n\r\n      // const selectedOptionsBase = [\r\n      //   { label: 'Total', value: 'social_val01', key: 0 },\r\n      //   { label: 'Naver_news', value: 'social_val02', key: 1 },\r\n      //   { label: 'Naver_blog', value: 'social_val03', key: 2 },\r\n      // ];\r\n  \r\n      const validateKeyword = (value) => {\r\n          let error;\r\n          if (!value) {\r\n            error = 'No Keywords';\r\n          } \r\n          return error;\r\n      };\r\n      const dateString = (dateValue) => {\r\n        let retStr = '';\r\n        //Year\r\n        retStr = retStr.concat(dateValue.getFullYear());\r\n        //Month\r\n        if(dateValue.getMonth() < 10) {\r\n            retStr = retStr.concat('-0', dateValue.getMonth() + 1);\r\n        }\r\n        else {\r\n            retStr = retStr.concat('-', dateValue.getMonth() + 1);\r\n        }\r\n        //Date\r\n        if(dateValue.getDate() < 10) {\r\n            retStr = retStr.concat('-0', dateValue.getDate());\r\n        }\r\n        else {\r\n            retStr = retStr.concat('-', dateValue.getDate());\r\n        }\r\n        return retStr;\r\n      }\r\n      const searchStart = (searchChannel) =>{\r\n        var searchCondition = {} ;\r\n        var ChannelUpper = [];\r\n        var ChannelLower = [];\r\n        this.setState({  \r\n          searchBtnClick: false\r\n        });\r\n        this.setState({  \r\n          searchCondition: {} ,\r\n          searchStart : false , \r\n        });\r\n        if (searchChannel.length > 0 ){\r\n           searchChannel.forEach(function(item,idx){\r\n             ChannelUpper.push(item.type);\r\n             ChannelLower.push(item.name);\r\n           });\r\n        }\r\n        else{\r\n          console.log('채널 선택 없음');\r\n        }\r\n        searchCondition.FromDate = dateString(statesItems.startDate); \r\n        searchCondition.ToDate = dateString(statesItems.endDate); \r\n        searchCondition.Period_Unit = \"Daily\";\r\n        searchCondition.Channel_Upper = ChannelUpper;\r\n        searchCondition.Channel_Lower = ChannelLower;\r\n        searchCondition.Keyword = statesItems.keyWordtext;\r\n        searchCondition.Company = statesItems.userInfo.CompanyName;\r\n        searchCondition.CompanyCode = statesItems.userInfo.CompanyCode;\r\n        // console.log('searchCondition',searchCondition);\r\n        this.setState({  \r\n          searchCondition: searchCondition ,\r\n          searchStart : true , \r\n        });\r\n        //여기서 조회 API 구현하면 됨\r\n      }; \r\n\r\n      const onKeywordpress = (e) =>{\r\n        if (e.keyCode === 13){\r\n          e.preventDefault();\r\n          // 여기서 Search 로 이동\r\n        }\r\n      };\r\n      return(\r\n          <div className='social_area'>\r\n              <Row>\r\n                  <Colxx xxs=\"12\">\r\n                      <Card>\r\n                          <CardBody>\r\n                          <Form className=\"check-box-wrap multi\">\r\n                              <div className=\"tbl-vertical-heading\">\r\n                              <table>\r\n                                  <tbody>\r\n                                  <tr>\r\n                                      {/* vertical유형의 테이블 th 값은 인라인 스타일로 지정 바랍니다. */}\r\n                                      <th style={{ width:'15%' }}>Period</th>\r\n                                      <td style={{ width:'85%' }} colSpan=\"3\">\r\n                                      <div className=\"date-picker-wrap\">\r\n                                          <DatePicker className=\"form-control\"  \r\n                                          locale={ko}\r\n                                          dateFormat=\"yyyy.MM.dd\"\r\n                                          selected={statesItems.startDate} \r\n                                          selectsStart\r\n                                          startDate={statesItems.startDate}\r\n                                          endDate={statesItems.endDate}\r\n                                          onChange={this.ChangeStartDate}  \r\n                                          placeholderText=\"Select Time\" \r\n                                          /> \r\n                                          <span className=\"cal-range\"> ~ </span>\r\n                                          <DatePicker className=\"form-control\"  \r\n                                          locale={ko}\r\n                                          dateFormat=\"yyyy.MM.dd\"\r\n                                          selected={statesItems.endDate}\r\n                                          selectsEnd\r\n                                          startDate={statesItems.startDate}\r\n                                          endDate={statesItems.endDate}\r\n                                          onChange={this.ChangeEndDate}  \r\n                                          placeholderText=\"Select Time\" \r\n                                          /> \r\n                                      </div>\r\n                                      </td>\r\n                                  </tr>\r\n                                  <tr>\r\n                                      <th style={{ width:'15%' }}>Channel</th>\r\n                                      <td style={{ width:'85%' }}>\r\n                                      <ChannelButton searchStart={searchStart} searchBtnClick={statesItems.searchBtnClick}/>                             \r\n                                      </td>\r\n                                  </tr>\r\n                                  <tr>\r\n                                      <th style={{ width:'15%' }}>Keywords</th>\r\n                                      <td style={{ width:'85%' }}>\r\n                                      <Formik\r\n                                          initialValues={{\r\n                                          keyword: '',\r\n                                          }}\r\n                                          // onSubmit={onSubmit}\r\n                                      >\r\n                                      {({ errors, touched }) => (\r\n                                          <FormGroup className=\"keyword-area\">\r\n                                          <Field\r\n                                              className=\"form-control\"\r\n                                              name=\"keyword\"\r\n                                              onKeyDown={onKeywordpress}\r\n                                              validate={validateKeyword}\r\n                                          />\r\n                                          {errors.keyword && touched.keyword && (\r\n                                              <div className=\"d-block noti-text\">\r\n                                              {errors.keyword}\r\n                                              </div>\r\n                                          )}\r\n                                          </FormGroup>\r\n                                      )}\r\n                                      </Formik>\r\n                                      </td>\r\n                                  </tr>\r\n                                  </tbody>\r\n                              </table>\r\n                              </div>\r\n                              <div className=\"text-center\">\r\n                              <Button className=\"btn-xl mt-4\" color=\"gray\" onClick={this.SearchClick}>\r\n                                  ENTER\r\n                              </Button>\r\n                              </div>\r\n                          </Form>\r\n                          </CardBody>\r\n                      </Card>\r\n                  </Colxx>\r\n              </Row>\r\n\r\n              <Row className='mt-5'>\r\n                  <Colxx xxs=\"12\">\r\n                      <Card>\r\n                          <CardBody>\r\n                            <div className=\"chart_area\">\r\n                              <div className='box-title'>\r\n                                  <h2>Social Keyword Chart - 독특하다</h2>\r\n                              </div>\r\n                                <div className='chart-cont'>\r\n                                    <CompareLine options={statesItems.totalGraph.options} series={statesItems.totalGraph.series} height={statesItems.totalGraph.height} />\r\n                                </div>\r\n                            </div>      \r\n                          </CardBody>\r\n                      </Card>\r\n                  </Colxx>\r\n              </Row>\r\n\r\n              <Row className=\"mt-5\">\r\n                  <Colxx xxs=\"12\">\r\n                  <Card>\r\n                      <CardBody>\r\n                          <div>\r\n                              <Nav tabs>\r\n                                  <NavItem>\r\n                                  <NavLink\r\n                                      className={classnames({ active: statesItems.activeTab === '1' })}\r\n                                      onClick={() => { this.toggle('1'); }}\r\n                                  >\r\n                                      Total\r\n                                  </NavLink>\r\n                                  </NavItem>\r\n                                  <NavItem>\r\n                                      <NavLink\r\n                                          className={classnames({ active: statesItems.activeTab === '2' })}\r\n                                          onClick={() => { this.toggle('2'); }}\r\n                                      >\r\n                                          I/D RATE\r\n                                      </NavLink>\r\n                                  </NavItem>\r\n                              </Nav>\r\n                              <TabContent activeTab={statesItems.activeTab}>\r\n                                  <TabPane tabId=\"1\">\r\n                                      <Row>\r\n                                          <Colxx xxs=\"12\">\r\n                                              <Card>\r\n                                                  <CardBody>\r\n                                                      test\r\n                                                  </CardBody>\r\n                                              </Card>\r\n                                          </Colxx>\r\n                                      </Row>\r\n                                  </TabPane>\r\n                                  <TabPane tabId=\"2\">\r\n                                      <Row className='mt-5'>\r\n                                          <Colxx xxs=\"12\">\r\n                                              <Card>\r\n                                                  <CardBody>\r\n                                                    <div className='graph-area negative-chart'>\r\n                                                      test\r\n                                                    </div>\r\n                                                  </CardBody>\r\n                                              </Card>\r\n                                          </Colxx>\r\n                                      </Row>\r\n                                      <Row className='mt-5'>\r\n                                          <Colxx xxs=\"12\">\r\n                                              <Card>\r\n                                                  <CardBody>\r\n                                                      <div className='box-title'>\r\n                                                          <h2>Heat Map</h2>\r\n                                                      </div>\r\n                                                      <div className='graph-area Heat-Map'>\r\n                                                          test\r\n                                                      </div>\r\n                                                  </CardBody>\r\n                                              </Card>\r\n                                          </Colxx>\r\n                                      </Row>\r\n                                  </TabPane>\r\n                              </TabContent>\r\n                          </div>\r\n                      </CardBody>\r\n                  </Card>\r\n                  </Colxx>\r\n              </Row>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Ecommerce;","C:\\tagons\\src\\views\\app\\prime\\Channels.js",["567"],"/* eslint-disable react/no-unused-state */\r\nimport React from 'react';\r\nimport { Row, Card, CardBody, Form, Button, FormGroup } from 'reactstrap';\r\nimport { Formik, Field } from 'formik';\r\nimport DatePicker from 'react-datepicker';\r\nimport { ko } from \"date-fns/esm/locale\";\r\nimport TableRowspan from '../../../components/applications/TableRowspan';\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport ChannelButton from '../../../components/applications/ChannelButton'\r\nimport ChannelTable from '../../../components/applications/ChannelTable'\r\nimport { login, UserInfo, logout } from '../../../services/LoginService';\r\nimport axios from 'axios';\r\n\r\nclass Channels extends React.Component {\r\n    constructor(props) {\r\n      super(props); // React.Component의 생성자 메소드를 먼저 실행\r\n      let date1 = new Date();\r\n      let date2 = new Date();\r\n      let loginYN = (UserInfo() !== null);\r\n      let userData = UserInfo();\r\n      date1.setDate(date1.getDate() - 9);\r\n      date2.setDate(date2.getDate() - 2);\r\n      this.state = {\r\n        startDate: date1,\r\n        endDate: date2,\r\n        searchBtnClick : false ,\r\n        searchStartFlag : false ,\r\n        keyWordtext :'' ,\r\n        searchCondition : {} ,\r\n        loginBefore : loginYN ,\r\n        userInfo : userData ,\r\n      }\r\n    }\r\n\r\n    ChangeStartDate = (e) => { \r\n        this.setState({  \r\n          startDate: e,\r\n        });\r\n      };  \r\n      \r\n    ChangeEndDate = (e) => { \r\n        this.setState({  \r\n            endDate: e\r\n        });  \r\n    }; \r\n    \r\n    SearchClick = (e) => {\r\n      console.log('Channels SearchClick !!');\r\n      this.setState({  \r\n        searchBtnClick: true , \r\n      });\r\n      \r\n    }\r\n\r\n    render() {\r\n\r\n      const statesItems = this.state;\r\n\r\n      const validateKeyword = (value) => {\r\n          let error;\r\n          if (!value) {\r\n            error = 'No Keywords';\r\n          } \r\n          return error;\r\n      };\r\n      const dateString = (dateValue) => {\r\n        let retStr = '';\r\n        //Year\r\n        retStr = retStr.concat(dateValue.getFullYear());\r\n        //Month\r\n        if(dateValue.getMonth() < 10) {\r\n            retStr = retStr.concat('-0', dateValue.getMonth() + 1);\r\n        }\r\n        else {\r\n            retStr = retStr.concat('-', dateValue.getMonth() + 1);\r\n        }\r\n        //Date\r\n        if(dateValue.getDate() < 10) {\r\n            retStr = retStr.concat('-0', dateValue.getDate());\r\n        }\r\n        else {\r\n            retStr = retStr.concat('-', dateValue.getDate());\r\n        }\r\n        return retStr;\r\n      }\r\n      const setSearchStartFlag = (flagValue) => {\r\n        this.setState({  \r\n          searchStartFlag: flagValue ,\r\n        });\r\n      }\r\n      const searchStart = (searchChannel) =>{\r\n        var searchCondition = {} ;\r\n        var ChannelUpper = [];\r\n        var ChannelLower = [];\r\n        this.setState({  \r\n          searchBtnClick: false\r\n        });\r\n        /* this.setState({  \r\n          searchCondition: {} ,\r\n          searchStartFlag : false , \r\n        }); */\r\n        if (searchChannel.length > 0 ){\r\n           searchChannel.forEach(function(item,idx){\r\n             ChannelUpper.push(item.type);\r\n             ChannelLower.push(item.name);\r\n           });\r\n        }\r\n        else{\r\n          console.log('채널 선택 없음');\r\n        }\r\n        searchCondition.FromDate = dateString(statesItems.startDate); \r\n        searchCondition.ToDate = dateString(statesItems.endDate); \r\n        searchCondition.Period_Unit = \"Daily\";\r\n        searchCondition.Channel_Upper = ChannelUpper;\r\n        searchCondition.Channel_Lower = ChannelLower;\r\n        searchCondition.Keyword = statesItems.keyWordtext;\r\n        searchCondition.Company = statesItems.userInfo.CompanyName;\r\n        searchCondition.CompanyCode = statesItems.userInfo.CompanyCode;\r\n        // console.log('searchCondition',searchCondition);\r\n        console.log('11111');\r\n        this.setState({  \r\n          searchCondition: searchCondition ,\r\n          searchStartFlag : true , \r\n        });\r\n          console.log('2222');\r\n        //여기서 조회 API 구현하면 됨\r\n\r\n\r\n      };\r\n      const onKeywordpress = (e) =>{\r\n        if (e.keyCode === 13){\r\n          e.preventDefault();\r\n          // 여기서 Search 로 이동\r\n        }\r\n      };\r\n      return(\r\n        <>\r\n          <Row>\r\n              <Colxx xxs=\"12\">\r\n              <Card>\r\n                  <CardBody>\r\n                  <Form className=\"check-box-wrap multi\">\r\n                      <div className=\"tbl-vertical-heading\">\r\n                      <table>\r\n                          <tbody>\r\n                          <tr>\r\n                              {/* vertical유형의 테이블 th 값은 인라인 스타일로 지정 바랍니다. */}\r\n                              <th style={{ width:'15%' }}>Period</th>\r\n                              <td style={{ width:'85%' }} colSpan=\"3\">\r\n                              <div className=\"date-picker-wrap\">\r\n                                  <DatePicker className=\"form-control\"  \r\n                                  locale={ko}\r\n                                  dateFormat=\"yyyy.MM.dd\"\r\n                                  selected={statesItems.startDate} \r\n                                  selectsStart\r\n                                  startDate={statesItems.startDate}\r\n                                  endDate={statesItems.endDate}\r\n                                  onChange={this.ChangeStartDate}  \r\n                                  placeholderText=\"Select Time\" \r\n                                  /> \r\n                                  <span className=\"cal-range\"> ~ </span>\r\n                                  <DatePicker className=\"form-control\"  \r\n                                  locale={ko}\r\n                                  dateFormat=\"yyyy.MM.dd\"\r\n                                  selected={statesItems.endDate}\r\n                                  selectsEnd\r\n                                  startDate={statesItems.startDate}\r\n                                  endDate={statesItems.endDate}\r\n                                  onChange={this.ChangeEndDate}  \r\n                                  placeholderText=\"Select Time\" \r\n                                  /> \r\n                              </div>\r\n                              </td>\r\n                          </tr>\r\n                          <tr>\r\n                              <th style={{ width:'15%' }}>Channel</th>\r\n                              <td style={{ width:'85%' }}>\r\n                              <ChannelButton  searchStart={searchStart} searchBtnClick={statesItems.searchBtnClick}/>                             \r\n                              </td>\r\n                          </tr>\r\n                          <tr>\r\n                              <th style={{ width:'15%' }}>Keywords</th>\r\n                              <td style={{ width:'85%' }}>\r\n                                  <Formik\r\n                                      initialValues={{\r\n                                      keyword: '',\r\n                                      }}\r\n                                      // onSubmit={onSubmit}\r\n                                  >\r\n                              {({ errors, touched }) => (\r\n                                  <FormGroup className=\"keyword-area\">\r\n                                  <Field\r\n                                      className=\"form-control\"\r\n                                      name=\"keyword\"\r\n                                      onKeyDown={onKeywordpress}\r\n                                      validate={validateKeyword}\r\n                                  />\r\n                                  {errors.keyword && touched.keyword && (\r\n                                      <div className=\"d-block noti-text\">\r\n                                      {errors.keyword}\r\n                                      </div>\r\n                                  )}\r\n                                  </FormGroup>\r\n                              )}\r\n                              </Formik>\r\n                              </td>\r\n                          </tr>\r\n                          </tbody>\r\n                      </table>\r\n                      </div>\r\n                      <div className=\"text-center\">\r\n                      <Button className=\"btn-xl mt-4\" color=\"gray\" onClick={this.SearchClick}>\r\n                          ENTER\r\n                      </Button>\r\n                      </div>\r\n                  </Form>\r\n                  </CardBody>\r\n              </Card>\r\n              </Colxx>\r\n          </Row>    \r\n          \r\n          <Row className=\"mt-5\">\r\n              <Colxx xxs=\"12\">\r\n              <Card>\r\n                  <CardBody>\r\n                      <div className='box-title'>\r\n                          <h2>Posting Indicator</h2>\r\n                      </div>\r\n                      <ChannelTable setSearchStartFlag={setSearchStartFlag} searchStartFlag={statesItems.searchStartFlag} searchCondition={statesItems.searchCondition} />\r\n                  </CardBody>\r\n              </Card>\r\n              </Colxx>\r\n          </Row>\r\n        </>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Channels;","C:\\tagons\\src\\containers\\navs\\Leftmenulist.js",[],"C:\\tagons\\src\\components\\applications\\ChannelTable.js",["568","569"],"/* eslint-disable no-nested-ternary */\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React, { Component } from \"react\";\r\nimport axios from 'axios';\r\n\r\nconst RenderRow = props => {\r\n\r\n  const tableObjectVal = Object.values(props.data);\r\n  return (\r\n    <>\r\n      {props.idx === 0 ? (\r\n        <td rowSpan={props.rows}>\r\n          {props.keys}\r\n        </td>\r\n      ) : null}\r\n      <>\r\n        {tableObjectVal.map((val) => {\r\n            const valueSet = val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n            return (\r\n                <>\r\n                {String(props.keys) !== String(val) ? <td>{valueSet}</td> : false }\r\n                </>\r\n            );\r\n        })}\r\n      </>\r\n    </>\r\n  );\r\n};\r\n\r\nclass ChannelTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchCondition : {},\r\n      tableDataHeader: [\r\n        // eslint-disable-next-line no-dupe-keys\r\n        { 'Channel Category': \"\", Channel: \"\", 'Post(product)' : \"\", \"Comment(Review)\": '-', \"View\": '-', 'List(Cart)': \"\", 'Press': \"\", 'Positive Rate': \"\", 'Negative Rate': \"\"},\r\n      ],\r\n      tableData: [\r\n        // eslint-disable-next-line no-dupe-keys\r\n        /*{ 'Channel Category': \"Search Volume\", Channel: \"Naver\", 'Post(product)' : 447, \"Comment(Review)\": '-', \"View\": '-', 'List(Cart)': 50, 'Press': 4965, 'Positive Rate': 11111, 'Negative Rate': 70},\r\n        { 'Channel Category': \"Social\", Channel: \"Naver News\", 'Post(product)' : 1275, \"Comment(Review)\": '-', \"View\": '-', 'List(Cart)': 50, 'Press': 4965, 'Positive Rate': 11111, 'Negative Rate': 70},\r\n        { 'Channel Category': \"Social\", Channel: \"Naver Blog\", 'Post(product)' : 1275, \"Comment(Review)\": '-', \"View\": '-', 'List(Cart)': 50, 'Press': 4965, 'Positive Rate': 11111, 'Negative Rate': 70 },\r\n        { 'Channel Category': \"Social\", Channel: \"Instargram\", 'Post(product)' : 1138, \"Comment(Review)\": '-', \"View\": '-', 'List(Cart)': 50, 'Press': 4965, 'Positive Rate': 11111, 'Negative Rate': 70 },\r\n        { 'Channel Category': \"Social\", Channel: \"Facebook\", 'Post(product)' : 1198, \"Comment(Review)\": '-', \"View\": '-', 'List(Cart)': 50, 'Press': 4965, 'Positive Rate': 11111, 'Negative Rate': 70 },\r\n        { 'Channel Category': \"Social\", Channel: \"Youtube\", 'Post(product)' : 1258, \"Comment(Review)\": '-', \"View\": '-', 'List(Cart)': 50, 'Press': 4965, 'Positive Rate': 11111, 'Negative Rate': 70 },\r\n        { 'Channel Category': \"Shopping\", Channel: \"Navete shopping\", 'Post(product)' : 1258, \"Comment(Review)\": '-', \"View\": '-', 'List(Cart)': 50, 'Press': 4965, 'Positive Rate': 11111, 'Negative Rate': 70 },\r\n        { 'Channel Category': \"E-Commerce\", Channel: \"Coupang\", 'Post(product)' : 1258, \"Comment(Review)\": '-', \"View\": '-', 'List(Cart)': 50, 'Press': 4965, 'Positive Rate': 11111, 'Negative Rate': 70 }, */\r\n      ]\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    if (this.props.searchStartFlag){\r\n      this.props.setSearchStartFlag(false);\r\n      \r\n      this.getTableData();\r\n    }\r\n  }\r\n\r\n  getKeys = () => {\r\n    const { tableDataHeader } = this.state;\r\n    return Object.keys(tableDataHeader[0]);\r\n  };\r\n\r\n  getHeader = () => {\r\n    const keys = this.getKeys();\r\n    return keys.map((key) => {\r\n      return <th key={key}>{key.toUpperCase()}</th>;\r\n    });\r\n  };\r\n\r\n  getRowsData = () => {\r\n    const { tableData } = this.state;\r\n    const keys = tableData.reduce((channel, item) => {\r\n      const estKey = item['Channel Category'];\r\n      // eslint-disable-next-line no-param-reassign\r\n      (channel[estKey] ? channel[estKey] : (channel[estKey] = null || [])).push(item);\r\n      return channel;\r\n    }, {});\r\n\r\n    \r\n    return Object.keys(keys).map((key, idx) => {\r\n      return keys[key].map((obj, idx2) => {\r\n        return (\r\n          // eslint-disable-next-line react/no-array-index-key\r\n          <tr key={idx}>\r\n            <RenderRow\r\n              // eslint-disable-next-line react/no-array-index-key\r\n              key={idx2}\r\n              idx={idx2}\r\n              data={obj}\r\n              keys={key}\r\n              rows={keys[key].length}\r\n            />\r\n          </tr>\r\n        );\r\n      });\r\n    });\r\n  };\r\n  \r\n  setTableData = (recvTableData) => {\r\n    var tempTableData = [];\r\n    var allIdx = 0;\r\n    this.setState(\r\n        {tableData : [],}\r\n      );\r\n    recvTableData.Data.forEach(function(item,idx){\r\n      allIdx += 1 ;\r\n      tempTableData.push({ 'Channel Category': item.Channel_Category === \"NULL\" ? \"-\" : item.Channel_Category , Channel: item.Channel === \"NULL\" ? \"-\" : item.Channel , 'Post(product)' : item.Post_Product === \"NULL\" ? \"-\" : item.Post_Product , \"Comment(Review)\": item.Comment_Review === \"NULL\" ? \"-\" : item.Comment_Review , \"View\": item.View === \"NULL\" ? \"-\" : item.View , 'List(Cart)': item.Like_Cart === \"NULL\" ? \"-\" : item.Like_Cart , 'Press': item.Press === \"NULL\" ? \"-\" : item.Press , 'Positive Rate': item.Positive_Rate === \"NULL\" ? \"-\" : item.Positive_Rate , 'Negative Rate': item.Negative_Rate === \"NULL\" ? \"-\" : item.Negative_Rate});\r\n    });\r\n    // console.log('ChannelTable setTableData ' , tempTableData);\r\n    this.setState(\r\n      {tableData : tempTableData,}\r\n    );\r\n  }\r\n\r\n  getTableData = () => {\r\n\r\n    axios.post(\"/prime/GetChannel_Posting_Indicator\",this.props.searchCondition)\r\n      .then((response) => {\r\n          if (response.data.ErrorCode === 'OK'){    \r\n            this.setTableData(response.data);\r\n          }\r\n          else{\r\n            console.log('prime GetChannel_Posting_Indicator error');\r\n          }\r\n          \r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);\r\n      });\r\n  }\r\n\r\n\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <table className='r-table table tbl-indicator mt-5'>\r\n            <thead>\r\n              <tr>{this.getHeader()}</tr>\r\n            </thead>\r\n            <tbody>{this.getRowsData()}</tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ChannelTable;\r\n","C:\\tagons\\src\\components\\charts\\HeatMap.js",[],"C:\\tagons\\src\\components\\charts\\NegativeBar.js",[],"C:\\tagons\\src\\views\\app\\trend\\googleAnalytics.js",["570","571","572","573","574","575","576","577","578","579","580","581","582","583","584"],"/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable no-use-before-define */\r\n/* eslint no-unused-vars: \"off\" */\r\n/* eslint no-undef: \"off\" */\r\n/* eslint no-plusplus : \"off\" */\r\n/* eslint react/no-unused-state: \"off\" */\r\n/* eslint prefer-template: \"off\" */\r\n/* eslint react/no-array-index-key: \"off\" */\r\n/* eslint-disable jsx-a11y/label-has-for */\r\n/* eslint-disable no-underscore-dangle */\r\nimport React from 'react';\r\nimport { Row, Card, CardBody, Form, Button, FormGroup, Input, Nav, NavLink, NavItem, TabContent, TabPane, } from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport { Formik, Field } from 'formik';\r\nimport Select from 'react-select';\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\nimport {ReactTable} from '../../../containers/ui/ReactTableCards';\r\nimport CustomSelectInput from '../../../components/common/CustomSelectInput';\r\nimport CompareBar from '../../../components/charts/CompareBar';\r\nimport CompareLine from '../../../components/charts/CompareLine';\r\nimport { TableData } from './data';\r\nimport { login, UserInfo, logout } from '../../../services/LoginService';\r\nimport axios from 'axios';\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass GoogleAnalytics extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props); // React.Component의 생성자 메소드를 먼저 실행\r\n    let loginYN = (UserInfo() !== null);\r\n    let userData = UserInfo();\r\n    this.state = {\r\n      activeId: 1,\r\n      listActiveId: 1,\r\n      selectedOptions: null,\r\n      activeTab: '1',\r\n      keyWordtext :'',\r\n      userInfo : userData ,\r\n      internalIndexSelected : '',\r\n      externalSelected : '', \r\n      UsersSessionsSeries: [] ,\r\n      ConversionBounceRateSeries : [] ,\r\n      checkInfo: [\r\n        { id: 1, value: \"1Month\", view : \"1 Month\",isChecked: true },\r\n        { id: 2, value: \"3Months\", view: \"3 Months\", isChecked: false },\r\n        { id: 3, value: \"6Months\", view: \"6 Months\",isChecked: false },\r\n        { id: 4, value: \"12Months\", view: \"12 Months\",isChecked: false }\r\n      ],   \r\n      chartDataArray : [] ,  \r\n      AnalysisChartArray : [],\r\n      GASocialComparison : {\r\n        CategoryData : [] ,\r\n        UsersData : [] , \r\n        SessionsData : [] ,  \r\n        ConversionRateData : [] ,\r\n        BounceRateData : [] , \r\n        BuzzData : [] , \r\n        SearchVolumeData : [] , \r\n        ProductsData : [] ,\r\n      } ,\r\n      TableDataSocial : [],\r\n      columns : [\r\n      {\r\n        Header: 'Rank',\r\n        accessor: 'id',\r\n        cellClass: 'list-item-heading text-center w-10',\r\n      },\r\n      {\r\n        Header: 'GA Inflow Keyword',\r\n        accessor: 'title',\r\n        cellClass: 'text-muted text-center w-30',\r\n      },\r\n      {\r\n        Header: 'Users',\r\n        accessor: 'purchase',\r\n        cellClass: 'text-muted text-center w-30',\r\n      },\r\n      {\r\n        Header: 'Buzz',\r\n        accessor: 'satisfaction',\r\n        cellClass: 'text-muted text-center w-30',\r\n      },\r\n    ],\r\n      horizontal: {\r\n        options: {\r\n          chart: {\r\n            height: 350,\r\n            toolbar: {\r\n              show: false,\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n            events: {\r\n              dataPointSelection: (event, chartContext, config) => {\r\n                for(let i = 0; i < event.target.parentNode.childNodes.length; i++){\r\n                  event.target.parentNode.childNodes[i].setAttribute('fill', '#dbdbdb');\r\n                  \r\n                  if(event.target) {\r\n                    event.target.setAttribute('fill', '#f9a21b');\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          },\r\n          plotOptions: {\r\n            bar: {\r\n              horizontal: true,\r\n              dataLabels: {\r\n                position: 'top',\r\n              },\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: true,\r\n          },\r\n          grid: {\r\n            show: false,\r\n          },\r\n          fill: {\r\n            colors: ['#dbdbdb',],\r\n            opacity: 1\r\n          },\r\n          title: {\r\n            // text: \"\"\r\n          },\r\n          states: {\r\n            hover: {\r\n              filter: {\r\n                type: 'none',\r\n              }\r\n            },\r\n            active: {\r\n              allowMultipleDataPointsSelection: false,\r\n              filter: {\r\n                type: 'none',\r\n              }\r\n            },\r\n          },\r\n          xaxis: {\r\n            labels:{\r\n              show: false,\r\n            },\r\n            axisTicks: {\r\n              show: false,\r\n            },\r\n            categories: ['폴라니트', '목폴라니트', '에이라인스커트', '플로랄원피스', '하객룩',],\r\n          },\r\n          yaxis: {\r\n            axisTicks: {\r\n              show: false\r\n            },\r\n            axisBorder: {\r\n              show: true,\r\n            },\r\n          },\r\n          tooltip: {\r\n            custom: ({ series, seriesIndex, dataPointIndex, w }) => {\r\n              // console.log(w.config.series[seriesIndex].average[dataPointIndex]);\r\n              return (\r\n                '<div class=\"arrow_box\">' +\r\n                \"<span>\" +\r\n                w.config.series[seriesIndex].title +\r\n                \": \" +\r\n                series[seriesIndex][dataPointIndex] +\r\n                \" (\"+ w.config.series[seriesIndex].average[dataPointIndex] +\"%)\" +\r\n                \"</span>\" +\r\n                \"</div>\"\r\n              );\r\n            }\r\n          },\r\n          noData: {\r\n            text: '데이터 없음',\r\n            align: 'center',\r\n            verticalAlign: 'middle',\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            style: {\r\n              fontSize: '16px',\r\n            }\r\n          }\r\n        },\r\n      },\r\n      \r\n      totalGraph : {\r\n        series: [\r\n          {\r\n            name: \"Users\",\r\n            data: [0.77, 0.88, 0.99, 0.11, 0.12, 0.34, 0.56, 0.4, 0.56, 0.41, 0.42, 0.44, 0.55, 0.66, 0.77, 0.99, 0.11, 0.55, 0.11, 0.12, 0.13, 0.15, 0.46, 0.79, 0.53, 0.12, 0.86, 0.77, 0.2, 0.55, 0.44]\r\n          },\r\n          {\r\n            name: \"Sessions\",\r\n            data: [0.77, 0.8, 0.55, 0.22, 0.33, 0.44, 0.55,0.12, 0.13, 0.76, 0.45, 0.52, 0.01, 0.76, 0.22, 0.78, 0.65, 0.63, 0.93, 0.94, 0.82, 0.2, 0.46, 0.15, 0.76, 0.22, 0.46, 0.55, 0.34, 0.74, 0.45]\r\n          },\r\n        ],\r\n          height: 250,\r\n          options: {\r\n            chart: {\r\n              type: 'line',\r\n              dropShadow: {\r\n                enabled: false,\r\n                color: '#000',\r\n                top: 18,\r\n                left: 7,\r\n                blur: 10,\r\n                opacity: 0.2,\r\n              },\r\n              toolbar: {\r\n                show: false\r\n              }, \r\n              zoom: {\r\n                enabled: false,\r\n              }\r\n            },\r\n            legend: {\r\n              position: 'top',\r\n              horizontalAlign: 'right', \r\n            },\r\n            colors: ['#4e4f4f','#b9b9b9'],\r\n            dataLabels: {\r\n              enabled: true,\r\n              background: {\r\n                foreColor: '#000',\r\n                padding: 0,\r\n                borderRadius: 0,\r\n                borderColor: 'transparent',\r\n              },\r\n              style: {\r\n                fontSize: '14px',\r\n                fontFamily: 'Helvetica, Arial, sans-serif',\r\n                fontWeight: 'bold',\r\n                colors: ['transparent'],\r\n              },\r\n              offsetY: -10,\r\n            },\r\n            markers: {\r\n              size: 5,\r\n              hover: {\r\n                size: 5,\r\n                sizeOffset: 5,\r\n                fillColor: '#000',\r\n              },\r\n              discrete: [{\r\n                fillColor: '#e3e3e3',\r\n                strokeColor: '#fff',\r\n                size: 5\r\n              }]\r\n            },\r\n            stroke: {\r\n              curve: 'smooth'\r\n            },\r\n            grid: {\r\n              show: false,\r\n            },\r\n            xaxis: {\r\n              categories: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],\r\n              tickPlacement: 'between'\r\n            },\r\n            yaxis: {\r\n              show: false\r\n            }, \r\n            \r\n          },\r\n      },\r\n      bounceOpt :{}, \r\n      conversionOpt :{},\r\n      inflowOpt :{},\r\n      mostVisitedPageOpt :{},\r\n      bounceSeries :[], \r\n      conversionSeries :[],\r\n      inflowSeries :[],\r\n      mostVisitedPageSeries :[],\r\n      GaUserBarGenOpt :{}, \r\n      GaUserBarAgeOpt :{}, \r\n      GaUserBarDeviceOpt :{}, \r\n      GaUserBarRegionOpt :{}, \r\n      GaUserBarGenSeries :[],\r\n      GaUserAgeGenSeries :[],\r\n      GaUserAgeDeviceSeries :[],\r\n      GaUserAgeRegionSeries :[],      \r\n      keywordGap : {\r\n        series: [\r\n          {\r\n            name: \"Source1\",\r\n            data: [0.77, 0.88, 0.99, 0.12, 0.56, 0.41, 0.42, 0.44, 0.55, 0.66, 0.55, 0.11, 0.12, 0.13, 0.15, 0.46, 0.79, 0.53, 0.12, 0.86, 0.77, 0.2, 0.55, 0.44]\r\n          },\r\n          {\r\n            name: \"Source2\",\r\n            data: [0.77, 0.8, 0.55, 0.22, 0.33, 0.76, 0.45, 0.52, 0.01, 0.76, 0.22, 0.78, 0.65, 0.63, 0.93, 0.94, 0.82, 0.2, 0.46, 0.15, 0.76, 0.22, 0.46, 0.55, 0.34, 0.74, 0.45]\r\n          },\r\n          {\r\n            name: \"Source3\",\r\n            data: [0.77, 0.88, 0.99, 0.11, 0.12, 0.34, 0.56, 0.4, 0.56, 0.41, 0.42, 0.44, 0.55, 0.66, 0.77, 0.99, 0.11, 0.55, 0.11, 0.86, 0.77, 0.2, 0.55, 0.44]\r\n          },\r\n          {\r\n            name: \"Source4\",\r\n            data: [0.77, 0.8, 0.55, 0.22, 0.12, 0.13, 0.76, 0.45, 0.52, 0.01, 0.76, 0.22, 0.78, 0.65, 0.63, 0.93, 0.94, 0.82, 0.2, 0.46, 0.15, 0.76, 0.74, 0.45]\r\n          },\r\n        ],\r\n          height: 350,\r\n          options: {\r\n            chart: {\r\n              type: 'line',\r\n              dropShadow: {\r\n                enabled: false,\r\n                color: '#000',\r\n                top: 18,\r\n                left: 7,\r\n                blur: 10,\r\n                opacity: 0.2,\r\n              },\r\n              toolbar: {\r\n                show: false\r\n              }, \r\n              zoom: {\r\n                enabled: false,\r\n              }\r\n            },\r\n            legend: {\r\n              position: 'right',\r\n              horizontalAlign: 'right', \r\n            },\r\n            colors: ['#404141','#ed7d31','#a4a4a4','#ffc000'],\r\n            dataLabels: {\r\n              enabled: true,\r\n              background: {\r\n                foreColor: '#000',\r\n                padding: 0,\r\n                borderRadius: 0,\r\n                borderColor: 'transparent',\r\n              },\r\n              style: {\r\n                fontSize: '14px',\r\n                fontFamily: 'Helvetica, Arial, sans-serif',\r\n                fontWeight: 'bold',\r\n                colors: ['transparent'],\r\n              },\r\n              offsetY: -10,\r\n            },\r\n            markers: {\r\n              size: 5,\r\n              hover: {\r\n                size: 5,\r\n                sizeOffset: 5,\r\n                fillColor: '#000',\r\n              },\r\n              discrete: [{\r\n                fillColor: '#e3e3e3',\r\n                strokeColor: '#fff',\r\n                size: 5\r\n              }]\r\n            },\r\n            grid: {\r\n              show: true,\r\n            },\r\n            xaxis: {\r\n              categories: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],\r\n              tickPlacement: 'between'\r\n            },\r\n            yaxis: {\r\n              show: false\r\n            }, \r\n            \r\n          },\r\n      }, \r\n    \r\n      GaAnalysisOption : {options: {\r\n          chart: {\r\n            width: '45%',\r\n            redrawOnParentResize: true,\r\n            toolbar: {\r\n              show: false,\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n          },\r\n          legend: {\r\n            show: false,\r\n          },\r\n          fill: {\r\n            colors: ['#8faadc' ,'#fb9874'],\r\n          },\r\n          plotOptions: {\r\n            bar: {\r\n              columnWidth: '45%',\r\n              distributed: true,\r\n            }\r\n          },\r\n          grid: {\r\n            show: false,\r\n          },\r\n          xaxis: {\r\n            axisTicks: {\r\n              show: false,\r\n            },\r\n            categories: ['Male', 'Female',],\r\n            labels: {\r\n              style: {\r\n                colors: ['#8faadc' ,'#fb9874'],\r\n                fontSize: '12px'\r\n              }\r\n            },\r\n            title : {\r\n              text : '',\r\n              offsetX: 100,\r\n              offsetY: 0,\r\n              style: {\r\n                fontSize: '14px',\r\n                fontFamily: 'Helvetica, Arial, sans-serif',\r\n                fontWeight: 600,\r\n                cssClass: 'apexcharts-xaxis-title',\r\n              },\r\n            }\r\n          },\r\n          yaxis: {\r\n            axisTicks: {\r\n              show: false\r\n            },\r\n            axisBorder: {\r\n              show: true,\r\n            },\r\n            title : {\r\n              text: '',\r\n              offsetX: 0,\r\n              offsetY: -110,\r\n              style: {\r\n                color: undefined,\r\n                fontSize: '14px',\r\n                fontFamily: 'Helvetica, Arial, sans-serif',\r\n                fontWeight: 600,\r\n                cssClass: 'apexcharts-xaxis-title',\r\n              },\r\n            }\r\n          },\r\n        },\r\n        series: []\r\n      },\r\n\r\n\r\n    };\r\n\r\n  }\r\n\r\n  tabToggle = (tab) => {\r\n    const activeTab = this.state;\r\n    \r\n    if ( activeTab !== tab) {\r\n      this.setState({ activeTab: tab });\r\n    }\r\n  }\r\n\r\n  listClickEvt = (evt) => {\r\n    evt.preventDefault();\r\n    const getNum = Number(evt.currentTarget.className.replace('item-',''));\r\n\r\n    this.setState({\r\n      activeId : getNum,\r\n    });\r\n  }\r\n\r\n  analysisClickEvt = (evt) => {\r\n    evt.preventDefault();\r\n    const getNum = Number(evt.currentTarget.className.replace('analysis-item-',''));\r\n\r\n    this.setState({\r\n      listActiveId: getNum,\r\n    });\r\n  }\r\n\r\n  \r\n  \r\n  inchangeOption = (...args) => {\r\n    var tableData = [];\r\n    var data1 = 0 ;\r\n    var data2 = 0 ;\r\n    const statesItems = this.state ;\r\n\r\n    var Columns = JSON.parse(JSON.stringify(statesItems.columns));\r\n    Columns[2].Header = args[0].label;\r\n   \r\n    \r\n    if (statesItems.TableDataSocial.length > 0){\r\n      statesItems.GASocialComparison.CategoryData.forEach(function(item,idx){\r\n        if (args[0].value === \"Users\"){\r\n          data1 = statesItems.GASocialComparison.UsersData[idx];\r\n        }\r\n        else if (args[0].value === \"Sessions\"){\r\n          data1 = statesItems.GASocialComparison.SessionsData[idx];\r\n        }\r\n        else if (args[0].value === \"Conversion\"){\r\n          data1 = statesItems.GASocialComparison.ConversionRateData[idx];\r\n        }\r\n        else if (args[0].value === \"Bounce\"){\r\n          data1 = statesItems.GASocialComparison.BounceRateData[idx];\r\n        }\r\n\r\n        if (statesItems.externalSelected.value === \"Buzz\"){\r\n          data2 = statesItems.GASocialComparison.BuzzData[idx];\r\n        }\r\n        else if (statesItems.externalSelected.value === \"Product\"){\r\n          data2 = statesItems.GASocialComparison.ProductsData[idx];\r\n        }\r\n        else if (statesItems.externalSelected.value === \"SearchVolume\"){\r\n          data2 = statesItems.GASocialComparison.SearchVolumeData[idx];\r\n        }\r\n        tableData.push({id:idx + 1 , title:item , purchase : data1, satisfaction:data2,});\r\n      }); \r\n    }\r\n    this.setState({\r\n      internalIndexSelected: [args[0]],\r\n      TableDataSocial: tableData ,\r\n      columns : Columns ,  \r\n    });\r\n\r\n  }\r\n\r\n  exchangeOption = (...args) => {\r\n    var tableData = [];\r\n    var data1 = 0 ;\r\n    var data2 = 0 ;\r\n    const statesItems = this.state ;\r\n    var Columns = JSON.parse(JSON.stringify(statesItems.columns));\r\n    Columns[3].Header = args[0].label;\r\n\r\n    //console.log('exchangeOption',Columns1 , statesItems.internalIndexSelected );\r\n    if (statesItems.TableDataSocial.length > 0){\r\n      statesItems.GASocialComparison.CategoryData.forEach(function(item,idx){\r\n        if (statesItems.internalIndexSelected.value === \"Users\"){\r\n          data1 = statesItems.GASocialComparison.UsersData[idx];\r\n        }\r\n        else if (statesItems.internalIndexSelected.value === \"Sessions\"){\r\n          data1 = statesItems.GASocialComparison.SessionsData[idx];\r\n        }\r\n        else if (statesItems.internalIndexSelected.value === \"Conversion\"){\r\n          data1 = statesItems.GASocialComparison.ConversionRateData[idx];\r\n        }\r\n        else if (statesItems.internalIndexSelected.value === \"Bounce\"){\r\n          data1 = statesItems.GASocialComparison.BounceRateData[idx];\r\n        }\r\n\r\n        if (args[0].value === \"Buzz\"){\r\n          data2 = statesItems.GASocialComparison.BuzzData[idx];\r\n        }\r\n        else if (args[0].value === \"Product\"){\r\n          data2 = statesItems.GASocialComparison.ProductsData[idx];\r\n        }\r\n        else if (args[0].value === \"SearchVolume\"){\r\n          data2 = statesItems.GASocialComparison.SearchVolumeData[idx];\r\n        }\r\n        tableData.push({id:idx + 1 , title:item , purchase : data1, satisfaction:data2,});\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      externalSelected: [args[0]],\r\n      TableDataSocial: tableData ,\r\n      columns : Columns ,  \r\n    });\r\n\r\n    \r\n  }\r\n\r\n  handleOneChecked = (evt) => {\r\n    // eslint-disable-next-line prefer-const\r\n    let { checkInfo } = this.state;\r\n    checkInfo.forEach(item => {\r\n      if (item.value === evt.target.value){\r\n        if (!item.isChecked ){\r\n            item.isChecked = evt.target.checked;\r\n          } \r\n      }\r\n      else{\r\n        item.isChecked = false;\r\n      }\r\n    });\r\n    this.setState({ checkInfo });\r\n  }\r\n\r\n  render() {\r\n    const statesChart = this.state;\r\n    const statesItems = this.state;\r\n    // const { internalIndexSelected , externalSelected } = this.state;\r\n    const internalIndex = [\r\n      { label: 'Users', value: 'Users', key: 0 },\r\n      { label: 'Sessions', value: 'Sessions', key: 1 },\r\n      { label: 'Conversion Rate', value: 'Conversion', key: 2 },\r\n      { label: 'Bounce Rate', value: 'Bounce', key: 3 },\r\n    ];\r\n\r\n    const externalIndex = [\r\n      { label: 'Buzz', value: 'Buzz', key: 0 },\r\n      { label: 'Num of Product', value: 'Product', key: 1 },\r\n      { label: 'Search Volume', value: 'SearchVolume', key: 2 },\r\n    ]; \r\n\r\n    const indiCont = [\r\n      {id: 1, title :  'Users',},\r\n      {id: 2, title :  'Sessions',},\r\n      {id: 3, title :  'Conversion',},\r\n      {id: 4, title :  'Bounce',},\r\n    ]\r\n\r\n    const initDemoAnalysis = [\r\n      {id: 1, title :  'Gender',},\r\n      {id: 2, title :  'Ages',},\r\n      {id: 3, title :  'Device',},\r\n      {id: 4, title :  'Region',},\r\n    ]\r\n\r\n    const validateKeyword = (value) => {\r\n      let error;\r\n      if (!statesItems.keyWordtext) {\r\n        error = 'No Keywords';\r\n      } \r\n      return error;\r\n    }\r\n\r\n    const onKeywordChange = (e) =>{\r\n      \r\n      this.setState({\r\n        keyWordtext : e.target.value\r\n      }); \r\n    };\r\n\r\n\r\n\r\n    /*  Start LJJ*/\r\n    const setGAUserIndicatorsBar = (recvData) => {\r\n\r\n      var gaUserBarGenOpt = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var gaUserBarAgeOpt = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var gaUserBarDeviceOpt = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var gaUserBarRegionOpt = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      \r\n      var gaUserBarGenSeries = [{data: [recvData.gender.Male, recvData.gender.Female], title: 'Users',}];\r\n      var gaUserAgeGenSeries = [{data: [recvData.age._18and24, recvData.age._24and34,recvData.age._35and44,recvData.age._45and54,recvData.age._55and64,recvData.age._65plus], title: 'Users',}];\r\n      var gaUserAgeDeviceSeries = [{data: [recvData.device_category.Desktop, recvData.device_category.Mobile,recvData.device_category.Tablet,], title: 'Users',}];\r\n      var gaUserAgeRegionSeries = [{data: [recvData.region.Region1, recvData.region.Region2,recvData.region.Region3,recvData.region.Region4,recvData.region.Region5,], title: 'Users',}];\r\n\r\n      gaUserBarGenOpt.options.xaxis.categories = ['Male', 'Female',];\r\n      gaUserBarGenOpt.options.xaxis.title.text = '성별';\r\n      gaUserBarGenOpt.options.yaxis.title.text = 'Users';\r\n\r\n      gaUserBarAgeOpt.options.xaxis.categories =  ['10s','20s','30s','40s','50s','60+',];\r\n      gaUserBarAgeOpt.options.xaxis.title.text = '연령';\r\n      gaUserBarAgeOpt.options.yaxis.title.text = 'Users';\r\n \r\n      gaUserBarDeviceOpt.options.xaxis.categories =   ['Desktop','Mobile','Tablet',];\r\n      gaUserBarDeviceOpt.options.xaxis.title.text = '디바이스';\r\n      gaUserBarDeviceOpt.options.yaxis.title.text = 'Users';\r\n\r\n      gaUserBarRegionOpt.options.xaxis.categories =  recvData.region.Regions;\r\n      gaUserBarRegionOpt.options.xaxis.title.text = '지역';\r\n      gaUserBarRegionOpt.options.yaxis.title.text = 'Users';\r\n\r\n      this.setState({\r\n        GaUserBarGenOpt : gaUserBarGenOpt.options,\r\n        GaUserBarAgeOpt : gaUserBarAgeOpt.options,\r\n        GaUserBarDeviceOpt : gaUserBarDeviceOpt.options ,\r\n        GaUserBarRegionOpt : gaUserBarRegionOpt.options , \r\n        GaUserBarGenSeries : gaUserBarGenSeries ,\r\n        GaUserAgeGenSeries : gaUserAgeGenSeries ,\r\n        GaUserAgeDeviceSeries : gaUserAgeDeviceSeries ,\r\n        GaUserAgeRegionSeries : gaUserAgeRegionSeries ,\r\n      }); \r\n    }\r\n    \r\n    const setGAUserIndicatorsLine = (recvData) => {\r\n      var inflowDataopt = JSON.parse(JSON.stringify(statesItems.keywordGap.options));\r\n      var bounceopt = JSON.parse(JSON.stringify(statesItems.keywordGap.options));\r\n      var mostVisitedPageopt = JSON.parse(JSON.stringify(statesItems.keywordGap.options));\r\n      var conversionopt = JSON.parse(JSON.stringify(statesItems.keywordGap.options));\r\n      var bounceseries = [];\r\n      var conversionseries = [];\r\n      var inflowseries = [];\r\n      var mostVisitedPageseries = [];\r\n      var inflowLine = [];\r\n      var inflowCategory = [];\r\n      var inflowSource1 = {name:\"Source1\" ,data:[], };\r\n      var inflowSource2 = {name:\"Source2\" ,data:[], };\r\n      var inflowSource3 = {name:\"Source3\" ,data:[], };\r\n      var inflowSource4 = {name:\"Source4\" ,data:[], };\r\n\r\n      var bounceLine = [];\r\n      var bounceCategory = [];\r\n      var bounceSource1 = {name:\"Source1\" ,data:[], };\r\n      var bounceSource2 = {name:\"Source2\" ,data:[], };\r\n      var bounceSource3 = {name:\"Source3\" ,data:[], };\r\n      var bounceSource4 = {name:\"Source4\" ,data:[], };\r\n\r\n      var mostVisitedPageLine = [];\r\n      var mostVisitedPageCategory = [];\r\n      var mostVisitedPageSource1 = {name:\"Source1\" ,data:[], };\r\n      var mostVisitedPageSource2 = {name:\"Source2\" ,data:[], };\r\n      var mostVisitedPageSource3 = {name:\"Source3\" ,data:[], };\r\n      var mostVisitedPageSource4 = {name:\"Source4\" ,data:[], };\r\n\r\n      var conversionLine = [];\r\n      var conversionCategory = [];\r\n      var conversionSource1 = {name:\"Source1\" ,data:[], };\r\n      var conversionSource2 = {name:\"Source2\" ,data:[], };\r\n      var conversionSource3 = {name:\"Source3\" ,data:[], };\r\n\r\n      recvData.inflow.forEach(function(item,idx){\r\n        inflowSource1.data.push(item.legend1);\r\n        inflowSource2.data.push(item.legend2);\r\n        inflowSource3.data.push(item.legend3);\r\n        inflowSource4.data.push(item.legend4);\r\n        inflowCategory.push(item.Date.substring(8,10));\r\n      });\r\n      inflowSource1.name = recvData.legend_names.inflow_names[0] ;\r\n      inflowSource2.name = recvData.legend_names.inflow_names[1] ;\r\n      inflowSource3.name = recvData.legend_names.inflow_names[2] ;\r\n      inflowSource4.name = recvData.legend_names.inflow_names[3] ;\r\n\r\n      recvData.bounce.forEach(function(item,idx){\r\n        bounceSource1.data.push(item.legend1);\r\n        bounceSource2.data.push(item.legend2);\r\n        bounceSource3.data.push(item.legend3);\r\n        bounceSource4.data.push(item.legend4);\r\n        bounceCategory.push(item.Date.substring(8,10));\r\n      });\r\n      bounceSource1.name = recvData.legend_names.bounce_names[0] ;\r\n      bounceSource2.name = recvData.legend_names.bounce_names[1] ;\r\n      bounceSource3.name = recvData.legend_names.bounce_names[2] ;\r\n      bounceSource4.name = recvData.legend_names.bounce_names[3] ;\r\n\r\n      recvData.mostVisitedPage.forEach(function(item,idx){\r\n        mostVisitedPageSource1.data.push(item.legend1);\r\n        mostVisitedPageSource2.data.push(item.legend2);\r\n        mostVisitedPageSource3.data.push(item.legend3);\r\n        mostVisitedPageSource4.data.push(item.legend4);\r\n        mostVisitedPageCategory.push(item.Date.substring(8,10));\r\n      });\r\n      mostVisitedPageSource1.name = recvData.legend_names.mvp_names[0];\r\n      mostVisitedPageSource2.name = recvData.legend_names.mvp_names[1];\r\n      mostVisitedPageSource3.name = recvData.legend_names.mvp_names[2];\r\n      mostVisitedPageSource4.name = recvData.legend_names.mvp_names[3];\r\n\r\n      recvData.conversion.forEach(function(item,idx){\r\n        conversionSource1.data.push(item.legend1);\r\n        conversionSource2.data.push(item.legend2);\r\n        conversionSource3.data.push(item.legend3);\r\n        conversionCategory.push(item.Date.substring(8,10));\r\n      });\r\n      conversionSource1.name = recvData.legend_names.conversion_names[0];\r\n      conversionSource2.name = recvData.legend_names.conversion_names[1];\r\n      conversionSource3.name = recvData.legend_names.conversion_names[2];\r\n\r\n      inflowseries.push(inflowSource1);\r\n      inflowseries.push(inflowSource2);\r\n      inflowseries.push(inflowSource3);\r\n      inflowseries.push(inflowSource4);\r\n      bounceseries.push(bounceSource1);\r\n      bounceseries.push(bounceSource2);\r\n      bounceseries.push(bounceSource3);\r\n      bounceseries.push(bounceSource4);\r\n      mostVisitedPageseries.push(mostVisitedPageSource1);\r\n      mostVisitedPageseries.push(mostVisitedPageSource2);\r\n      mostVisitedPageseries.push(mostVisitedPageSource3);\r\n      mostVisitedPageseries.push(mostVisitedPageSource4);\r\n      conversionseries.push(conversionSource1);\r\n      conversionseries.push(conversionSource2);\r\n      conversionseries.push(conversionSource3);\r\n      \r\n\r\n      inflowDataopt.xaxis.categories = inflowCategory;\r\n      bounceopt.xaxis.categories = bounceCategory;\r\n      mostVisitedPageopt.xaxis.categories = mostVisitedPageCategory;\r\n      conversionopt.xaxis.categories = conversionCategory;\r\n      this.setState({\r\n        bounceOpt : bounceopt,\r\n        conversionOpt : conversionopt,\r\n        inflowOpt : inflowDataopt ,\r\n        mostVisitedPageOpt : mostVisitedPageopt, \r\n        bounceSeries  : bounceseries,\r\n        conversionSeries  : conversionseries ,\r\n        inflowSeries  : inflowseries,\r\n        mostVisitedPageSeries  : mostVisitedPageseries, \r\n      });\r\n    }\r\n    \r\n    const setGABoardTrend = (recvData) => {\r\n      var UserChartData = {name:\"User\", data : [] ,};\r\n      var SessionsChartData = {name:\"Sessions\",data : [] ,};\r\n      var ConversionChartData = {name:\"Conversion\", data : [] ,};\r\n      var BounceChartData = {name:\"Bounce\",data : [] ,};\r\n      var userSessionData = [];\r\n      var conversionBounceData = [];\r\n      var category = [];\r\n      recvData.items.forEach(function(item,idx){\r\n        category.push(item.Date.substring(8,11));\r\n        UserChartData.data.push(item.Users);\r\n        SessionsChartData.data.push(item.Sessions);\r\n        ConversionChartData.data.push(item.Conversion_Rate);\r\n        BounceChartData.data.push(item.Bounce_Rate);\r\n      });\r\n      userSessionData.push(UserChartData);\r\n      userSessionData.push(SessionsChartData);\r\n      conversionBounceData.push(ConversionChartData);\r\n      conversionBounceData.push(BounceChartData);\r\n      this.setState({\r\n        UsersSessionsSeries : userSessionData,\r\n        ConversionBounceRateSeries : conversionBounceData,\r\n      });\r\n      this.setState(prev =>({  \r\n        ...prev,\r\n        totalGraph : {\r\n          options : {\r\n            xaxis : {\r\n              categories: category,\r\n            }\r\n          }\r\n        },              \r\n      }));\r\n    }\r\n\r\n    const setGADemographicsAnalysis = (recvData) => {\r\n      var analysisChartArr = [];\r\n\r\n      var Genders = ['Male', 'Female',];\r\n      var genderUserSeries = [{data: [recvData.gender.Users.Male, recvData.gender.Users.Female], title: 'Users',}];\r\n      var genderSessionsSeries = [{data: [recvData.gender.Sessions.Male, recvData.gender.Sessions.Female], title: 'Sessions'}];\r\n      var genderConversionSeries = [{data: [recvData.gender.Conversion_Rate.Male, recvData.gender.Conversion_Rate.Female], title: 'Conversion', }];\r\n      var genderBounceSeries = [{data: [recvData.gender.Bounce_Rate.Male, recvData.gender.Bounce_Rate.Female], title: 'Bounce', }];\r\n\r\n      var Ages = ['10s','20s','30s','40s','50s','60+',];\r\n      var ageUserSeries = [{data: [recvData.age.Users._18and24, recvData.age.Users._24and34,recvData.age.Users._35and44,recvData.age.Users._45and54,recvData.age.Users._55and64,recvData.age.Users._65plus], title: 'Users',}];\r\n      var ageSessionsSeries = [{data: [recvData.age.Sessions._18and24, recvData.age.Sessions._24and34,recvData.age.Sessions._35and44,recvData.age.Sessions._45and54,recvData.age.Sessions._55and64,recvData.age.Sessions._65plus], title: 'Sessions'}];\r\n      var ageConversionSeries = [{data: [recvData.age.Conversion_Rate._18and24, recvData.age.Conversion_Rate._24and34,recvData.age.Conversion_Rate._35and44,recvData.age.Conversion_Rate._45and54,recvData.age.Conversion_Rate._55and64,recvData.age.Conversion_Rate._65plus], title: 'Conversion', }];\r\n      var ageBounceSeries = [{data: [recvData.age.Bounce_Rate._18and24, recvData.age.Bounce_Rate._24and34,recvData.age.Bounce_Rate._35and44,recvData.age.Bounce_Rate._45and54,recvData.age.Bounce_Rate._55and64,recvData.age.Bounce_Rate._65plus], title: 'Bounce', }];\r\n\r\n      var Devices = ['Desktop','Mobile','Tablet',];\r\n      var deviceUserSeries = [{data: [recvData.device_category.Users.Desktop, recvData.device_category.Users.Mobile,recvData.device_category.Users.Tablet,], title: 'Users',}];\r\n      var deviceSessionsSeries = [{data: [recvData.device_category.Sessions.Desktop, recvData.device_category.Sessions.Mobile,recvData.device_category.Sessions.Tablet,], title: 'Sessions'}];\r\n      var deviceConversionSeries = [{data: [recvData.device_category.Conversion_Rate.Desktop, recvData.device_category.Conversion_Rate.Mobile,recvData.device_category.Conversion_Rate.Tablet,], title: 'Conversion', }];\r\n      var deviceBounceSeries = [{data: [recvData.device_category.Bounce_Rate.Desktop, recvData.device_category.Bounce_Rate.Mobile,recvData.device_category.Bounce_Rate.Tablet,], title: 'Bounce', }];\r\n\r\n      var Regions = recvData.region.Regions;\r\n      var regionUserSeries = [{data: [recvData.region.Users.Region1, recvData.region.Users.Region2,recvData.region.Users.Region3,recvData.region.Users.Region4,recvData.region.Users.Region5,], title: 'Users',}];\r\n      var regionSessionsSeries = [{data: [recvData.region.Sessions.Region1, recvData.region.Sessions.Region2,recvData.region.Sessions.Region3,recvData.region.Sessions.Region4,recvData.region.Sessions.Region5,], title: 'Sessions'}];\r\n      var regionConversionSeries = [{data: [recvData.region.Conversion_Rate.Region1, recvData.region.Conversion_Rate.Region2,recvData.region.Conversion_Rate.Region3,recvData.region.Conversion_Rate.Region4,recvData.region.Conversion_Rate.Region5,], title: 'Conversion', }];\r\n      var regionBounceSeries = [{data: [recvData.region.Bounce_Rate.Region1, recvData.region.Bounce_Rate.Region2,recvData.region.Bounce_Rate.Region3,recvData.region.Bounce_Rate.Region4,recvData.region.Bounce_Rate.Region5,], title: 'Bounce', }];\r\n\r\n      var genderChartDataDemo = [];\r\n      var genderChartDataopt1 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var genderChartDataopt2 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var genderChartDataopt3 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var genderChartDataopt4 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n\r\n      var agesChartDataDemo = [];\r\n      var agesChartDataopt1 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var agesChartDataopt2 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var agesChartDataopt3 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var agesChartDataopt4 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n\r\n      var devicesChartDataDemo = [];\r\n      var devicesChartDataopt1 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var devicesChartDataopt2 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var devicesChartDataopt3 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var devicesChartDataopt4 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n\r\n      var regionChartDataDemo = [];\r\n      var regionChartDataopt1 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var regionChartDataopt2 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var regionChartDataopt3 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n      var regionChartDataopt4 = JSON.parse(JSON.stringify(statesItems.GaAnalysisOption));\r\n\r\n      genderChartDataopt1.options.xaxis.categories = Genders;\r\n      genderChartDataopt1.options.xaxis.title.text = '성별';\r\n      genderChartDataopt1.options.yaxis.title.text = 'Users';\r\n      genderChartDataopt1.series = genderUserSeries;\r\n\r\n      genderChartDataopt2.options.xaxis.categories = Genders;\r\n      genderChartDataopt2.options.xaxis.title.text = '성별';\r\n      genderChartDataopt2.options.yaxis.title.text = 'Sessions';\r\n      genderChartDataopt2.series = genderSessionsSeries;\r\n\r\n      genderChartDataopt3.options.xaxis.categories = Genders;\r\n      genderChartDataopt3.options.xaxis.title.text = '성별';\r\n      genderChartDataopt3.options.yaxis.title.text = 'Conversion';\r\n      genderChartDataopt3.series = genderConversionSeries;\r\n\r\n      genderChartDataopt4.options.xaxis.categories = Genders;\r\n      genderChartDataopt4.options.xaxis.title.text = '성별';\r\n      genderChartDataopt4.options.yaxis.title.text = 'Bounce';\r\n      genderChartDataopt4.series = genderBounceSeries;\r\n      \r\n      genderChartDataDemo.push(genderChartDataopt1);\r\n      genderChartDataDemo.push(genderChartDataopt2);\r\n      genderChartDataDemo.push(genderChartDataopt3);\r\n      genderChartDataDemo.push(genderChartDataopt4);\r\n\r\n      agesChartDataopt1.options.xaxis.categories = Ages;\r\n      agesChartDataopt1.options.xaxis.title.text = '';\r\n      agesChartDataopt1.options.yaxis.title.text = 'Users';\r\n      agesChartDataopt1.series = ageUserSeries;\r\n\r\n      agesChartDataopt2.options.xaxis.categories = Ages;\r\n      agesChartDataopt2.options.xaxis.title.text = '';\r\n      agesChartDataopt2.options.yaxis.title.text = 'Sessions';\r\n      agesChartDataopt2.series = ageSessionsSeries;\r\n\r\n      agesChartDataopt3.options.xaxis.categories = Ages;\r\n      agesChartDataopt3.options.xaxis.title.text = '';\r\n      agesChartDataopt3.options.yaxis.title.text = 'Conversion';\r\n      agesChartDataopt3.series = ageConversionSeries;\r\n\r\n      agesChartDataopt4.options.xaxis.categories = Ages;\r\n      agesChartDataopt4.options.xaxis.title.text = '';\r\n      agesChartDataopt4.options.yaxis.title.text = 'Bounce';\r\n      agesChartDataopt4.series = ageBounceSeries;\r\n\r\n      agesChartDataDemo.push(agesChartDataopt1);\r\n      agesChartDataDemo.push(agesChartDataopt2);\r\n      agesChartDataDemo.push(agesChartDataopt3);\r\n      agesChartDataDemo.push(agesChartDataopt4);\r\n\r\n\r\n      devicesChartDataopt1.options.xaxis.categories = Devices;\r\n      devicesChartDataopt1.options.xaxis.title.text = '';\r\n      devicesChartDataopt1.options.yaxis.title.text = 'Users';\r\n      devicesChartDataopt1.series = deviceUserSeries;\r\n\r\n      devicesChartDataopt2.options.xaxis.categories = Devices;\r\n      devicesChartDataopt2.options.xaxis.title.text = '';\r\n      devicesChartDataopt2.options.yaxis.title.text = 'Sessions';\r\n      devicesChartDataopt2.series = deviceSessionsSeries;\r\n\r\n      devicesChartDataopt3.options.xaxis.categories = Devices;\r\n      devicesChartDataopt3.options.xaxis.title.text = '';\r\n      devicesChartDataopt3.options.yaxis.title.text = 'Conversion';\r\n      devicesChartDataopt3.series = deviceConversionSeries;\r\n\r\n      devicesChartDataopt4.options.xaxis.categories = Devices;\r\n      devicesChartDataopt4.options.xaxis.title.text = '';\r\n      devicesChartDataopt4.options.yaxis.title.text = 'Bounce';\r\n      devicesChartDataopt4.series = deviceBounceSeries;\r\n\r\n      devicesChartDataDemo.push(devicesChartDataopt1);\r\n      devicesChartDataDemo.push(devicesChartDataopt2);\r\n      devicesChartDataDemo.push(devicesChartDataopt3);\r\n      devicesChartDataDemo.push(devicesChartDataopt4);\r\n\r\n\r\n      regionChartDataopt1.options.xaxis.categories = Regions;\r\n      regionChartDataopt1.options.xaxis.title.text = '';\r\n      regionChartDataopt1.options.yaxis.title.text = 'Users';\r\n      regionChartDataopt1.series = regionUserSeries;\r\n\r\n      regionChartDataopt2.options.xaxis.categories = Regions;\r\n      regionChartDataopt2.options.xaxis.title.text = '';\r\n      regionChartDataopt2.options.yaxis.title.text = 'Sessions';\r\n      regionChartDataopt2.series = regionSessionsSeries;\r\n\r\n      regionChartDataopt3.options.xaxis.categories = Regions;\r\n      regionChartDataopt3.options.xaxis.title.text = '';\r\n      regionChartDataopt3.options.yaxis.title.text = 'Conversion';\r\n      regionChartDataopt3.series = regionConversionSeries;\r\n\r\n      regionChartDataopt4.options.xaxis.categories = Regions;\r\n      regionChartDataopt4.options.xaxis.title.text = '';\r\n      regionChartDataopt4.options.yaxis.title.text = 'Bounce';\r\n      regionChartDataopt4.series = regionBounceSeries;\r\n\r\n      regionChartDataDemo.push(regionChartDataopt1);\r\n      regionChartDataDemo.push(regionChartDataopt2);\r\n      regionChartDataDemo.push(regionChartDataopt3);\r\n      regionChartDataDemo.push(regionChartDataopt4);\r\n\r\n      analysisChartArr.push(genderChartDataDemo);\r\n      analysisChartArr.push(agesChartDataDemo);\r\n      analysisChartArr.push(devicesChartDataDemo);\r\n      analysisChartArr.push(regionChartDataDemo);\r\n      console.log('setGADemographicsAnalysis',analysisChartArr);\r\n      this.setState({  \r\n        AnalysisChartArray : analysisChartArr ,\r\n      }); \r\n     \r\n    }\r\n\r\n    const setGASocialComparison = (recvData) => {\r\n      var category = [];\r\n      var Users = [];\r\n      var Sessions = [];\r\n      var ConversionRate = [];\r\n      var BounceRate = [];\r\n      var Buzz = [];\r\n      var SearchVolume = [];\r\n      var Products = [];\r\n      var tableData = [];\r\n      recvData.items.forEach(function(item,idx){\r\n        category.push(item.Keyword);\r\n        Users.push(item.Users);\r\n        Sessions.push(item.Sessions);\r\n        ConversionRate.push(item.Conversion_Rate);\r\n        BounceRate.push(item.Bounce_Rate);\r\n        Buzz.push(item.Buzz);\r\n        SearchVolume.push(item.SearchVolume);\r\n        Products.push(item.Products);\r\n        tableData.push({id:idx + 1 , title:item.Keyword , purchase : item.Users, satisfaction:item.Buzz,});\r\n          \r\n      });    \r\n\r\n      this.setState({  \r\n        TableDataSocial: tableData ,\r\n        internalIndexSelected  : { label: 'Users', value: 'Users', key: 0 } ,\r\n        externalSelected : { label: 'Buzz', value: 'Buzz', key: 0 },\r\n        GASocialComparison : {\r\n          CategoryData : category ,\r\n          UsersData : Users , \r\n          SessionsData : Sessions ,  \r\n          ConversionRateData : ConversionRate ,\r\n          BounceRateData : BounceRate , \r\n          BuzzData : Buzz , \r\n          SearchVolumeData : SearchVolume , \r\n          ProductsData : Products ,\r\n        } ,\r\n      }); \r\n    }\r\n\r\n    const setGAKeywordGap = (recvData) => {\r\n      var category = [];\r\n      var BounceRate = [];\r\n      var ConversionRate = [];\r\n      var Sessions = [];\r\n      var SessionsRatio = [];\r\n      var Users = [];\r\n      var UsersRatio = [];\r\n      var usersChartDataGap = [];\r\n      var sessionsChartDataGap  = [];\r\n      var conversionChartDataGap   = [];\r\n      var bounceChartDataGap    = [];\r\n      var chartDataArrayGap = [];\r\n      // console.log('setGAKeywordGap',recvData);\r\n      \r\n      recvData.items.forEach(function(item,idx){\r\n        category.push(item.Keyword);\r\n        BounceRate.push(item.Bounce_Rate);\r\n        ConversionRate.push(item.Conversion_Rate);\r\n        Sessions.push(item.Sessions);\r\n        SessionsRatio.push(item.Sessions_Ratio);\r\n        Users.push(item.Users);\r\n        UsersRatio.push(item.Users_Ratio);\r\n      });\r\n      // console.log('setGAKeywordGap',category);\r\n      usersChartDataGap.push({id: 1, series: [{data: Users, title: 'Users', average: UsersRatio,}]});\r\n      sessionsChartDataGap.push({id: 1, series: [{data: Sessions, title: 'Sessions', average: SessionsRatio,}]});\r\n      conversionChartDataGap.push( {id: 1, series: [{data: ConversionRate , title: 'Conversion',average: [], }]});\r\n      bounceChartDataGap.push( {id: 1, series: [{data: BounceRate, title: 'Bounce', average: [],}]});\r\n      chartDataArrayGap.push(usersChartDataGap);\r\n      chartDataArrayGap.push(sessionsChartDataGap);\r\n      chartDataArrayGap.push(conversionChartDataGap);\r\n      chartDataArrayGap.push(bounceChartDataGap);\r\n      // console.log('setGAKeywordGap',chartDataArray);\r\n      this.setState({  \r\n          chartDataArray: chartDataArrayGap ,\r\n        });\r\n\r\n      this.setState(prev =>({  \r\n           ...prev,\r\n           horizontal : {\r\n              options : {\r\n                xaxis : {\r\n                  categories: category,\r\n                }\r\n              }\r\n           }, \r\n             \r\n      }));\r\n    }\r\n\r\n\r\n    const getGAUserIndicatorsBar = (searchCondition) => {\r\n      axios.post(\"/trendga/GetGA_User_Indicators_Bar\",searchCondition)\r\n      .then((response) => {\r\n          console.log('getGAUserIndicatorsBar ' , response.data );\r\n          setGAUserIndicatorsBar(response.data);\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);         \r\n      });\r\n    }   \r\n\r\n    const getGAUserIndicatorsLine = (searchCondition) => {\r\n      axios.post(\"/trendga/GetGA_User_Indicators_Line\",searchCondition)\r\n      .then((response) => {\r\n          console.log('getGAUserIndicatorsLine ' , response.data );\r\n          setGAUserIndicatorsLine(response.data );\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);\r\n      });\r\n    }   \r\n\r\n    const getGABoardTrend = (searchCondition) => {\r\n      axios.post(\"/trendga/GetGA_Board_Trend\",searchCondition)\r\n      .then((response) => {\r\n          console.log('getGABoardTrend ' , response.data );\r\n          setGABoardTrend(response.data);\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);\r\n      });\r\n    }   \r\n\r\n    const getGADemographicsAnalysis = (searchCondition) => {\r\n      axios.post(\"/trendga/GetGA_Demographics_Analysis\",searchCondition)\r\n      .then((response) => {\r\n        console.log('getGADemographicsAnalysis ' , response.data );\r\n        setGADemographicsAnalysis(response.data);\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);\r\n      });\r\n    }   \r\n\r\n    const getGASocialComparison = (searchCondition) => {\r\n      axios.post(\"/trendga/GetGA_Social_Comparison\",searchCondition)\r\n      .then((response) => {\r\n        console.log('getGASocialComparison ' , response.data );\r\n        setGASocialComparison(response.data);\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);\r\n      });\r\n    }   \r\n    \r\n    const getGAKeywordGap = (searchCondition) => {\r\n      axios.post(\"/trendga/GetGA_Keyword_GAP\",searchCondition)\r\n      .then((response) => {\r\n         console.log('getGAKeywordGap ' , response.data );\r\n         setGAKeywordGap(response.data);\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);\r\n      });\r\n\r\n    }\r\n\r\n    const searchStart = () =>{\r\n      var searchCondition = {} ;\r\n      let periodUnit = '';\r\n      statesItems.checkInfo.forEach(item => {\r\n        if (item.isChecked){\r\n          periodUnit = item.value;\r\n        }\r\n      });\r\n      searchCondition.Period_Unit = periodUnit;\r\n      searchCondition.Company = statesItems.userInfo.CompanyName;\r\n      searchCondition.CompanyCode = statesItems.userInfo.CompanyCode;\r\n      searchCondition.Keyword = statesItems.keyWordtext;\r\n\r\n      console.log(\"googleAnalytics  searchStart\" , searchCondition );\r\n      \r\n      getGAKeywordGap(searchCondition);\r\n      getGASocialComparison(searchCondition);\r\n      getGADemographicsAnalysis(searchCondition);\r\n      getGABoardTrend(searchCondition);\r\n      getGAUserIndicatorsLine(searchCondition);\r\n      getGAUserIndicatorsBar(searchCondition);\r\n    }\r\n\r\n    const onKeywordpress = (e) =>{\r\n      if (e.keyCode === 13){\r\n        e.preventDefault();\r\n        // 여기서 Search 로 이동\r\n      }\r\n    };\r\n\r\n    return (\r\n      \r\n      <>\r\n        <Row>\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Form className=\"check-box-wrap multi\">\r\n                  <div className=\"tbl-vertical-heading\">\r\n                    <table>\r\n                      <tbody>\r\n                        <tr>\r\n                          <th style={{ width:'15%' }}>Period Unit</th>\r\n                          <td style={{ width:'85%' }}>\r\n                            {statesItems.checkInfo.map(items => {\r\n                              return(\r\n                                <FormGroup check inline className='check-box lookup-area' key={items.id}>\r\n                                  <Input \r\n                                  id={items.id}\r\n                                  key={items.id}\r\n                                  onChange={this.handleOneChecked}\r\n                                  checked={items.isChecked}\r\n                                  type=\"checkbox\"\r\n                                  value={items.value}\r\n                                  className='check-single-box'\r\n                                  />{' '}\r\n                                  <label htmlFor={items.id} className='bx_check_oran'>\r\n                                    <span>{items.view}</span>\r\n                                  </label>\r\n                                </FormGroup>\r\n                              )\r\n                            })}\r\n                          {/* <CustomInput\r\n                            type=\"checkbox\"\r\n                            id=\"period-daily\"\r\n                            label=\"Daily\"\r\n                            className=\"chk-remember\"\r\n                          />\r\n                          <CustomInput\r\n                            type=\"checkbox\"\r\n                            id=\"period-weekly\"\r\n                            label=\"Weekly\"\r\n                            className=\"chk-remember\"\r\n                          />\r\n                          <CustomInput\r\n                            type=\"checkbox\"\r\n                            id=\"period-montly\"\r\n                            label=\"Montly\"\r\n                            className=\"chk-remember\"\r\n                          />\r\n                          <CustomInput\r\n                            type=\"checkbox\"\r\n                            id=\"period-yearly\"\r\n                            label=\"Yearly\"\r\n                            className=\"chk-remember\"\r\n                          /> */}\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th style={{ width:'15%' }}>Keywords</th>\r\n                          <td style={{ width:'85%' }}>\r\n                            <Formik\r\n                              initialValues={{\r\n                                keyword: '',\r\n                              }}\r\n                              // onSubmit={onSubmit}\r\n                            >\r\n                            {({ errors, touched }) => (\r\n                              <FormGroup className=\"keyword-area\">\r\n                                <Field\r\n                                  className=\"form-control\"\r\n                                  name=\"keyword\"\r\n                                  validate={validateKeyword}\r\n                                  onChange={onKeywordChange}\r\n                                  onKeyDown={onKeywordpress}\r\n                                  value={statesItems.keyWordtext}\r\n                                />\r\n                                {errors.keyword && touched.keyword && (\r\n                                  <div className=\"d-block noti-text\">\r\n                                    {errors.keyword}\r\n                                  </div>\r\n                                )}\r\n                              </FormGroup>\r\n                            )}\r\n                            </Formik>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <Button className=\"btn-xl mt-4\" color=\"gray\" onClick={searchStart}>\r\n                      ENTER\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n\r\n        {/* s: GA Keyword Gap */}\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className=\"box-title\">\r\n                  <h2>GA Keyword Gap</h2>\r\n                </div>\r\n\r\n                <ul className=\"tab-list\">\r\n                  {indiCont.map((item, idx) => {\r\n                    return (\r\n                      // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\r\n                      <li \r\n                        key={idx} \r\n                        onClick={this.listClickEvt}\r\n                        className={`item-${item.id} ${statesChart.activeId === Number(item.id) ? 'active' : \"\"}` }\r\n                      >\r\n                        <span className='title'>{item.title}</span>\r\n                      </li>\r\n                    );\r\n                  })}\r\n                </ul>\r\n\r\n                <div className=\"tab-chart-area\">\r\n                  {statesItems.chartDataArray.map((list , indx) => {\r\n                      return(\r\n                        <div \r\n                          key={indx} \r\n                          className={`item-${indx + 1} graph-list`} style={statesChart.activeId === Number(`${indx + 1}`) ? {display : 'block'} : {display : 'none'}}\r\n                        >\r\n                          {list.map((item, idx) => {\r\n                            return(\r\n                              <div\r\n                                key={idx}\r\n                              >\r\n                                <div className='chart-area'>\r\n                                  <CompareBar options={statesChart.horizontal.options} series={item.series} type=\"bar\" height={210} />\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      )\r\n                    })}\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        {/* e: GA Keyword Gap */}\r\n\r\n        {/* s: GA-Social Comparison */}\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className=\"box-title\">\r\n                  <h2>GA-Social Comparison</h2>\r\n                </div>\r\n                <div className=\"table-sort-area\">\r\n                  <div className=\"comparison-select-area\">\r\n                    <span>Internal Index</span>\r\n                    <FormGroup className=\"select-box\">\r\n                      <Select\r\n                        components={{ Input: CustomSelectInput }}\r\n                        className=\"react-select\"\r\n                        classNamePrefix=\"react-select\"\r\n                        name=\"form-field-name\"\r\n                        value={statesItems.internalIndexSelected}\r\n                        onChange={this.inchangeOption}\r\n                        options={internalIndex}\r\n                      />\r\n                    </FormGroup>\r\n                    <span>External Index</span>\r\n                    <FormGroup className=\"select-box\">\r\n                      <Select\r\n                        components={{ Input: CustomSelectInput }}\r\n                        className=\"react-select\"\r\n                        classNamePrefix=\"react-select\"\r\n                        name=\"form-field-name\"\r\n                        value={statesItems.externalSelected}\r\n                        onChange={this.exchangeOption}\r\n                        options={externalIndex}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <ReactTable\r\n                    data={statesItems.TableDataSocial}\r\n                    columns={statesItems.columns}\r\n                    defaultPageSize=\"6\"\r\n                  />\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        {/* e: GA-Social Comparison */}\r\n\r\n        {/* s: GA Demographics Analysis */}\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className=\"box-title\">\r\n                  <h2>GA Demographics Analysis </h2>\r\n                </div>\r\n\r\n                <ul className=\"analysis-tab-list\">\r\n                  {initDemoAnalysis.map((item, idx) => {\r\n                    return (\r\n                      // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\r\n                      <li \r\n                        key={idx} \r\n                        onClick={this.analysisClickEvt}\r\n                        className={`analysis-item-${item.id} ${statesItems.listActiveId === Number(item.id) ? 'active' : \"\"}` }\r\n                      >\r\n                        <span className='title'>{item.title}</span>\r\n                      </li>\r\n                    );\r\n                  })}\r\n                </ul>\r\n\r\n                <div className=\"graph-area bar\">\r\n                  {statesItems.AnalysisChartArray.map((list , indx) => {\r\n                      return(\r\n                        <ul \r\n                          key={indx} \r\n                          className={`analysis-item-${indx + 1} graph-list`} style={statesItems.listActiveId === Number(`${indx + 1}`) ? {display : 'flex'} : {display : 'none'}}\r\n                        >\r\n                          {list.map((item, idx) => {\r\n                            return(\r\n                              <li\r\n                                key={idx}\r\n                              >\r\n                                { statesItems.listActiveId === Number(`${indx + 1}`) && \r\n                                <div className='chart-area bor-none'>\r\n                                  <CompareBar options={item.options} series={item.series} type=\"bar\" height={350} width='100%' className=\"analysis-chart-bar\" />\r\n                                </div>\r\n                                }\r\n                              </li>\r\n                            );\r\n                          })}\r\n                        </ul>\r\n                      )\r\n                    })}\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        {/* e: GA Demographics Analysis */}\r\n\r\n        {/* s: GA Broad Trend Chart */}\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className=\"box-title\">\r\n                  <h2>GA Broad Trend Chart</h2>\r\n                </div>\r\n                <div className=\"box-area\">\r\n                  <div className='graph-area total-area title-type box-left'>\r\n                    <p className='bx_name'>Users / Sessions</p>\r\n                    <p className='cont-noti'>* 지수화하여 표시</p>\r\n                    <CompareLine options={statesItems.totalGraph.options} series={statesItems.UsersSessionsSeries} height={statesItems.totalGraph.height} />\r\n                  </div>\r\n                  <div className='graph-area total-area title-type box-right'>\r\n                    <p className='bx_name'>Conversion rate / Bounce rate</p>\r\n                    <p className='cont-noti'>* 지수화하여 표시</p>\r\n                    <CompareLine options={statesItems.totalGraph.options} series={statesItems.ConversionBounceRateSeries} height={statesItems.totalGraph.height} />\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        {/* e: GA Broad Trend Chart */}\r\n\r\n        {/* s: GA User Indicators */}\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className=\"box-title\">\r\n                  <h2>GA User Indicators</h2>\r\n                </div>\r\n                {/* s: 탭메뉴 */}\r\n                <Nav tabs className=\"card-header-tabs keyword-gap-tab\">\r\n                  <NavItem>\r\n                    <NavLink\r\n                      className={classnames({\r\n                        active: statesItems.activeTab === '1',\r\n                      })}\r\n                      onClick={() => { this.tabToggle('1'); }}\r\n                    >\r\n                      Inflow\r\n                    </NavLink>\r\n                  </NavItem>\r\n                  <NavItem>\r\n                    <NavLink\r\n                      className={classnames({\r\n                        active: statesItems.activeTab === '2',\r\n                      })}\r\n                      onClick={() => { this.tabToggle('2'); }}\r\n                    >\r\n                      Bounce\r\n                    </NavLink>\r\n                  </NavItem>\r\n                  <NavItem>\r\n                    <NavLink\r\n                      className={classnames({\r\n                        active: statesItems.activeTab === '3',\r\n                      })}\r\n                      onClick={() => { this.tabToggle('3'); }}\r\n                    >\r\n                      Most Visited Page\r\n                    </NavLink>\r\n                  </NavItem>\r\n                  <NavItem>\r\n                    <NavLink\r\n                      className={classnames({\r\n                        active: statesItems.activeTab === '4',\r\n                      })}\r\n                      onClick={() => { this.tabToggle('4'); }}\r\n                    >\r\n                      Conversion\r\n                    </NavLink>\r\n                  </NavItem>\r\n                </Nav>\r\n                {/* e: 탭메뉴 */}\r\n                {/* s: 탭메뉴 */}\r\n                <TabContent className=\"keyword-gap-graph\" activeTab={statesItems.activeTab}>\r\n                  <TabPane tabId=\"1\">\r\n                    { statesItems.activeTab === '1' &&\r\n                      <>\r\n                      <div className='graph-area total-area title-type'>\r\n                        <p className='cont-noti'>단위: 건</p>\r\n                        <CompareLine options={statesItems.inflowOpt} series={statesItems.inflowSeries} height={statesItems.keywordGap.height} />\r\n                      </div>                      \r\n                      </>\r\n                    }\r\n                  </TabPane>\r\n                  <TabPane tabId=\"2\">\r\n                    { statesItems.activeTab === '2' &&\r\n                      <>\r\n                      <div className='graph-area total-area title-type'>\r\n                        <p className='cont-noti'>단위: 건</p>\r\n                        <CompareLine options={statesItems.bounceOpt} series={statesItems.bounceSeries} height={statesItems.keywordGap.height} />\r\n                      </div>\r\n                      \r\n                      </>\r\n                    }\r\n                  </TabPane>\r\n                  <TabPane tabId=\"3\">\r\n                  { statesItems.activeTab === '3' &&\r\n                      <>\r\n                      <div className='graph-area total-area title-type'>\r\n                        <p className='cont-noti'>단위: 건</p>\r\n                        <CompareLine options={statesItems.mostVisitedPageOpt} series={statesItems.mostVisitedPageSeries} height={statesItems.keywordGap.height} />\r\n                      </div>\r\n                      \r\n                      </>\r\n                    }\r\n                  </TabPane>\r\n                  <TabPane tabId=\"4\">\r\n                  { statesItems.activeTab === '4' &&\r\n                      <>\r\n                      <div className='graph-area total-area title-type'>\r\n                        <p className='cont-noti'>단위: 건</p>\r\n                        <CompareLine options={statesItems.conversionOpt} series={statesItems.conversionSeries} height={statesItems.keywordGap.height} />\r\n                      </div>\r\n                      <div className=\"graph-area total-area title-type keyword-gap-type mt-2\">\r\n                        <div className=\"keyword-chart-area\">\r\n                          {regionChartData.map((item, idx) => {\r\n                            return(\r\n                              <div\r\n                                key={idx}\r\n                                className='chart-area'\r\n                              >\r\n                                <CompareBar options={item.options} series={item.series} type=\"bar\" height={350} width='100%' className=\"analysis-chart-bar\" />\r\n                              </div>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      </div>\r\n                      </>\r\n                    }\r\n                  </TabPane>\r\n                </TabContent>\r\n                \r\n                <div className=\"graph-area total-area title-type keyword-gap-type mt-2\">\r\n                  <div className=\"keyword-chart-area\">\r\n                    <div  className='chart-area'>\r\n                      <CompareBar options={statesItems.GaUserBarGenOpt} series={statesItems.GaUserBarGenSeries} type=\"bar\" height={350} width='100%' className=\"analysis-chart-bar\" />\r\n                    </div>\r\n                    <div  className='chart-area'> \r\n                      <CompareBar options={statesItems.GaUserBarAgeOpt} series={statesItems.GaUserAgeGenSeries} type=\"bar\" height={350} width='100%' className=\"analysis-chart-bar\" />\r\n                    </div>\r\n                    <div  className='chart-area'> \r\n                      <CompareBar options={statesItems.GaUserBarDeviceOpt} series={statesItems.GaUserAgeDeviceSeries} type=\"bar\" height={350} width='100%' className=\"analysis-chart-bar\" />\r\n                    </div>\r\n                    <div className='chart-area'> \r\n                      <CompareBar options={statesItems.GaUserBarRegionOpt} series={statesItems.GaUserAgeRegionSeries} type=\"bar\" height={350} width='100%' className=\"analysis-chart-bar\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n               \r\n                {/* e: 탭메뉴 */}\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        {/* e: GA User Indicators */}\r\n\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GoogleAnalytics;\r\n",["585","586","587","588","589","590","591"],"C:\\tagons\\src\\views\\app\\trend\\data.js",[],"C:\\tagons\\src\\views\\app\\socialListening\\index.js",[],"C:\\tagons\\src\\views\\app\\trend\\Response.js",["592"],"/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable no-use-before-define */\r\n/* eslint no-unused-vars: \"off\" */\r\n/* eslint no-undef: \"off\" */\r\n/* eslint no-plusplus : \"off\" */\r\n/* eslint react/no-unused-state: \"off\" */\r\n/* eslint prefer-template: \"off\" */\r\n/* eslint react/no-array-index-key: \"off\" */\r\n/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from 'react';\r\nimport { Row, Card, CardBody, Form, Button, FormGroup, Input, Nav, NavLink, NavItem, TabContent, TabPane, } from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport { Formik, Field } from 'formik';\r\nimport Select from 'react-select';\r\nimport DatePicker from 'react-datepicker';\r\nimport { ko } from \"date-fns/esm/locale\";\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\nimport {ReactTable} from '../../../containers/ui/ReactTableCards';\r\nimport CustomSelectInput from '../../../components/common/CustomSelectInput';\r\nimport CompareBar from '../../../components/charts/CompareBar';\r\nimport CompareLine from '../../../components/charts/CompareLine';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { TableData } from './data';\r\nimport { addMonths } from \"date-fns\";\r\nimport { post } from \"axios\";\r\nimport { UserInfo } from \"../../../services/LoginService\";\r\nimport { changeDate } from \"../../../helpers/DevUtils\";\r\n\r\n// FIXME: 차트 안맞음\r\n// FIXME: 지표 선택시 컬러 안맞음(v0.5 16-4, 지표 선택시 진한 회색)\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass Response extends React.Component {\r\n  constructor(props) {\r\n    super(props); // React.Component의 생성자 메소드를 먼저 실행\r\n    let loginYN = (UserInfo() !== null);\r\n    let userData = UserInfo();\r\n    /// Default 6개월 전\r\n    const startDate = addMonths(new Date(), -6);\r\n    const endDate = new Date();\r\n    this.state = {\r\n      startDate: startDate,\r\n      endDate: endDate,\r\n      loginCheck : loginYN,\r\n      checkInfo: [\r\n        { id: 1, value: \"7days\", isChecked: false },\r\n        { id: 2, value: \"15days\", isChecked: true },   /// Default\r\n        { id: 3, value: \"30days\", isChecked: false },\r\n        { id: 4, value: \"45days\", isChecked: false },\r\n        { id: 5, value: \"60days\", isChecked: false },\r\n        { id: 6, value: \"90days\", isChecked: false },\r\n      ],\r\n      keywords: '',\r\n      Selected_Index: 0,\r\n      totalGraph : {\r\n        series: [\r\n          {\r\n            name: \"Users\",\r\n            data: [0.77, 0.88, 0.99, 0.11, 0.12, 0.34, 0.56, 0.4, 0.56, 0.41, 0.42, 0.44, 0.55, 0.66, 0.77, 0.99, 0.11, 0.55, 0.11, 0.12, 0.13, 0.15, 0.46, 0.79, 0.53, 0.12, 0.86, 0.77, 0.2, 0.55, 0.44]\r\n          },\r\n          {\r\n            name: \"Sessions\",\r\n            data: [0.77, 0.8, 0.55, 0.22, 0.33, 0.44, 0.55,0.12, 0.13, 0.76, 0.45, 0.52, 0.01, 0.76, 0.22, 0.78, 0.65, 0.63, 0.93, 0.94, 0.82, 0.2, 0.46, 0.15, 0.76, 0.22, 0.46, 0.55, 0.34, 0.74, 0.45]\r\n          },\r\n        ],\r\n        height: 503,\r\n        options: {\r\n          chart: {\r\n            type: 'line',\r\n            dropShadow: {\r\n              enabled: false,\r\n              color: '#000',\r\n              top: 18,\r\n              left: 7,\r\n              blur: 10,\r\n              opacity: 0.2,\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            },\r\n            zoom: {\r\n              enabled: false,\r\n            }\r\n          },\r\n          legend: {\r\n            position: 'top',\r\n            horizontalAlign: 'left',\r\n          },\r\n          colors: ['#404141','#ed7d31'],\r\n          dataLabels: {\r\n            enabled: true,\r\n            background: {\r\n              foreColor: '#000',\r\n              padding: 0,\r\n              borderRadius: 0,\r\n              borderColor: 'transparent',\r\n            },\r\n            style: {\r\n              fontSize: '14px',\r\n              fontFamily: 'Helvetica, Arial, sans-serif',\r\n              fontWeight: 'bold',\r\n              colors: ['transparent'],\r\n            },\r\n            offsetY: -10,\r\n          },\r\n          markers: {\r\n            size: 5,\r\n            hover: {\r\n              size: 5,\r\n              sizeOffset: 5,\r\n              fillColor: '#000',\r\n            },\r\n            discrete: [{\r\n              fillColor: '#e3e3e3',\r\n              strokeColor: '#fff',\r\n              size: 5\r\n            }]\r\n          },\r\n          stroke: {\r\n            curve: 'smooth'\r\n          },\r\n          grid: {\r\n            show: false,\r\n          },\r\n          xaxis: {\r\n            categories: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],\r\n            tickPlacement: 'between'\r\n          },\r\n          yaxis: {\r\n            show: false\r\n          },\r\n        },\r\n      },\r\n\r\n    }; // State\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const stateItem = this.state;\r\n    if (!stateItem.loginCheck){\r\n      document.location.href = \"/user/login\";\r\n    }\r\n  }\r\n\r\n  ChangeStartDate = (e) => {\r\n    this.setState({\r\n      startDate: e,\r\n    });\r\n  }\r\n\r\n  ChangeEndDate = (e) => {\r\n    this.setState({\r\n      endDate: e\r\n    });\r\n  }\r\n\r\n  validateKeyword = (value) => {\r\n    let error;\r\n    if (!this.state.keywords) {\r\n      error = 'No Keywords';\r\n    }\r\n    return error;\r\n  }\r\n\r\n  handleOneChecked = (evt) => {\r\n    // eslint-disable-next-line prefer-const\r\n    let { checkInfo } = this.state;\r\n    checkInfo.forEach(item => {\r\n      /// 라디오 처럼 동작하도록\r\n      item.isChecked = item.value === evt.target.value\r\n      // if (item.value === evt.target.value){\r\n      //   // eslint-disable-next-line no-param-reassign\r\n      //   item.isChecked = evt.target.checked;\r\n      // }\r\n    });\r\n    this.setState({ checkInfo });\r\n  }\r\n\r\n  /// Response Limit 의 선택된 값의 오브젝트를 리턴.\r\n  filterRL = () => {\r\n    return this.state.checkInfo.filter((el) =>\r\n      el.isChecked == true\r\n    )\r\n  }\r\n\r\n  /// ENTER, 초기 로딩 시\r\n  RequestTrendResponse = (e) => {\r\n    console.log('[REQ] RequestTrendResponse', e);\r\n\r\n    this.setState({\r\n      Selected_Index : 0\r\n    });\r\n\r\n    /// Reqeust Data\r\n    const reqData = {}\r\n    reqData.FromDate = changeDate(this.state.startDate);\r\n    reqData.ToDate = changeDate(this.state.endDate);\r\n    reqData.Company = \"테스트\";//UserInfo().Company;\r\n    reqData.CompanyCode = \"29791304\";//UserInfo().CompanyCode;\r\n    reqData.Response_Limit = this.filterRL()[0].value;\r\n    reqData.Keyword = \"원피스\";//this.state.keywords;\r\n    console.log('[REQ DATA]', reqData);\r\n\r\n    /// 지표 초기화\r\n    post('/trendresponse/GetTrend_Response_Init_Info', reqData).\r\n    then((response) => {\r\n      console.log('[RES]\\n', response.data.ChartData[0].SubData[0]);\r\n      /// xaxis > categories\r\n      let categories = [];\r\n      let trSeries = [];\r\n      response.data.ChartData[0].SubData[0].SubData.map( (subData, idx) => {\r\n        let seriesData = [];\r\n        subData.Data.map( (data) => {\r\n          if (idx === 0) {\r\n            /// X_axis 뽑아내기\r\n            categories.push(Number(data.X_Axis));\r\n          }\r\n          seriesData.push(data.Y_Axis);\r\n        });\r\n        /// Series 추출\r\n        let series = {\r\n          name: subData.Name,\r\n          data: seriesData\r\n        }\r\n        trSeries.push(series);\r\n      });\r\n      console.log(\"categories : \", categories);\r\n      this.setState({\r\n        totalGraph: {\r\n          series: trSeries,\r\n          options: {\r\n            xaxis: {\r\n              categories: categories\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  RequestTrendResponseSelectedInfo = () => {\r\n    console.log('[REQ] RequestTrendResponseSelectedInfo');\r\n    /// Reqeust Data\r\n    const reqData = {}\r\n    reqData.FromDate = changeDate(this.state.startDate);\r\n    reqData.ToDate = changeDate(this.state.endDate);\r\n    reqData.Company = \"\";//UserInfo().Company;\r\n    reqData.CompanyCode = \"\";//UserInfo().CompanyCode;\r\n    reqData.Response_Limit = this.filterRL()[0].value;\r\n    reqData.Keyword = this.state.keywords;\r\n    reqData.Selected_Index = this.state.Selected_Index;\r\n    console.log('[REQ DATA]', reqData);\r\n\r\n    post('/trendresponse/GetTrend_Response_Selected_Info', reqData).\r\n    then((response) => {\r\n      console.log('[RES]\\n', response);\r\n      // TODO: 차트 재처리\r\n    });\r\n  }\r\n\r\n  /// 지표 선택시\r\n  selectIndicator = (value) => {\r\n    console.log(value);\r\n    this.setState({\r\n      Selected_Index : value\r\n    }, function() {\r\n      this.RequestTrendResponseSelectedInfo();\r\n    });\r\n\r\n  };\r\n\r\n  render() {\r\n    const statesItems = this.state;\r\n\r\n    const onKeywordpress = (e) =>{\r\n      if (e.keyCode === 13){\r\n        e.preventDefault();\r\n        this.RequestTrendResponse(e);\r\n      }\r\n    };\r\n\r\n    /// 키워드 변경시 State에 넣어줌.\r\n    const onKeywordsChange = (e) =>{\r\n      this.setState({\r\n        keywords : e.target.value\r\n      });\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Form className=\"check-box-wrap multi\">\r\n                  <div className=\"tbl-vertical-heading\">\r\n                    <table>\r\n                      <tbody>\r\n                      <tr>\r\n                        <th style={{ width:'15%' }}>Period</th>\r\n                        <td style={{ width:'85%' }}>\r\n                          <div className=\"date-picker-wrap\">\r\n                            <DatePicker className=\"form-control\"\r\n                                        locale={ko}\r\n                                        dateFormat=\"yyyy.MM.dd\"\r\n                                        selected={statesItems.startDate}\r\n                                        selectsStart\r\n                                        startDate={statesItems.startDate}\r\n                                        endDate={statesItems.endDate}\r\n                                        onChange={this.ChangeStartDate}\r\n                                        placeholderText=\"Select Time\"\r\n                            />\r\n                            <span className=\"cal-range\"> ~ </span>\r\n                            <DatePicker className=\"form-control\"\r\n                                        locale={ko}\r\n                                        dateFormat=\"yyyy.MM.dd\"\r\n                                        selected={statesItems.endDate}\r\n                                        selectsEnd\r\n                                        startDate={statesItems.startDate}\r\n                                        endDate={statesItems.endDate}\r\n                                        onChange={this.ChangeEndDate}\r\n                                        placeholderText=\"Select Time\"\r\n                            />\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th style={{ width:'15%' }}>Response Limit</th>\r\n                        <td style={{ width:'85%' }}>\r\n                          {statesItems.checkInfo.map(items => {\r\n                            return(\r\n                              <FormGroup check inline className='check-box lookup-area' key={items.id}>\r\n                                <Input\r\n                                  id={items.id}\r\n                                  key={items.id}\r\n                                  onChange={this.handleOneChecked}\r\n                                  checked={items.isChecked}\r\n                                  type=\"checkbox\"\r\n                                  value={items.value}\r\n                                  className='check-single-box'\r\n                                />{' '}\r\n                                <label htmlFor={items.id} className='bx_check_oran'>\r\n                                  <span>{items.value}</span>\r\n                                </label>\r\n                              </FormGroup>\r\n                            )\r\n                          })}\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th style={{ width:'15%' }}>Keywords</th>\r\n                        <td style={{ width:'85%' }}>\r\n                          <Formik\r\n                            initialValues={{\r\n                              keyword: '',\r\n                            }}\r\n                            // onSubmit={onSubmit}\r\n                          >\r\n                            {({ errors, touched }) => (\r\n                              <FormGroup className=\"keyword-area\">\r\n                                <Field\r\n                                  className=\"form-control\"\r\n                                  name=\"keyword\"\r\n                                  validate={this.validateKeyword}\r\n                                  onKeyDown={onKeywordpress}\r\n                                  onChange={onKeywordsChange}\r\n                                  value={statesItems.keywords}\r\n                                />\r\n                                {errors.keyword && touched.keyword && (\r\n                                  <div className=\"d-block noti-text\">\r\n                                    {errors.keyword}\r\n                                  </div>\r\n                                )}\r\n                              </FormGroup>\r\n                            )}\r\n                          </Formik>\r\n                        </td>\r\n                      </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <Button className=\"btn-xl mt-4\" color=\"gray\" onClick={this.RequestTrendResponse}>\r\n                      ENTER\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n\r\n        {/* s: GA Keyword Gap */}\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className=\"box-title\">\r\n                  <h2>Trend Response</h2>\r\n                </div>\r\n\r\n                <div className=\"box-area response-area\">\r\n                  <div className='graph-area total-area title-type box-left'>\r\n                    <p className='bx_name'>Total</p>\r\n                    <CompareLine options={statesItems.totalGraph.options} series={statesItems.totalGraph.series} height={statesItems.totalGraph.height} />\r\n                  </div>\r\n                  <div className='graph-area total-area title-type box-right'>\r\n                    <p className='tit'>Total</p>\r\n                    <div className=\"channel_cont\">\r\n                      <ul className=\"list_tag\">\r\n                        {/* 활성화 클래스 active */}\r\n                        <li className={ statesItems.Selected_Index == 0 ? \"active\" : \"\" } onClick={() => this.selectIndicator(0)}>Total <Button close /></li>{/* eslint-disable-line */}\r\n                      </ul>\r\n                    </div>\r\n                    <p className='tit'>Social</p>\r\n                    <div className=\"channel_cont\">\r\n                      <ul className=\"list_tag\">\r\n                        <li className={statesItems.Selected_Index == 1 ? \"active\" : \"\"} onClick={() => this.selectIndicator(1)}>Buzz <Button close /></li>{/* eslint-disable-line */}\r\n                        <li className={statesItems.Selected_Index == 2 ? \"active\" : \"\"} onClick={() => this.selectIndicator(2)}>Comment <Button close /></li>{/* eslint-disable-line */}\r\n                        <li className={statesItems.Selected_Index == 3 ? \"active\" : \"\"} onClick={() => this.selectIndicator(3)}>Likes <Button close /></li>{/* eslint-disable-line */}\r\n                        <li className={statesItems.Selected_Index == 4 ? \"active\" : \"\"} onClick={() => this.selectIndicator(4)}>View <Button close /></li>{/* eslint-disable-line */}\r\n                      </ul>\r\n                    </div>\r\n                    <p className='tit'>Online Shopping</p>\r\n                    <div className=\"channel_cont\">\r\n                      <ul className=\"list_tag\">\r\n                        <li className={statesItems.Selected_Index == 5 ? \"active\" : \"\"} onClick={() => this.selectIndicator(5)}>Product <Button close /></li>{/* eslint-disable-line */}\r\n                        <li className={statesItems.Selected_Index == 6 ? \"active\" : \"\"} onClick={() => this.selectIndicator(6)}>Ratings <Button close /></li>{/* eslint-disable-line */}\r\n                      </ul>\r\n                    </div>\r\n                    <p className='tit'>Google Analytics</p>\r\n                    <div className=\"channel_cont\">\r\n                      <ul className=\"list_tag\">\r\n                        <li className={statesItems.Selected_Index == 7 ? \"active\" : \"\"} onClick={() => this.selectIndicator(7)}>Users <Button close /></li>{/* eslint-disable-line */}\r\n                        <li className={statesItems.Selected_Index == 8 ? \"active\" : \"\"} onClick={() => this.selectIndicator(8)}>Sessions <Button close /></li>{/* eslint-disable-line */}\r\n                        <li className={statesItems.Selected_Index == 9 ? \"active\" : \"\"} onClick={() => this.selectIndicator(9)}>Conversion <Button close /></li>{/* eslint-disable-line */}\r\n                        <li className={statesItems.Selected_Index == 10 ? \"active\" : \"\"} onClick={() => this.selectIndicator(10)}>Bounce <Button close /></li>{/* eslint-disable-line */}\r\n                      </ul>\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        {/* e: GA Keyword Gap */}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Response;\r\n\r\n\r\n/*\r\n\r\n/trendresponse/GetTrend_Response_Init_Info\r\n\r\n{\r\n    \"ChartData\": [\r\n        {\r\n            \"SubData\": [\r\n                {\r\n                    \"SubData\": [\r\n                        {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"Standard\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"1days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"2days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"3days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"4days\"\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Total\"\r\n                }\r\n            ],\r\n            \"Category1\": \"Total\"\r\n        }, {\r\n            \"SubData\": [\r\n                {\r\n                    \"SubData\": [\r\n                        {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"Standard\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"1days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"2days\"\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Buzz\"\r\n                }, {\r\n                    \"SubData\": [\r\n                        {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"Standard\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"1days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"2days\"\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Comment\"\r\n                }, {\r\n                    \"SubData\": [\r\n                        {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"Standard\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"1days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"2days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"3days\"\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Likes\"\r\n                }\r\n            ],\r\n            \"Category1\": \"Social\"\r\n        }\r\n    ],\r\n    \"LegendData\": [\r\n        {\r\n            \"SubData\": [\r\n                {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Total\"\r\n                }\r\n            ],\r\n            \"Category1\": \"Total\"\r\n        }, {\r\n            \"SubData\": [\r\n                {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Buzz\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Comment\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Likes\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"View\"\r\n                }\r\n            ],\r\n            \"Category1\": \"Social\"\r\n        }, {\r\n            \"SubData\": [\r\n                {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Product\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Ratings\"\r\n                }\r\n            ],\r\n            \"Category1\": \"OnlineShopping\"\r\n        }, {\r\n            \"SubData\": [\r\n                {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Users\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Sessions\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Conversion\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Bounce\"\r\n                }\r\n            ],\r\n            \"Category1\": \"GoogleAnaytics\"\r\n        }\r\n    ],\r\n    \"ErrorCode\": \"OK\",\r\n    \"Message\": \"성공\"\r\n}\r\n\r\n\r\n/trendresponse/GetTrend_Response_Selected_Info\r\n\r\n{\r\n    \"ChartData\": [\r\n        {\r\n            \"SubData\": [\r\n                {\r\n                    \"SubData\": [\r\n                        {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"Standard\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"1days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"2days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"3days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"4days\"\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Total\"\r\n                }\r\n            ],\r\n            \"Category1\": \"Total\"\r\n        }, {\r\n            \"SubData\": [\r\n                {\r\n                    \"SubData\": [\r\n                        {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"Standard\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"1days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"2days\"\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Buzz\"\r\n                }, {\r\n                    \"SubData\": [\r\n                        {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"Standard\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"1days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"2days\"\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Comment\"\r\n                }, {\r\n                    \"SubData\": [\r\n                        {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"Standard\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"1days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"2days\"\r\n                        }, {\r\n                            \"Data\": [\r\n                                {\r\n                                    \"X_Axis\": \"1\",\r\n                                    \"Y_Axis\": 0.0527\r\n                                }, {\r\n                                    \"X_Axis\": \"2\",\r\n                                    \"Y_Axis\": 0.0622\r\n                                }, {\r\n                                    \"X_Axis\": \"3\",\r\n                                    \"Y_Axis\": 0.0556\r\n                                }, {\r\n                                    \"X_Axis\": \"4\",\r\n                                    \"Y_Axis\": 0.0021\r\n                                }, {\r\n                                    \"X_Axis\": \"5\",\r\n                                    \"Y_Axis\": 0.0003\r\n                                }\r\n                            ],\r\n                            \"Name\": \"3days\"\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Likes\"\r\n                }\r\n            ],\r\n            \"Category1\": \"Social\"\r\n        }\r\n    ],\r\n    \"LegendData\": [\r\n        {\r\n            \"SubData\": [\r\n                {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Total\"\r\n                }\r\n            ],\r\n            \"Category1\": \"Total\"\r\n        }, {\r\n            \"SubData\": [\r\n                {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Buzz\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Comment\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Likes\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"View\"\r\n                }\r\n            ],\r\n            \"Category1\": \"Social\"\r\n        }, {\r\n            \"SubData\": [\r\n                {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Product\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Ratings\"\r\n                }\r\n            ],\r\n            \"Category1\": \"OnlineShopping\"\r\n        }, {\r\n            \"SubData\": [\r\n                {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Users\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Sessions\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Conversion\"\r\n                }, {\r\n                    \"Data\": [\r\n                        {\r\n                            \"Legend\": \"1days\",\r\n                            \"Total\": 0.0527\r\n                        }, {\r\n                            \"Legend\": \"2days\",\r\n                            \"Total\": 0.0622\r\n                        }, {\r\n                            \"Legend\": \"3days\",\r\n                            \"Total\": 0.0556\r\n                        }, {\r\n                            \"Legend\": \"4days\",\r\n                            \"Total\": 0.0021\r\n                        }, {\r\n                            \"Legend\": \"5days\",\r\n                            \"Total\": 0.0003\r\n                        }\r\n                    ],\r\n                    \"Category2\": \"Bounce\"\r\n                }\r\n            ],\r\n            \"Category1\": \"GoogleAnaytics\"\r\n        }\r\n    ],\r\n    \"ErrorCode\": \"OK\",\r\n    \"Message\": \"성공\"\r\n}\r\n\r\n*/","C:\\tagons\\src\\views\\app\\socialListening\\Needspatterns.js",["593"],"/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable no-use-before-define */\r\n/* eslint no-unused-vars: \"off\" */\r\n/* eslint no-undef: \"off\" */\r\n/* eslint no-plusplus : \"off\" */\r\n/* eslint react/no-unused-state: \"off\" */\r\n/* eslint prefer-template: \"off\" */\r\n/* eslint react/no-array-index-key: \"off\" */\r\n/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from 'react';\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { Row, Card, CardBody, Form, Button, FormGroup, Input, Nav, NavLink, NavItem, TabContent, TabPane, } from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport { Formik, Field } from 'formik';\r\nimport Select from 'react-select';\r\nimport DatePicker from 'react-datepicker';\r\nimport { ko } from \"date-fns/esm/locale\";\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\nimport {ReactTable} from '../../../containers/ui/ReactTableCards';\r\nimport ChannelButton from '../../../components/applications/ChannelButton'\r\nimport CustomSelectInput from '../../../components/common/CustomSelectInput';\r\nimport CompareBar from '../../../components/charts/CompareBar';\r\nimport CompareLine from '../../../components/charts/CompareLine';\r\n// import {ReactTable} from '../../../containers/ui/ReactTable';\r\nimport { TableData } from './tableData';\r\nimport { login, UserInfo, logout } from '../../../services/LoginService';\r\nimport { post } from 'axios';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass Needspatterns extends React.Component {\r\n  constructor(props) {\r\n    super(props); // React.Component의 생성자 메소드를 먼저 실행\r\n\r\n    let date1 = new Date();\r\n    let date2 = new Date();\r\n    let loginYN = (UserInfo() !== null);\r\n    let userData = UserInfo();\r\n    date1.setDate(date1.getDate() - 9);\r\n    date2.setDate(date2.getDate() - 2);\r\n\r\n    this.state = {\r\n      startDate: date1,\r\n      endDate: date2,\r\n      searchBtnClick : false,\r\n      searchStart : false,\r\n      userInfo : userData,\r\n      keyWordtext : \"\",\r\n      selectedOptionsBase : [],\r\n      searchCondition: {},\r\n      // eslint-disable-next-line react/no-unused-state\r\n      selectedOptions : [],\r\n      // eslint-disable-next-line react/no-unused-state\r\n      channelOption : [],\r\n      treemapTotal : {\r\n        series: [],\r\n        height: 540,\r\n        options: {\r\n          chart: {\r\n            type: 'treemap',\r\n            toolbar: {\r\n              show: false\r\n            }, \r\n            zoom: {\r\n              enabled: false,\r\n            }\r\n          },\r\n          legend: {\r\n            show: false,\r\n          },\r\n          colors: [\r\n            '#58a3b2',\r\n            '#f8c360',\r\n            '#b9decf',\r\n            '#ef597c',\r\n            '#d4ddc1',\r\n            '#da5ca6',\r\n            '#40759d',\r\n            '#caf77d',\r\n            '#5e355f',\r\n            '#f17c55',\r\n          ],\r\n          dataLabels: {\r\n            enabled: true,\r\n            style: {\r\n              fontSize: '14px',\r\n              fontFamily: 'Helvetica, Arial, sans-serif',\r\n              fontWeight: 'bold',\r\n              colors: ['#fff'],\r\n            },\r\n            formatter: (text, op) => {\r\n              return [text, op.value + '%']\r\n            },\r\n            offsetY: -4\r\n          },\r\n          plotOptions: {\r\n            treemap: {\r\n              distributed: true,\r\n              enableShades: false\r\n            }\r\n          },\r\n          tooltip: {\r\n            custom: ({ series, seriesIndex, dataPointIndex, w }) => {\r\n              return (\r\n                \"<div class='tootip-box'>\" +\r\n                w.globals.categoryLabels[dataPointIndex] +\r\n                \": \" +\r\n                series[seriesIndex][dataPointIndex] +\"%\" +\r\n                \"</div>\"\r\n              );\r\n            }\r\n          },\r\n          noData: {\r\n            text: '데이터 없음',\r\n            align: 'center',\r\n            verticalAlign: 'middle',\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            style: {\r\n              fontSize: '16px',\r\n            }\r\n          },\r\n        }\r\n      },\r\n      treemapTotalTable : [],\r\n      treemapSelect : {\r\n        series: [],\r\n        height: 540,\r\n        options: {\r\n          chart: {\r\n            type: 'treemap',\r\n            toolbar: {\r\n              show: false\r\n            }, \r\n            zoom: {\r\n              enabled: false,\r\n            }\r\n          },\r\n          legend: {\r\n            show: false,\r\n          },\r\n          colors: [\r\n            '#58a3b2',\r\n            '#f8c360',\r\n            '#b9decf',\r\n            '#ef597c',\r\n            '#d4ddc1',\r\n            '#da5ca6',\r\n            '#40759d',\r\n            '#caf77d',\r\n            '#5e355f',\r\n            '#f17c55',\r\n          ],\r\n          dataLabels: {\r\n            enabled: true,\r\n            style: {\r\n              fontSize: '14px',\r\n              fontFamily: 'Helvetica, Arial, sans-serif',\r\n              fontWeight: 'bold',\r\n              colors: ['#fff'],\r\n            },\r\n            formatter: (text, op) => {\r\n              return [text, op.value + '%']\r\n            },\r\n            offsetY: -4\r\n          },\r\n          plotOptions: {\r\n            treemap: {\r\n              distributed: true,\r\n              enableShades: false\r\n            }\r\n          },\r\n          tooltip: {\r\n            custom: ({ series, seriesIndex, dataPointIndex, w }) => {\r\n              // console.log(w.globals.categoryLabels[dataPointIndex]);\r\n              // w.config.series[seriesIndex]\r\n              return (\r\n                \"<div class='tootip-box'>\" +\r\n                w.globals.categoryLabels[dataPointIndex] +\r\n                \": \" +\r\n                series[seriesIndex][dataPointIndex] +\"%\" +\r\n                \"</div>\"\r\n              );\r\n            }\r\n          },\r\n          noData: {\r\n            text: '데이터 없음',\r\n            align: 'center',\r\n            verticalAlign: 'middle',\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            style: {\r\n              fontSize: '16px',\r\n            }\r\n          },\r\n        },\r\n      },\r\n      treemapSelectTable : []\r\n    };\r\n  }\r\n  \r\n  ChangeStartDate = (e) => { \r\n    this.setState({  \r\n      startDate: e,\r\n    });\r\n  }  \r\n  \r\n  ChangeEndDate = (e) => { \r\n    this.setState({  \r\n      endDate: e\r\n    });  \r\n  }\r\n\r\n  \r\n\r\n  setSelectedOptions = (val) => {\r\n    this.setState({  \r\n      selectedOptions: val\r\n    }); \r\n  }\r\n\r\n  SearchClick = (e) => {\r\n    console.log('socialListening SearchClick !!');\r\n    this.setState({  \r\n      searchBtnClick: true\r\n    }); \r\n  }\r\n  \r\n  render() {\r\n    const statesItems = this.state;\r\n    const { channelOptionSelected } = this.state;\r\n\r\n    const onKeywordChange = (e) =>{\r\n      this.setState({\r\n        keyWordtext : e.target.value\r\n      }); \r\n    };\r\n    const validateKeyword = (value) => {\r\n      let error;\r\n      if (!statesItems.keyWordtext) {\r\n        error = 'No Keywords';\r\n      } \r\n      return error;\r\n    };\r\n\r\n    // 날짜 포맷\r\n    const dateString = (dateValue) => {\r\n      let retStr = '';\r\n      //Year\r\n      retStr = retStr.concat(dateValue.getFullYear());\r\n      //Month\r\n      if(dateValue.getMonth() < 10) {\r\n          retStr = retStr.concat('-0', dateValue.getMonth() + 1);\r\n      }\r\n      else {\r\n          retStr = retStr.concat('-', dateValue.getMonth() + 1);\r\n      }\r\n      //Date\r\n      if(dateValue.getDate() < 10) {\r\n          retStr = retStr.concat('-0', dateValue.getDate());\r\n      }\r\n      else {\r\n          retStr = retStr.concat('-', dateValue.getDate());\r\n      }\r\n      return retStr;\r\n    }\r\n    \r\n    const searchStart = (searchChannel) =>{\r\n      var searchCondition = {} ;\r\n      var ChannelUpper = [];\r\n      var ChannelLower = [];\r\n      var selectList = [];\r\n      var periodUnit = \"\";\r\n      let ChannelOptions = [];\r\n\r\n      this.setState({  \r\n        searchBtnClick: false\r\n      });\r\n      this.setState({  \r\n        searchCondition: {} ,\r\n        searchStart : false , \r\n      });\r\n      if (searchChannel.length > 0 ){\r\n        selectList.push({ label: 'Total', value: 'Total' , channelUp : \"Total\" , key: 0 });\r\n        searchChannel.forEach(function(item,idx){\r\n          ChannelUpper.push(item.type);\r\n          ChannelLower.push(item.name);\r\n          ChannelOptions.push({\r\n            label : item.name\r\n          , value : item.name\r\n          , key : idx\r\n          })\r\n          selectList.push({ label: item.name, value: item.name, channelUp : item.type , key: idx + 1});\r\n        });\r\n      }\r\n      else{\r\n        console.log('채널 선택 없음');\r\n      }\r\n\r\n      this.setState({  \r\n        selectedOptionsBase: selectList ,\r\n      });\r\n      searchCondition.FromDate = dateString(statesItems.startDate); \r\n      searchCondition.ToDate = dateString(statesItems.endDate); \r\n      searchCondition.Period_Unit = \"Daily\";\r\n      searchCondition.Channel_Upper = ChannelUpper;\r\n      searchCondition.Channel_Lower = ChannelLower;\r\n      searchCondition.Keyword = statesItems.keyWordtext;\r\n      searchCondition.Company = statesItems.userInfo.CompanyName;\r\n      searchCondition.CompanyCode = statesItems.userInfo.CompanyCode;\r\n      // console.log('searchCondition',searchCondition);\r\n\r\n      this.setState({  \r\n        searchCondition: searchCondition ,\r\n        searchStart : true , \r\n        selectedOptions: { label: 'Total', value: 'Total' , channelUp : \"Total\" , key: 0 } ,\r\n        channelOption : ChannelOptions\r\n      }, () => {\r\n        //여기서 조회 API 구현하면 됨\r\n        getNeedPatternInit();\r\n      });\r\n    };\r\n\r\n    const getNeedPatternInit = () => {\r\n      post('/sociallistening/GetNeeds_Pattern_Init', this.state.searchCondition).\r\n      then((response) => {\r\n          let responseTotal = [];\r\n          let responseTable = [];\r\n\r\n          if(response.status == \"200\") {\r\n            response.data.Data.map((data) => {\r\n              responseTotal.push({\r\n                x : data.name,\r\n                y : data.value\r\n              });\r\n            });\r\n\r\n            response.data.TableData.map((data, idx) => {\r\n              responseTable.push({\r\n                id : idx\r\n              , category : data.Name\r\n              , keywords : data.Value\r\n              });\r\n            });\r\n\r\n            this.setState(prev => ({\r\n              ...prev,\r\n              treemapTotal : {\r\n                ...prev.treemapTotal,\r\n                series : [{\r\n                  data : responseTotal\r\n                }]\r\n              },\r\n              treemapTotalTable : responseTable\r\n            }), () => {\r\n              //console.log(this.state);\r\n            });\r\n          }\r\n      });\r\n    }\r\n\r\n    const changeOption = (...args) => {\r\n      /*\r\n      this.setState({\r\n        selectedOptions: [args[0]]\r\n      }, () => {\r\n        console.log(this.state);\r\n      });\r\n      */\r\n      let searchParam = { ...this.state.searchCondition };\r\n      this.state.searchCondition.Channel_Lower.map((data, idx) => {\r\n        if(args[0].value == data) {\r\n          searchParam.Channel_Upper = this.state.searchCondition.Channel_Upper[idx];\r\n          searchParam.Channel_Lower = data;\r\n        }\r\n      });\r\n  \r\n      getNeedPatternSelected(searchParam);\r\n    }\r\n\r\n    const getNeedPatternSelected = (searchCondition) => {\r\n      post('/sociallistening/GetNeeds_Pattern_Selected', searchCondition).\r\n      then((response) => {\r\n          console.log(response);\r\n\r\n          let responseSelect = [];\r\n          let responseTable = [];\r\n\r\n          if(response.status == \"200\") {\r\n            response.data.Data.map((data) => {\r\n              responseSelect.push({\r\n                x : data.name,\r\n                y : data.value\r\n              });\r\n            });\r\n\r\n            response.data.TableData.map((data, idx) => {\r\n              responseTable.push({\r\n                id : idx\r\n              , category : data.Name\r\n              , keywords : data.Value\r\n              });\r\n            });\r\n\r\n            this.setState(prev => ({\r\n              ...prev,\r\n              treemapSelect : {\r\n                ...prev.treemapSelect,\r\n                series : [{\r\n                  data : responseSelect\r\n                }]\r\n              },\r\n              treemapSelectTable : responseTable\r\n            }), () => {\r\n              //console.log(this.state);\r\n            });\r\n          }\r\n      });\r\n    }\r\n\r\n    const columns = [\r\n      {\r\n        Header: 'Channel Category',\r\n        accessor: 'category',\r\n        cellClass: 'text-center',\r\n        disableSortBy: true\r\n      },\r\n      {\r\n        Header: 'Needs Keywords',\r\n        accessor: 'keywords',\r\n        cellClass: 'text-center',\r\n        disableSortBy: true\r\n      },\r\n    ]\r\n\r\n    const searchClick = (data) => {\r\n      this.setState({  \r\n        searchBtnClick: true\r\n      });\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Form className=\"check-box-wrap multi\">\r\n                  <div className=\"tbl-vertical-heading\">\r\n                    <table>\r\n                      <tbody>\r\n                        <tr>\r\n                          {/* vertical유형의 테이블 th 값은 인라인 스타일로 지정 바랍니다. */}\r\n                          <th style={{ width:'10%' }}>Period</th>\r\n                          <td style={{ width:'90%' }}>\r\n                          <div className=\"date-picker-wrap\">\r\n                              <DatePicker className=\"form-control\"  \r\n                              locale={ko}\r\n                              dateFormat=\"yyyy.MM.dd\"\r\n                              selected={statesItems.startDate} \r\n                              selectsStart\r\n                              startDate={statesItems.startDate}\r\n                              endDate={statesItems.endDate}\r\n                              onChange={this.ChangeStartDate}  \r\n                              placeholderText=\"Select Time\" \r\n                              /> \r\n                              <span className=\"cal-range\"> ~ </span>\r\n                              <DatePicker className=\"form-control\"  \r\n                              locale={ko}\r\n                              dateFormat=\"yyyy.MM.dd\"\r\n                              selected={statesItems.endDate}\r\n                              selectsEnd\r\n                              startDate={statesItems.startDate}\r\n                              endDate={statesItems.endDate}\r\n                              onChange={this.ChangeEndDate}  \r\n                              placeholderText=\"Select Time\" \r\n                              /> \r\n                          </div>\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th style={{ width:'10%' }}>Channel</th>\r\n                          <td style={{ width:'90%' }}>\r\n                          <ChannelButton searchStart={searchStart} searchBtnClick={statesItems.searchBtnClick} />                             \r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th style={{ width:'10%' }}>Keywords</th>\r\n                          <td style={{ width:'90%' }}>\r\n                            <Formik\r\n                                initialValues={{\r\n                                keyword: '',\r\n                                }}\r\n                                // onSubmit={onSubmit}\r\n                            >\r\n                              {({ errors, touched }) => (\r\n                                  <FormGroup className=\"keyword-area\">\r\n                                  <Field\r\n                                      className=\"form-control\"\r\n                                      name=\"keyword\"\r\n                                      value={statesItems.keyWordtext}\r\n                                      onChange={onKeywordChange}\r\n                                      validate={validateKeyword}\r\n                                  />\r\n                                  {errors.keyword && touched.keyword && (\r\n                                      <div className=\"d-block noti-text\">\r\n                                      {errors.keyword}\r\n                                      </div>\r\n                                  )}\r\n                                  </FormGroup>\r\n                              )}\r\n                          </Formik>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <Button className=\"btn-xl mt-4\" color=\"gray\" onClick={searchClick}>\r\n                      ENTER\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n\r\n        {/* s: GA Keyword Gap */}\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className=\"box-title\">\r\n                  <h2>Needs Pattern Map</h2>\r\n                </div>\r\n\r\n                <div className=\"box-area pattern-map-area\">\r\n                  <div className=\"box-left\">\r\n                    <div className=\"pattern-tit\"><span>Total</span></div>\r\n                    <ReactApexChart options={statesItems.treemapTotal.options} series={statesItems.treemapTotal.series} type=\"treemap\" height={540} className=\"chart-box\" />\r\n                  </div>\r\n                  <div className=\"box-right\">\r\n                    <div className=\"comparison-select-area pattern-tit\">\r\n                      <span className=\"\">Channel</span>\r\n                      <FormGroup className=\"select-box\">\r\n                        <Select\r\n                          components={{ Input: CustomSelectInput }}\r\n                          className=\"react-select\"\r\n                          classNamePrefix=\"react-select\"\r\n                          name=\"form-field-name\"\r\n                          value={channelOptionSelected}\r\n                          onChange={changeOption}\r\n                          options={this.state.channelOption}\r\n                        />\r\n                      </FormGroup>\r\n                    </div>\r\n                    <ReactApexChart options={statesItems.treemapSelect.options} series={statesItems.treemapSelect.series} type=\"treemap\" height={540} className=\"chart-box\" />\r\n                  </div>\r\n                </div>\r\n                <div className=\"box-area tbl-no-page\">\r\n                  <div className=\"box-left\">\r\n                    <ReactTable\r\n                      className='table'\r\n                      data={this.state.treemapTotalTable}\r\n                      columns={columns}\r\n                      defaultPageSize={10}\r\n                      sortable={false}\r\n                    />\r\n                  </div>\r\n                  <div className=\"box-right\">\r\n                    <ReactTable\r\n                      className='table'\r\n                      data={this.state.treemapSelectTable}\r\n                      columns={columns}\r\n                      defaultPageSize={10}\r\n                      sortable={false}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        {/* e: GA Keyword Gap */}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Needspatterns;","C:\\tagons\\src\\helpers\\DevUtils.js",[],"C:\\tagons\\src\\views\\app\\socialListening\\tableData.js",[],"C:\\tagons\\src\\components\\applications\\TableRowspan.js",[],"C:\\tagons\\src\\components\\applications\\Row.js",[],"C:\\tagons\\src\\components\\applications\\TableColumn.js",[],"C:\\tagons\\src\\views\\app\\socialListening\\Sentimentanalysis.js",["594","595","596","597","598","599","600","601","602","603","604"],"/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable no-use-before-define */\r\n/* eslint no-unused-vars: \"off\" */\r\n/* eslint no-undef: \"off\" */\r\n/* eslint no-plusplus : \"off\" */\r\n/* eslint react/no-unused-state: \"off\" */\r\n/* eslint prefer-template: \"off\" */\r\n/* eslint react/no-array-index-key: \"off\" */\r\n/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Row,\r\n  Card,\r\n  CardBody,\r\n  Form,\r\n  Button,\r\n  FormGroup,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport { Formik, Field } from \"formik\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport Select from \"react-select\";\r\nimport { ko } from \"date-fns/esm/locale\";\r\nimport { Colxx } from \"../../../components/common/CustomBootstrap\";\r\nimport ChannelButton from \"../../../components/applications/ChannelButton\";\r\nimport CustomSelectInput from \"../../../components/common/CustomSelectInput\";\r\nimport TagInput from \"../../../components/applications/TagInput\";\r\nimport {\r\n  fullStackBarGraph,\r\n  positiveChartGraph,\r\n  negativeChartGraph,\r\n} from \"../../../components/charts/config\";\r\nimport FullStackBar from \"../../../components/charts/FullStackBar\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport CompareLine from \"../../../components/charts/CompareLine\";\r\nimport { ReactTableNor } from \"../../../containers/ui/ReactTableNormal\";\r\nimport { TableSentimantData } from \"../trend/data\";\r\nimport { login, UserInfo, logout } from '../../../services/LoginService';\r\nimport { post } from 'axios';\r\n\r\nclass Sentimentanalysis extends React.Component {\r\n  constructor(props) {\r\n    super(props); // React.Component의 생성자 메소드를 먼저 실행\r\n    let date1 = new Date();\r\n    let date2 = new Date();\r\n    let loginYN = (UserInfo() !== null);\r\n    let userData = UserInfo();\r\n    date1.setDate(date1.getDate() - 9);\r\n    date2.setDate(date2.getDate() - 2);\r\n    this.state = {\r\n      startDate: date1,\r\n      endDate: date2,\r\n      searchBtnClick : false ,\r\n      tagSearchBtnClick : false,\r\n      searchStart : false , \r\n      userInfo : userData ,\r\n      loginCheck : loginYN,\r\n      defaultTagNum : 3 ,\r\n      tagInput : [] ,\r\n      keyWordtext : \"\",\r\n      selectedOptionsBase :[] ,\r\n      checkInfo: [\r\n        { id: 1, value: \"Daily\", isChecked: true },\r\n        { id: 2, value: \"Weekly\", isChecked: false },\r\n        { id: 3, value: \"Monthly\", isChecked: false },\r\n        { id: 4, value: \"Yearly\", isChecked: false },\r\n      ],\r\n      selectedOptions: [],\r\n      fullStackBarGraphSeries:[] ,\r\n      fullStackBarGraphOptions:fullStackBarGraph.options,\r\n      positiveGraphOptions : positiveChartGraph.options,\r\n      positiveChartSeries:[] ,\r\n      negativeGraphOptions : negativeChartGraph.options,\r\n      negativeGraphSeries:[] ,\r\n      positiveTableSentimantData:[] ,\r\n      negativeTableSentimantData:[] ,\r\n      positiveColumns : [\r\n      {\r\n        Header: \"Rank\",\r\n        accessor: \"id\",\r\n        cellClass: \"list-item-heading text-center w-10\",\r\n      },\r\n      {\r\n        Header: \"\",\r\n        accessor: \"title\",\r\n        cellClass: \"text-muted text-center w-60\",\r\n      },\r\n      {\r\n        Header: \"TF\",\r\n        accessor: \"TF\",\r\n        cellClass: \"text-muted text-center w-10\",\r\n      },\r\n      {\r\n        Header: \"DF\",\r\n        accessor: \"DF\",\r\n        cellClass: \"text-muted text-center w-10\",\r\n      },\r\n      {\r\n        Header: \"TF-IDF\",\r\n        accessor: \"TF-IDF\",\r\n        cellClass: \"text-muted text-center w-10\",\r\n      },\r\n    ] ,\r\n      negativeColumns :  [\r\n      {\r\n        Header: \"Rank\",\r\n        accessor: \"id\",\r\n        cellClass: \"list-item-heading text-center w-10\",\r\n      },\r\n      {\r\n        Header: \"\",\r\n        accessor: \"title\",\r\n        cellClass: \"text-muted text-center w-60\",\r\n      },\r\n      {\r\n        Header: \"TF\",\r\n        accessor: \"TF\",\r\n        cellClass: \"text-muted text-center w-10\",\r\n      },\r\n      {\r\n        Header: \"DF\",\r\n        accessor: \"DF\",\r\n        cellClass: \"text-muted text-center w-10\",\r\n      },\r\n      {\r\n        Header: \"TF-IDF\",\r\n        accessor: \"TF-IDF\",\r\n        cellClass: \"text-muted text-center w-10\",\r\n      },\r\n    ] ,\r\n      totalGraph: {\r\n        series: [\r\n          {\r\n            name: \"Users\",\r\n            data: [\r\n              0.77, 0.88, 0.99, 0.11, 0.12, 0.34, 0.56, 0.4, 0.56, 0.41, 0.42,\r\n              0.44, 0.55, 0.66, 0.77, 0.99, 0.11, 0.55, 0.11, 0.12, 0.13, 0.15,\r\n              0.46, 0.79, 0.53, 0.12, 0.86, 0.77, 0.2, 0.55, 0.44,\r\n            ],\r\n          },\r\n          {\r\n            name: \"Sessions\",\r\n            data: [\r\n              0.77, 0.8, 0.55, 0.22, 0.33, 0.44, 0.55, 0.12, 0.13, 0.76, 0.45,\r\n              0.52, 0.01, 0.76, 0.22, 0.78, 0.65, 0.63, 0.93, 0.94, 0.82, 0.2,\r\n              0.46, 0.15, 0.76, 0.22, 0.46, 0.55, 0.34, 0.74, 0.45,\r\n            ],\r\n          },\r\n        ],\r\n        height: 503,\r\n        options: {\r\n          chart: {\r\n            type: \"line\",\r\n            dropShadow: {\r\n              enabled: false,\r\n              color: \"#000\",\r\n              top: 18,\r\n              left: 7,\r\n              blur: 10,\r\n              opacity: 0.2,\r\n            },\r\n            toolbar: {\r\n              show: false,\r\n            },\r\n            zoom: {\r\n              enabled: false,\r\n            },\r\n          },\r\n          legend: {\r\n            position: \"top\",\r\n            horizontalAlign: \"left\",\r\n          },\r\n          colors: [\"#404141\", \"#ed7d31\"],\r\n          dataLabels: {\r\n            enabled: true,\r\n            background: {\r\n              foreColor: \"#000\",\r\n              padding: 0,\r\n              borderRadius: 0,\r\n              borderColor: \"transparent\",\r\n            },\r\n            style: {\r\n              fontSize: \"14px\",\r\n              fontFamily: \"Helvetica, Arial, sans-serif\",\r\n              fontWeight: \"bold\",\r\n              colors: [\"transparent\"],\r\n            },\r\n            offsetY: -10,\r\n          },\r\n          markers: {\r\n            size: 5,\r\n            hover: {\r\n              size: 5,\r\n              sizeOffset: 5,\r\n              fillColor: \"#000\",\r\n            },\r\n            discrete: [\r\n              {\r\n                fillColor: \"#e3e3e3\",\r\n                strokeColor: \"#fff\",\r\n                size: 5,\r\n              },\r\n            ],\r\n          },\r\n          stroke: {\r\n            curve: \"smooth\",\r\n          },\r\n          grid: {\r\n            show: false,\r\n          },\r\n          xaxis: {\r\n            categories: [\r\n              1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\r\n              20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\r\n            ],\r\n            tickPlacement: \"between\",\r\n          },\r\n          yaxis: {\r\n            show: false,\r\n          },\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const stateItem = this.state;\r\n    if (!stateItem.loginCheck){\r\n      document.location.href = \"/user/login\";\r\n    }\r\n  }\r\n\r\n  ChangeStartDate = (e) => {\r\n    this.setState({\r\n      startDate: e,\r\n    });\r\n  };\r\n\r\n  ChangeEndDate = (e) => {\r\n    this.setState({\r\n      endDate: e,\r\n    });\r\n  };\r\n\r\n\r\n  handleOneChecked = (evt) => {\r\n    let { checkInfo } = this.state;\r\n    checkInfo.forEach(item => {\r\n      if (item.value === evt.target.value){\r\n        if (!item.isChecked ){\r\n          item.isChecked = evt.target.checked;\r\n        }         \r\n      }\r\n      else{\r\n        item.isChecked = false;\r\n      }\r\n    });\r\n    this.setState({ checkInfo });\r\n  };\r\n\r\n  SearchClick = (e) => {\r\n    console.log('Sentimentanalysis SearchClick !!');\r\n    /* \r\n    this.setState({  \r\n      searchBtnClick: true\r\n    });\r\n    */ \r\n    this.setState({  \r\n      tagInput : [] ,\r\n      tagSearchBtnClick: true ,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const statesItems = this.state;\r\n    const validateKeyword = (value) => {\r\n      let error;\r\n      if (!statesItems.keyWordtext) {\r\n        error = \"No Keywords\";\r\n      }\r\n      return error;\r\n    };\r\n\r\n    const selectedOptionsBase = [\r\n      { label: \"Total\", value: \"social_val01\", key: 0 },\r\n      { label: \"Naver_news\", value: \"social_val02\", key: 1 },\r\n      { label: \"Naver_blog\", value: \"social_val03\", key: 2 },\r\n    ];\r\n\r\n    const columns = [\r\n      {\r\n        Header: \"Rank\",\r\n        accessor: \"id\",\r\n        cellClass: \"list-item-heading text-center w-10\",\r\n      },\r\n      {\r\n        Header: \"Naver News\",\r\n        accessor: \"title\",\r\n        cellClass: \"text-muted text-center w-60\",\r\n      },\r\n      {\r\n        Header: \"TF\",\r\n        accessor: \"TF\",\r\n        cellClass: \"text-muted text-center w-10\",\r\n      },\r\n      {\r\n        Header: \"DF\",\r\n        accessor: \"DF\",\r\n        cellClass: \"text-muted text-center w-10\",\r\n      },\r\n      {\r\n        Header: \"TF-IDF\",\r\n        accessor: \"TF-IDF\",\r\n        cellClass: \"text-muted text-center w-10\",\r\n      },\r\n    ];\r\n    const dateString = (dateValue) => {\r\n      let retStr = '';\r\n      //Year\r\n      retStr = retStr.concat(dateValue.getFullYear());\r\n      //Month\r\n      if(dateValue.getMonth() < 10) {\r\n          retStr = retStr.concat('-0', dateValue.getMonth() + 1);\r\n      }\r\n      else {\r\n          retStr = retStr.concat('-', dateValue.getMonth() + 1);\r\n      }\r\n      //Date\r\n      if(dateValue.getDate() < 10) {\r\n          retStr = retStr.concat('-0', dateValue.getDate());\r\n      }\r\n      else {\r\n          retStr = retStr.concat('-', dateValue.getDate());\r\n      }\r\n      return retStr;\r\n    }\r\n    const setSentimentFactor = (ResponseData , searchCondition , selectedOptions) => {\r\n      var PositiveTableSentimantData = [] ;\r\n      var NegativeTableSentimantData = [] ;\r\n\r\n      console.log('setSentimentFactor' , ResponseData );\r\n      ResponseData.Positive.forEach(function(item,idx){\r\n        PositiveTableSentimantData.push({ id: idx + 1 , title: item.Value, TF: item.TF, DF: item.DF,'TF-IDF': item.IDF });\r\n      });\r\n\r\n      ResponseData.Negative.forEach(function(item,idx){\r\n        NegativeTableSentimantData.push({ id: idx + 1 , title: item.Value, TF: item.TF, DF: item.DF,'TF-IDF': item.IDF });\r\n      });\r\n      this.setState({  \r\n        positiveTableSentimantData : PositiveTableSentimantData,\r\n        negativeTableSentimantData : NegativeTableSentimantData,\r\n      });\r\n\r\n    };\r\n\r\n    const getSentimentFactor = (searchCondition , selectedOptions) => {\r\n      var searchConditionFactor = {};\r\n      post('/sociallistening/GetSentiment_Factor', searchConditionFactor).\r\n      then((response) => {\r\n        setSentimentFactor(response.data , searchConditionFactor , selectedOptions);\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);         \r\n      });\r\n\r\n    }\r\n\r\n    const setChannelSentimentAnalysis = (ResponseData , searchCondition , selectedOptions) => {\r\n     \r\n      var PositiveArr = [];\r\n      var CategoryArr = [];\r\n      var NegativeArr = [];\r\n      var categoryLen = 0;\r\n      var positiveChartGraphOption = positiveChartGraph.options;\r\n      var negativeChartGraphOption = negativeChartGraph.options;\r\n      var columInfo = JSON.parse(JSON.stringify(statesItems.positiveColumns)); \r\n      console.log('setChannelSentimentAnalysis',ResponseData);\r\n      ResponseData.Positive.forEach(function(item,idx){\r\n        PositiveArr.push({name: item.Channel , data:[]});\r\n        categoryLen = item.Data.length ;\r\n        item.Data.forEach(function(item1,idx1){\r\n          PositiveArr[idx].data.push(item1.value);\r\n          if (CategoryArr.length < categoryLen ){\r\n            CategoryArr.push(item1.date.substring(8,10));\r\n          }\r\n        });\r\n        \r\n      });\r\n      \r\n      ResponseData.Negative.forEach(function(item,idx){\r\n        NegativeArr.push({name: item.Channel , data:[]});\r\n        item.Data.forEach(function(item1,idx1){\r\n          NegativeArr[idx].data.push(item1.value);         \r\n        });\r\n      });\r\n      \r\n      positiveChartGraphOption.xaxis.categories = CategoryArr;\r\n      negativeChartGraphOption.xaxis.categories = CategoryArr;\r\n      columInfo[1].Header = selectedOptions.value;\r\n      console.log('columInfo' , columInfo , columInfo[1] , selectedOptions);\r\n      this.setState({  \r\n        positiveChartSeries: PositiveArr,\r\n        positiveGraphOptions : positiveChartGraphOption,\r\n        negativeGraphSeries: NegativeArr ,\r\n        negativeGraphOptions : negativeChartGraphOption , \r\n        positiveColumns : columInfo ,\r\n        negativeColumns : columInfo , \r\n      });\r\n      getSentimentFactor(searchCondition , selectedOptions) ;\r\n\r\n    }\r\n\r\n    const getChannelSentimentAnalysis = (searchCondition , selectedOptions) => {\r\n      var searchConditionAnalysis = {};\r\n      searchConditionAnalysis.FromDate  = searchCondition.FromDate ;\r\n      searchConditionAnalysis.ToDate  = searchCondition.ToDate ;\r\n      searchConditionAnalysis.Period_Unit   = searchCondition.Period_Unit  ;\r\n      searchConditionAnalysis.Channel_Upper   = selectedOptions.channelUp ;\r\n      searchConditionAnalysis.Channel_Lower   = selectedOptions.value  ;\r\n      searchConditionAnalysis.Competitors   = searchCondition.Competitors  ;\r\n      searchConditionAnalysis.Keyword   = searchCondition.Keyword  ;\r\n      post('/sociallistening/GetChannel_Sentiment_Analysis', searchConditionAnalysis).\r\n      then((response) => {\r\n        setChannelSentimentAnalysis(response.data , searchCondition , selectedOptions);\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);         \r\n      });\r\n\r\n\r\n    }\r\n    const setSentimentAnalysis = (searchCondition,ResponseData ,selectedOptions) => {\r\n      var fullStackBarGraphOption = fullStackBarGraph.options;\r\n      var fullStackBarGraphSerie = fullStackBarGraph.series;\r\n      var XaxisCategories = [];\r\n      var NegativeArr = [];\r\n      var NeutralArr = [];\r\n      var PositiveArr = [];\r\n      \r\n      ResponseData.Data.forEach(function(item,idx){\r\n           XaxisCategories.push(item.name); \r\n           NegativeArr.push(item.Negative);\r\n           NeutralArr.push(item.Neutral);\r\n           PositiveArr.push(item.Positive);\r\n      });\r\n      fullStackBarGraphSerie[0].data = PositiveArr; \r\n      fullStackBarGraphSerie[1].data = NeutralArr; \r\n      fullStackBarGraphSerie[2].data = NegativeArr; \r\n      fullStackBarGraphOption.xaxis.categories = XaxisCategories;\r\n      // console.log('GetSentiment_Analysis', fullStackBarGraphOption);\r\n      this.setState({  \r\n        fullStackBarGraphSeries: fullStackBarGraphSerie,\r\n        fullStackBarGraphOptions: fullStackBarGraphOption ,\r\n      });\r\n      getChannelSentimentAnalysis(searchCondition , selectedOptions );\r\n    }\r\n    const getSentimentAnalysis = (searchCondition , selectedOptions ) =>{\r\n      post('/sociallistening/GetSentiment_Analysis', searchCondition).\r\n      then((response) => {\r\n        setSentimentAnalysis(searchCondition,response.data , selectedOptions);\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);         \r\n      });\r\n    }\r\n\r\n    const searchStart = (searchChannel) =>{\r\n      var searchCondition = {} ;\r\n      var ChannelUpper = [];\r\n      var ChannelLower = [];\r\n      var selectList = [];\r\n      var periodUnit = \"\";\r\n\r\n      this.setState({  \r\n        searchBtnClick: false, \r\n        searchCondition: {} ,\r\n        searchStart : false , \r\n        selectedOptionsBase : [] ,\r\n      });\r\n      if (searchChannel.length > 0 ){\r\n         selectList.push({ label: 'Total', value: 'Total' , channelUp : \"Total\" , key: 0 });\r\n         searchChannel.forEach(function(item,idx){\r\n           ChannelUpper.push(item.type);\r\n           ChannelLower.push(item.name);\r\n           selectList.push({ label: item.name, value: item.name, channelUp : item.type , key: idx + 1});\r\n         });\r\n      }\r\n      else{\r\n        console.log('채널 선택 없음');\r\n      }\r\n      statesItems.checkInfo.forEach(item => {\r\n        if (item.isChecked){\r\n          periodUnit = item.value;\r\n        }\r\n      });\r\n      this.setState({  \r\n        selectedOptionsBase: selectList ,\r\n      });\r\n      searchCondition.FromDate = dateString(statesItems.startDate); \r\n      searchCondition.ToDate = dateString(statesItems.endDate); \r\n      searchCondition.Period_Unit = periodUnit;\r\n      searchCondition.Channel_Upper = ChannelUpper[0]; // 나중에 확인하ㅕ ChannelUpper 으로 바꿔야 됨\r\n      searchCondition.Channel_Lower = ChannelLower;\r\n      searchCondition.Competitors = statesItems.tagInput;\r\n      searchCondition.Keyword = statesItems.keyWordtext;\r\n      //searchCondition.Company = statesItems.userInfo.CompanyName;\r\n      //searchCondition.CompanyCode = statesItems.userInfo.CompanyCode;\r\n      console.log('searchCondition',searchCondition);\r\n      this.setState({  \r\n        searchCondition: searchCondition ,\r\n        searchStart : true , \r\n        selectedOptions: selectList[0], \r\n      });\r\n      //여기서 조회 API 구현하면 됨     \r\n      getSentimentAnalysis(searchCondition , selectList[0]);\r\n    };\r\n\r\n    const tagSearchStart = (tagInputs) => {\r\n      console.log('tagSearchStart' , tagInputs );\r\n      this.setState({  \r\n        tagSearchBtnClick: false,\r\n        searchBtnClick: true ,\r\n        tagInput : tagInputs,\r\n      });\r\n    }\r\n    const onKeywordChange = (e) =>{\r\n      this.setState({\r\n        keyWordtext : e.target.value\r\n      }); \r\n    };\r\n    const onKeywordpress = (e) =>{\r\n      if (e.keyCode === 13){\r\n        e.preventDefault();\r\n        // 조회조건 Validation 체크\r\n        this.setState({  \r\n          searchBtnClick: true , \r\n        });\r\n      }\r\n    };\r\n\r\n    const setSelectedOptions = (val) => {\r\n      var searchCondition = {} ;\r\n      var columInfo = JSON.parse(JSON.stringify(statesItems.positiveColumns)); \r\n      console.log('setSelectedOptions', val);\r\n      searchCondition.FromDate  = statesItems.searchCondition.FromDate ;\r\n      searchCondition.ToDate  = statesItems.searchCondition.ToDate ;\r\n      searchCondition.Period_Unit   = statesItems.searchCondition.Period_Unit  ;\r\n      searchCondition.Channel_Upper   = val.channelUp ;\r\n      searchCondition.Channel_Lower   = val.value  ;\r\n      searchCondition.Competitors   = statesItems.searchCondition.Competitors  ;\r\n      searchCondition.Keyword   = statesItems.searchCondition.Keyword  ;\r\n      columInfo[1].Header = val.value;\r\n      \r\n      this.setState({\r\n        selectedOptions: val,\r\n        positiveColumns : columInfo ,\r\n        negativeColumns : columInfo , \r\n      });\r\n      getSentimentFactor(searchCondition , val) ;\r\n    };\r\n\r\n    return (\r\n      <div className='sentiment_wrap'>\r\n        <Row>\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Form className=\"check-box-wrap multi\">\r\n                  <div className=\"tbl-vertical-heading\">\r\n                    <table>\r\n                      <tbody>\r\n                        <tr>\r\n                          {/* vertical유형의 테이블 th 값은 인라인 스타일로 지정 바랍니다. */}\r\n                          <th style={{ width: \"15%\" }}>Period</th>\r\n                          <td style={{ width: \"35%\" }}>\r\n                            <div className=\"date-picker-wrap\">\r\n                              <DatePicker\r\n                                className=\"form-control\"\r\n                                locale={ko}\r\n                                dateFormat=\"yyyy.MM.dd\"\r\n                                selected={statesItems.startDate}\r\n                                selectsStart\r\n                                startDate={statesItems.startDate}\r\n                                endDate={statesItems.endDate}\r\n                                onChange={this.ChangeStartDate}\r\n                                placeholderText=\"Select Time\"\r\n                              />\r\n                              <span className=\"cal-range\"> ~ </span>\r\n                              <DatePicker\r\n                                className=\"form-control\"\r\n                                locale={ko}\r\n                                dateFormat=\"yyyy.MM.dd\"\r\n                                selected={statesItems.endDate}\r\n                                selectsEnd\r\n                                startDate={statesItems.startDate}\r\n                                endDate={statesItems.endDate}\r\n                                onChange={this.ChangeEndDate}\r\n                                placeholderText=\"Select Time\"\r\n                              />\r\n                            </div>\r\n                          </td>\r\n                          <th style={{ width: \"15%\" }}>Period Unit</th>\r\n                          <td style={{ width: \"35%\" }}>\r\n                            {statesItems.checkInfo.map((items) => {\r\n                              return (\r\n                                <FormGroup\r\n                                  check\r\n                                  inline\r\n                                  className=\"check-box lookup-area\"\r\n                                  key={items.id}\r\n                                >\r\n                                  <Input\r\n                                    id={items.id}\r\n                                    key={items.id}\r\n                                    onChange={this.handleOneChecked}\r\n                                    checked={items.isChecked}\r\n                                    type=\"checkbox\"\r\n                                    value={items.value}\r\n                                    className=\"check-single-box\"\r\n                                  />{\" \"}\r\n                                  <label\r\n                                    htmlFor={items.id}\r\n                                    className=\"bx_check_oran\"\r\n                                  >\r\n                                    <span>{items.value}</span>\r\n                                  </label>\r\n                                </FormGroup>\r\n                              );\r\n                            })}\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th style={{ width: \"15%\" }}>Channel</th>\r\n                          <td style={{ width: \"85%\" }} colSpan=\"3\">\r\n                            <ChannelButton searchStart={searchStart} searchBtnClick={statesItems.searchBtnClick}  />\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th style={{ width: \"15%\" }}>Competitors</th>\r\n                          <td style={{ width: \"85%\" }} colSpan=\"3\">\r\n                            <TagInput defaultTagNum={statesItems.defaultTagNum} searchStart={tagSearchStart}  searchBtnClick={statesItems.tagSearchBtnClick}/>\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th style={{ width: \"15%\" }}>Keywords</th>\r\n                          <td style={{ width: \"85%\" }} colSpan=\"3\">\r\n                            <Formik\r\n                              initialValues={{\r\n                                keyword: \"\",\r\n                              }}\r\n                              // onSubmit={onSubmit}\r\n                            >\r\n                              {({ errors, touched }) => (\r\n                                <FormGroup className=\"keyword-area\">\r\n                                  <Field\r\n                                    className=\"form-control\"\r\n                                    name=\"keyword\"\r\n                                    onChange={onKeywordChange}\r\n                                    value={statesItems.keyWordtext}\r\n                                    validate={validateKeyword}\r\n                                    onKeyDown={onKeywordpress}\r\n                                  />\r\n                                  {errors.keyword && touched.keyword && (\r\n                                    <div className=\"d-block noti-text\">\r\n                                      {errors.keyword}\r\n                                    </div>\r\n                                  )}\r\n                                </FormGroup>\r\n                              )}\r\n                            </Formik>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <Button className=\"btn-xl mt-4\" color=\"gray\" onClick={this.SearchClick}>\r\n                      ENTER\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n\r\n        {/* s: GA Keyword Gap */}\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className=\"box-title\">\r\n                  <h2>Sentiment Analysis(P/N)</h2>\r\n                </div>\r\n                <div className=\"graph-area\">\r\n                  <FullStackBar\r\n                    options={statesItems.fullStackBarGraphOptions}\r\n                    series={statesItems.fullStackBarGraphSeries}\r\n                    height={fullStackBarGraph.height}\r\n                  />\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className=\"box-title\">\r\n                  <h2>Channel Sentiment Analysis</h2>\r\n                </div>\r\n                <div className=\"graph-area mt-5\">\r\n                  <div className=\"bx_select_area\">\r\n                    <span className=\"select-title\">Channel</span>\r\n                    <FormGroup className=\"select-box\">\r\n                      <Select\r\n                        components={{ Input: CustomSelectInput }}\r\n                        className=\"react-select\"\r\n                        classNamePrefix=\"react-select\"\r\n                        name=\"form-field-name\"\r\n                        value={statesItems.selectedOptions}\r\n                        onChange={(val) => setSelectedOptions(val)}\r\n                        options={statesItems.selectedOptionsBase}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"graph-area\">\r\n                    <div className=\"clearfix box-line\">\r\n                      <div className=\"box left\">\r\n                        <div className=\"chart-area\">\r\n                          <div className=\"chart-header blue\">\r\n                            <div className=\"chart-title t-c\">\r\n                              <h4 className='t-c'>Positive</h4>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"chart-cont\">\r\n                            <CompareLine\r\n                              options={statesItems.positiveGraphOptions }\r\n                              series={statesItems.positiveChartSeries}\r\n                              height={330}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <ReactTableNor\r\n                          data={statesItems.positiveTableSentimantData}\r\n                          columns={statesItems.positiveColumns}\r\n                        /> \r\n                      </div>\r\n                      <div className=\"box right\">\r\n                        <div className=\"chart-area\">\r\n                          <div className=\"chart-header red\">\r\n                            <div className=\"chart-title t-c\">\r\n                              <h4>Negative</h4>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"chart-cont\">\r\n                            <CompareLine\r\n                              options={statesItems.negativeGraphOptions }\r\n                              series={statesItems.negativeGraphSeries}\r\n                              height={330}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <ReactTableNor\r\n                          data={statesItems.negativeTableSentimantData}\r\n                          columns={statesItems.negativeColumns}\r\n                        /> \r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        {/* e: GA Keyword Gap */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sentimentanalysis;\r\n","C:\\tagons\\src\\views\\app\\onlineRetailer\\index.js",[],"C:\\tagons\\src\\components\\charts\\FullStackBar.js",[],"C:\\tagons\\src\\components\\applications\\TagInput.js",["605"],"/* eslint-disable react/jsx-boolean-value */\r\nimport React from 'react';\r\nimport { WithContext as ReactTags } from 'react-tag-input';\r\n\r\nconst KeyCodes = {\r\n  comma: 188,\r\n  enter: [10, 13],\r\n};\r\n\r\nconst delimiters = [...KeyCodes.enter, KeyCodes.comma];\r\n\r\nclass TagInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            tagNum : props.defaultTagNum,\r\n            tags: [],\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(props) {\r\n      // only update chart if the data has changed\r\n      \r\n      // console.log('componentDidUpdate', props);\r\n      if (this.props.searchBtnClick){\r\n        let { tags } = this.state;\r\n        this.props.searchStart(tags);\r\n      }\r\n    }\r\n\r\n    handleDelete = (i) => {\r\n        const { tags } = this.state;\r\n        this.setState({\r\n         tags: tags.filter((tag, index) => index !== i),\r\n        });\r\n    }\r\n\r\n    handleAddition = (tag) =>  {\r\n      const { tags , tagNum} = this.state;\r\n      // console.log('handleAddition',tag);\r\n      if(tags.length !== tagNum ){\r\n          this.setState(state => ({ tags: [...state.tags, tag] }));\r\n      }\r\n    }\r\n\r\n    render() {\r\n        const { tags } = this.state;\r\n        const { tagNum } = this.state;\r\n        return (\r\n            <div>\r\n                <ReactTags tags={tags}\r\n                    handleDelete={this.handleDelete}\r\n                    handleAddition={this.handleAddition}\r\n                    delimiters={delimiters}\r\n                    allowDeleteFromEmptyInput={false}\r\n                    placeholder='No Competitors'\r\n                    name={tags.length !== tagNum ? `input-tag` : `input-tag hide`}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n\r\nexport default TagInput;","C:\\tagons\\src\\containers\\ui\\ReactTableNormal.js",[],"C:\\tagons\\src\\views\\app\\onlineRetailer\\Productprice.js",[],"C:\\tagons\\src\\views\\app\\onlineRetailer\\Onboard.js",["606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621"],"/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable no-use-before-define */\r\n/* eslint no-unused-vars: \"off\" */\r\n/* eslint no-undef: \"off\" */\r\n/* eslint no-plusplus : \"off\" */\r\n/* eslint react/no-unused-state: \"off\" */\r\n/* eslint prefer-template: \"off\" */\r\n/* eslint react/no-array-index-key: \"off\" */\r\n/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from 'react';\r\nimport { Row, Card, CardBody, Form, Button, FormGroup, Input, Nav, NavLink, NavItem, TabContent, TabPane, } from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport { Formik, Field } from 'formik';\r\nimport DatePicker from 'react-datepicker';\r\nimport { ko } from \"date-fns/esm/locale\";\r\nimport Select from 'react-select';\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\nimport CompareLine from '../../../components/charts/CompareLine';\r\nimport TagInput from \"../../../components/applications/TagInput\";\r\nimport FullStackBar from \"../../../components/charts/FullStackBar\";\r\nimport BrushChart from '../../../components/charts/BrushChart';\r\nimport CustomSelectInput from '../../../components/common/CustomSelectInput';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport {\r\n    boardTotalGraph,\r\n    fullStackBarGraphType2\r\n} from '../../../components/charts/config';\r\nimport { addMonths } from \"date-fns\";\r\nimport { login, UserInfo, logout } from '../../../services/LoginService';\r\nimport { post } from 'axios';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass Onboard extends React.Component {\r\n  constructor(props) {\r\n    super(props); // React.Component의 생성자 메소드를 먼저 실행\r\n    let date1 = addMonths(new Date(), -1);\r\n    let date2 = new Date();\r\n    let loginYN = (UserInfo() !== null);\r\n    let userData = UserInfo();\r\n    let productOptions = JSON.parse(JSON.stringify(boardTotalGraph.options)); \r\n    let priceOptions = JSON.parse(JSON.stringify(boardTotalGraph.options)); \r\n    let marketOptions = JSON.parse(JSON.stringify(boardTotalGraph.options)); \r\n    let reviewOptions = JSON.parse(JSON.stringify(boardTotalGraph.options)); \r\n    let cartOptions = JSON.parse(JSON.stringify(boardTotalGraph.options)); \r\n    let salesOptions  = JSON.parse(JSON.stringify(fullStackBarGraphType2.options)); \r\n    let pointsOptions  = JSON.parse(JSON.stringify(fullStackBarGraphType2.options)); \r\n    this.state = {\r\n      startDate: date1,\r\n      endDate: date2,\r\n      searchBtnClick : false ,\r\n      tagSearchBtnClick : false,\r\n      searchStart : false , \r\n      userInfo : userData ,\r\n      loginCheck : loginYN,\r\n      defaultTagNum : 3 ,\r\n      tagInput : [] ,\r\n      keyWordtext : \"\",\r\n      selectedOptionsBase :[] ,\r\n      SearchCondition : {} ,\r\n      activeTab: '1',\r\n      activeTabSecond: '1',\r\n      ProductSeries : [],\r\n      PriceSeries : [],\r\n      MarketSeries : [],\r\n      ReviewSeries : [],\r\n      CartSeries : [],\r\n      ProductOptions : productOptions,\r\n      PriceOptions : priceOptions,\r\n      MarketOptions : marketOptions,\r\n      ReviewOptions : reviewOptions,\r\n      CartOptions : cartOptions,\r\n      SalesSeries : [],\r\n      PointsSeries : [],\r\n      SalesOptions : salesOptions,\r\n      PointsOptions : pointsOptions,\r\n      checkInfo: [\r\n          { id: 1, value: \"Daily\", isChecked: true },\r\n          { id: 2, value: \"Weekly\", isChecked: false },\r\n          { id: 3, value: \"Monthly\", isChecked: false },\r\n          { id: 4, value: \"Yearly\", isChecked: false }\r\n      ],\r\n      brushGraph: {\r\n        series: [\r\n            {\r\n                name: \"Coupang\",\r\n                data: [0.77, 0.88, 0.99, 0.11, 0.12, 0.34, 0.56, 0.4, 0.56, 0.41, 0.42, 0.44, 0.55, 0.66, 0.77, 0.99, 0.11, 0.55, 0.11, 0.12, 0.13, 0.15, 0.46, 0.79, 0.53, 0.12, 0.86, 0.77, 0.2, 0.55, 0.44]\r\n            },\r\n            {\r\n                name: \"11st\",\r\n                data: [0.77, 0.8, 0.55, 0.22, 0.33, 0.44, 0.55, 0.12, 0.13, 0.76, 0.45, 0.52, 0.01, 0.76, 0.22, 0.78, 0.65, 0.63, 0.93, 0.94, 0.82, 0.2, 0.46, 0.15, 0.76, 0.22, 0.46, 0.55, 0.34, 0.74, 0.45]\r\n            },\r\n            {\r\n                name: \"G-market\",\r\n                data: [0.7, 0.1, 0.12, 0.5, 0.1, 0.22, 0.30, 0.8, 0.05, 0.11, 0.49, 0.49, 0.83, 0.43, 0.33, 0.99, 0.56, 0.91, 0.03, 0.18, 0.56, 0.39, 0.45, 0.88, 0.77, 0.13, 0.85, 0.24, 0.44, 0.18, 0.17]\r\n            },\r\n            {\r\n                name: \"Acuction\",\r\n                data: [0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.4, 0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.77]\r\n            },\r\n        ],\r\n        height: 230,\r\n        options: {\r\n            chart: {\r\n                id: 'chart2',\r\n                toolbar: {\r\n                    show: false\r\n                },\r\n                zoom: {\r\n                    enabled: false,\r\n                },\r\n            },\r\n            colors: ['#3a3b3b', '#404141', '#ed7d31', '#ffc104'],\r\n            stroke: {\r\n                width: 3\r\n            },\r\n            dataLabels: {\r\n                enabled: false\r\n            },\r\n            markers: {\r\n                size: 0\r\n            },\r\n            xaxis: {\r\n                categories: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],\r\n            },\r\n            legend: {\r\n                show: false\r\n            },\r\n        },\r\n        seriesLine: [\r\n            {\r\n                name: \"Coupang\",\r\n                data: [0.77, 0.8, 0.55, 0.22, 0.33, 0.44, 0.55, 0.12, 0.13, 0.76, 0.45, 0.52, 0.01, 0.76, 0.22, 0.78, 0.65, 0.63, 0.93, 0.94, 0.82, 0.2, 0.46, 0.15, 0.76, 0.22, 0.46, 0.55, 0.34, 0.74, 0.45]\r\n            },\r\n            {\r\n                name: \"11st\",\r\n                data: [0.7, 0.1, 0.12, 0.5, 0.1, 0.22, 0.30, 0.8, 0.05, 0.11, 0.49, 0.49, 0.83, 0.43, 0.33, 0.99, 0.56, 0.91, 0.03, 0.18, 0.56, 0.39, 0.45, 0.88, 0.77, 0.13, 0.85, 0.24, 0.44, 0.18, 0.17]\r\n            },\r\n            {\r\n                name: \"G-market\",\r\n                data: [0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.4, 0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.18, 0.28, 0.24, 0.44, 0.77]\r\n            },\r\n            {\r\n                name: \"Acuction\",\r\n                data: [0.77, 0.88, 0.99, 0.11, 0.12, 0.34, 0.56, 0.4, 0.56, 0.41, 0.42, 0.44, 0.55, 0.66, 0.77, 0.99, 0.11, 0.55, 0.11, 0.12, 0.13, 0.15, 0.46, 0.79, 0.53, 0.12, 0.86, 0.77, 0.2, 0.55, 0.44]\r\n            },\r\n        ],\r\n        heightLine: 130,\r\n        optionsLine: {\r\n            chart: {\r\n                id: 'chart1',\r\n                brush: {\r\n                    target: 'chart2',\r\n                    enabled: true,\r\n                    autoScaleYaxis: true\r\n                },\r\n                selection: {\r\n                    enabled: true,\r\n                },\r\n                zoom: {\r\n                    enabled: false,\r\n                }\r\n            },\r\n            colors: ['#3a3b3b', '#404141', '#ed7d31', '#ffc104'],\r\n            xaxis: {\r\n                tooltip: {\r\n                    enabled: false\r\n                }\r\n            },\r\n            yaxis: {\r\n                tickAmount: 2\r\n            },\r\n            toolbar: {\r\n                show: false\r\n            },\r\n            legend: {\r\n                position: 'top',\r\n                horizontalAlign: 'center',\r\n            },\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const stateItem = this.state;\r\n    if (!stateItem.loginCheck){\r\n      document.location.href = \"/user/login\";\r\n    }\r\n  }\r\n\r\n  ChangeStartDate = (e) => {\r\n      this.setState({\r\n          startDate: e,\r\n      });\r\n  };\r\n\r\n  ChangeEndDate = (e) => {\r\n      this.setState({\r\n          endDate: e\r\n      });\r\n  };\r\n\r\n  handleOneChecked = (evt) => {\r\n    let { checkInfo } = this.state;\r\n    checkInfo.forEach(item => {\r\n      if (item.value === evt.target.value){\r\n        if (!item.isChecked ){\r\n          item.isChecked = evt.target.checked;\r\n        }         \r\n      }\r\n      else{\r\n        item.isChecked = false;\r\n      }\r\n    });\r\n    this.setState({ checkInfo });\r\n  };\r\n\r\n  setSelectedOptions = (val) => {\r\n    this.setState({\r\n      selectedOptions: val\r\n    });\r\n  }\r\n\r\n  SearchClick = (e) => {\r\n    console.log('Sentimentanalysis SearchClick !!');\r\n    /* \r\n    this.setState({  \r\n      searchBtnClick: true\r\n    });\r\n    */ \r\n    this.setState({  \r\n      tagInput : [] ,\r\n      tagSearchBtnClick: true ,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const statesItems = this.state;\r\n    const selectedOptionsBase = [\r\n        { label: 'Total', value: 'social_val01', key: 0 },\r\n        { label: 'Naver_news', value: 'social_val02', key: 1 },\r\n        { label: 'Naver_blog', value: 'social_val03', key: 2 },\r\n    ];\r\n\r\n    const validateKeyword = (value) => {\r\n      let error;\r\n      if (!statesItems.keyWordtext) {\r\n        error = \"No Keywords\";\r\n      }\r\n      return error;\r\n    };\r\n\r\n    const dateString = (dateValue) => {\r\n      let retStr = '';\r\n      //Year\r\n      retStr = retStr.concat(dateValue.getFullYear());\r\n      //Month\r\n      if(dateValue.getMonth() < 10) {\r\n          retStr = retStr.concat('-0', dateValue.getMonth() + 1);\r\n      }\r\n      else {\r\n          retStr = retStr.concat('-', dateValue.getMonth() + 1);\r\n      }\r\n      //Date\r\n      if(dateValue.getDate() < 10) {\r\n          retStr = retStr.concat('-0', dateValue.getDate());\r\n      }\r\n      else {\r\n          retStr = retStr.concat('-', dateValue.getDate());\r\n      }\r\n      return retStr;\r\n    }\r\n\r\n    const setBenefitsType = (ResponseData) => {\r\n      var salesSeries =  [];\r\n      var pointsSeries =  [];\r\n      var salesCategory =  [];\r\n      var pointsCategory =  [];\r\n      var salesOptions =  JSON.parse(JSON.stringify(fullStackBarGraphType2.options)); \r\n      var pointsOptions =  JSON.parse(JSON.stringify(fullStackBarGraphType2.options)); \r\n      console.log('setBenefitsType', ResponseData);\r\n      salesSeries.push({name:'Sale', data: []});\r\n      salesSeries.push({name:'Not Sale', data: []});\r\n      pointsSeries.push({name:'Point', data: []});\r\n      pointsSeries.push({name:'Not Point', data: []});\r\n      ResponseData.Sales.forEach(function(item,idx){\r\n        salesCategory.push(item.Competitors);\r\n        salesSeries[0].data.push(item.Sale);\r\n        salesSeries[1].data.push(item.NotSale);\r\n      });\r\n      ResponseData.Points.forEach(function(item,idx){\r\n        pointsCategory.push(item.Competitors);\r\n        pointsSeries[0].data.push(item.Points);\r\n        pointsSeries[1].data.push(item.NotPoints);\r\n      });\r\n      salesOptions.xaxis.categories = salesCategory;\r\n      pointsOptions.xaxis.categories = pointsCategory;\r\n      this.setState({  \r\n        SalesSeries : salesSeries ,\r\n        PointsSeries : pointsSeries,\r\n        SalesOptions : salesOptions,\r\n        PointsOptions : pointsOptions,\r\n      });  \r\n\r\n    }\r\n\r\n    const getBenefitsType = (searchCondition) => {\r\n      post('/onbroad/GetBenefits_Type', searchCondition).\r\n      then((response) => {\r\n        setBenefitsType(response.data );\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);         \r\n      });\r\n    }\r\n    const setBroadMarket = (ResponseData , searchCondition ) => {\r\n      \r\n      var productSeries = [];\r\n      var productCategory = [];\r\n      var priceSeries = [];\r\n      var priceCategory = [];\r\n      var marketSeries = [];\r\n      var marketCategory = [];\r\n      var reviewSeries = [];\r\n      var reviewCategory = [];\r\n      var cartSeries = [];\r\n      var cartCategory = [];\r\n      var productOptions = JSON.parse(JSON.stringify(boardTotalGraph.options)); \r\n      var priceOptions = JSON.parse(JSON.stringify(boardTotalGraph.options)); \r\n      var marketOptions = JSON.parse(JSON.stringify(boardTotalGraph.options)); \r\n      var reviewOptions = JSON.parse(JSON.stringify(boardTotalGraph.options)); \r\n      var cartOptions = JSON.parse(JSON.stringify(boardTotalGraph.options)); \r\n      // var searchCondition = JSON.parse(JSON.stringify(statesItems.SearchCondition)); \r\n      \r\n      console.log('setBroadMarket', ResponseData);\r\n      ResponseData.Product.forEach(function(item,idx){\r\n        productSeries.push({name: item.Channel, data:[],});\r\n        item.Data.forEach(function(item1,idx1){\r\n          productSeries[idx].data.push(item1.value);\r\n          if (idx === 0) {\r\n            productCategory.push(item1.date.substring(8,10));\r\n          }\r\n        });\r\n      });\r\n      ResponseData.Price.forEach(function(item,idx){\r\n        priceSeries.push({name: item.Channel, data:[],});\r\n        item.Data.forEach(function(item1,idx1){\r\n          priceSeries[idx].data.push(item1.value);\r\n          if (idx === 0) {\r\n            priceCategory.push(item1.date.substring(8,10));\r\n          }\r\n        });\r\n      });\r\n      ResponseData.Market.forEach(function(item,idx){\r\n        marketSeries.push({name: item.Channel, data:[],});\r\n        item.Data.forEach(function(item1,idx1){\r\n          marketSeries[idx].data.push(item1.value);\r\n          if (idx === 0) {\r\n            marketCategory.push(item1.date.substring(8,10));\r\n          }\r\n        });\r\n      });\r\n      ResponseData.Reviews.forEach(function(item,idx){\r\n        reviewSeries.push({name: item.Channel, data:[],});\r\n        item.Data.forEach(function(item1,idx1){\r\n          reviewSeries[idx].data.push(item1.value);\r\n          if (idx === 0) {\r\n            reviewCategory.push(item1.date.substring(8,10));\r\n          }\r\n        });\r\n      });\r\n      ResponseData.Carts.forEach(function(item,idx){\r\n        cartSeries.push({name: item.Channel, data:[],});\r\n        item.Data.forEach(function(item1,idx1){\r\n          cartSeries[idx].data.push(item1.value);\r\n          if (idx === 0) {\r\n            cartCategory.push(item1.date.substring(8,10));\r\n          }\r\n        });\r\n      });\r\n      productOptions.xaxis.categories = productCategory;\r\n      priceOptions.xaxis.categories = productCategory;\r\n      marketOptions.xaxis.categories = productCategory;\r\n      reviewOptions.xaxis.categories = productCategory;\r\n      cartOptions.xaxis.categories = productCategory;\r\n      this.setState({  \r\n        ProductSeries : productSeries,\r\n        PriceSeries : priceSeries,\r\n        MarketSeries : marketSeries,\r\n        ReviewSeries : reviewSeries,\r\n        CartSeries : cartSeries,\r\n        ProductOptions : productOptions,\r\n        PriceOptions : priceOptions,\r\n        MarketOptions : marketOptions,\r\n        ReviewOptions : reviewOptions,\r\n        CartOptions : cartOptions,\r\n      });\r\n      searchCondition.Tab_Selected = \"Sales\" ;\r\n      getBenefitsType(searchCondition);\r\n    }\r\n\r\n    const getBroadMarket = (searchCondition) => {\r\n      post('/onbroad/GetBroad_Market', searchCondition).\r\n      then((response) => {\r\n        setBroadMarket(response.data , searchCondition  );\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);         \r\n      });\r\n\r\n    }\r\n\r\n    const tagSearchStart = (tagInputs) => {\r\n      var searchCondition = {} ;\r\n      var selectList = [];\r\n      var periodUnit = \"\";\r\n      var competitors = [];\r\n      console.log('tagSearchStart' , tagInputs );\r\n      // 여기서 호출\r\n      this.setState({  \r\n        tagSearchBtnClick: false,\r\n        searchBtnClick: false ,\r\n        tagInput : tagInputs,\r\n      });\r\n\r\n      statesItems.checkInfo.forEach(item => {\r\n        if (item.isChecked){\r\n          periodUnit = item.value;\r\n        }\r\n      });\r\n      if (tagInputs.length > 0 ){\r\n        selectList.push({ label: 'Total', value: 'Total' , channelUp : \"Total\" , key: 0 });\r\n        tagInputs.forEach(function(item,idx){\r\n           selectList.push({ label: item.text, value: item.id, key: idx + 1});\r\n           competitors.push(item.id);\r\n         });\r\n      }\r\n\r\n      searchCondition.FromDate = dateString(statesItems.startDate); \r\n      searchCondition.ToDate = dateString(statesItems.endDate); \r\n      searchCondition.Period_Unit = periodUnit;\r\n      searchCondition.Competitors = competitors;\r\n      searchCondition.Keyword = statesItems.keyWordtext;\r\n      this.setState({  \r\n        SearchCondition: searchCondition,\r\n      });\r\n      console.log('tagSearchStart',searchCondition);\r\n      getBroadMarket(searchCondition);\r\n    }\r\n    const onKeywordChange = (e) =>{\r\n      this.setState({\r\n        keyWordtext : e.target.value\r\n      }); \r\n    };\r\n\r\n    const onKeywordpress = (e) =>{\r\n      if (e.keyCode === 13){\r\n        e.preventDefault();\r\n        // 조회조건 Validation 체크\r\n        this.setState({  \r\n          tagSearchBtnClick: true , \r\n        });\r\n      }\r\n    };\r\n\r\n    const toggle = (tab, count) => {\r\n        const { activeTab, activeTabSecond } = this.state;\r\n        if (count === 'first') {\r\n            if (activeTab !== tab) {\r\n                this.setState({\r\n                    activeTab: tab\r\n                })\r\n            }\r\n        } else if (count === 'second') {\r\n            if (activeTabSecond !== tab) {\r\n                this.setState({\r\n                    activeTabSecond: tab\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n      <div className='onboard-wrap'>\r\n        <Row>\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n                <CardBody>\r\n                  <Form className=\"check-box-wrap multi\">\r\n                    <div className=\"tbl-vertical-heading\">\r\n                      <table>\r\n                        <tbody>\r\n                          <tr>\r\n                            {/* vertical유형의 테이블 th 값은 인라인 스타일로 지정 바랍니다. */}\r\n                            <th style={{ width: '15%' }}>Period</th>\r\n                            <td style={{ width: '35%' }}>\r\n                              <div className=\"date-picker-wrap\">\r\n                                <DatePicker className=\"form-control\"\r\n                                    locale={ko}\r\n                                    dateFormat=\"yyyy.MM.dd\"\r\n                                    selected={statesItems.startDate}\r\n                                    selectsStart\r\n                                    startDate={statesItems.startDate}\r\n                                    endDate={statesItems.endDate}\r\n                                    onChange={this.ChangeStartDate}\r\n                                    placeholderText=\"Select Time\"\r\n                                />\r\n                                <span className=\"cal-range\"> ~ </span>\r\n                                <DatePicker className=\"form-control\"\r\n                                    locale={ko}\r\n                                    dateFormat=\"yyyy.MM.dd\"\r\n                                    selected={statesItems.endDate}\r\n                                    selectsEnd\r\n                                    startDate={statesItems.startDate}\r\n                                    endDate={statesItems.endDate}\r\n                                    onChange={this.ChangeEndDate}\r\n                                    placeholderText=\"Select Time\"\r\n                                />\r\n                              </div>\r\n                            </td>\r\n                            <th style={{ width: '15%' }}>Period Unit</th>\r\n                            <td style={{ width: '35%' }}>\r\n                              {statesItems.checkInfo.map(items => {\r\n                                return (\r\n                                  <FormGroup check inline className='check-box lookup-area' key={items.id}>\r\n                                    <Input\r\n                                        id={items.id}\r\n                                        key={items.id}\r\n                                        onChange={this.handleOneChecked}\r\n                                        checked={items.isChecked}\r\n                                        type=\"checkbox\"\r\n                                        value={items.value}\r\n                                        className='check-single-box'\r\n                                    />{' '}\r\n                                    <label htmlFor={items.id} className='bx_check_oran'>\r\n                                        <span>{items.value}</span>\r\n                                    </label>\r\n                                  </FormGroup>\r\n                                )\r\n                              })}\r\n                            </td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th style={{ width: \"15%\" }}>Competitors</th>\r\n                            <td style={{ width: \"85%\" }} colSpan=\"3\">\r\n                                <TagInput defaultTagNum={statesItems.defaultTagNum} searchStart={tagSearchStart}  searchBtnClick={statesItems.tagSearchBtnClick} />\r\n                            </td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th style={{ width: '15%' }}>Keywords</th>\r\n                            <td style={{ width: '85%' }} colSpan=\"3\">\r\n                              <Formik\r\n                                  initialValues={{\r\n                                      keyword: '',\r\n                                  }}\r\n                              // onSubmit={onSubmit}\r\n                              >\r\n                                {({ errors, touched }) => (\r\n                                  <FormGroup className=\"keyword-area\">\r\n                                    <Field\r\n                                        className=\"form-control\"\r\n                                        name=\"keyword\"\r\n                                        onChange={onKeywordChange}\r\n                                        value={statesItems.keyWordtext}\r\n                                        validate={this.validateKeyword}\r\n                                        onKeyDown={onKeywordpress}\r\n                                    />\r\n                                    {errors.keyword && touched.keyword && (\r\n                                        <div className=\"d-block noti-text\">\r\n                                            {errors.keyword}\r\n                                        </div>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                )}\r\n                              </Formik>\r\n                            </td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                        <Button className=\"btn-xl mt-4\" color=\"gray\" onClick={this.SearchClick}>\r\n                            ENTER\r\n                        </Button>\r\n                    </div>\r\n                  </Form>\r\n                </CardBody>\r\n              </Card>\r\n          </Colxx>\r\n        </Row>\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div>\r\n                  <Nav tabs>\r\n                    <NavItem>\r\n                      <NavLink\r\n                          className={classnames({ active: statesItems.activeTab === '1' })}\r\n                          onClick={() => { toggle('1', 'first'); }}>\r\n                          Num of Product\r\n                      </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink\r\n                            className={classnames({ active: statesItems.activeTab === '2' })}\r\n                            onClick={() => { toggle('2', 'first'); }}>\r\n                            Avg of Regular Price\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                      <NavLink\r\n                          className={classnames({ active: statesItems.activeTab === '3' })}\r\n                          onClick={() => { toggle('3', 'first'); }}>\r\n                          Num of Market\r\n                      </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                      <NavLink\r\n                          className={classnames({ active: statesItems.activeTab === '4' })}\r\n                          onClick={() => { toggle('4', 'first'); }}>\r\n                          Num of Review\r\n                      </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                      <NavLink\r\n                          className={classnames({ active: statesItems.activeTab === '5' })}\r\n                          onClick={() => { toggle('5', 'first'); }}>\r\n                          Num of Cart\r\n                      </NavLink>\r\n                    </NavItem>\r\n                  </Nav>\r\n                  <TabContent activeTab={statesItems.activeTab}>\r\n                    <TabPane tabId=\"1\">\r\n                      <Row className='mt-5'>\r\n                        <Colxx xxs=\"12\">\r\n                          <Card>\r\n                            <CardBody>\r\n                              <div className='box-title'>\r\n                                <h2>Broad Market</h2>\r\n                              </div>\r\n                              <div className='graph-area mt-5'>\r\n                                <p className='cont-noti'>단위: 건</p>\r\n                                <CompareLine options={statesItems.ProductOptions} series={statesItems.ProductSeries} height={boardTotalGraph.height} />\r\n                              </div>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </Colxx>\r\n                      </Row>\r\n                    </TabPane>\r\n                    <TabPane tabId=\"2\">\r\n                      <Row className='mt-5'>\r\n                        <Colxx xxs=\"12\">\r\n                          <Card>\r\n                            <CardBody>\r\n                              <div className='box-title'>\r\n                                <h2>Avg of Regular Price</h2>\r\n                              </div>\r\n                              <div className='graph-area'>\r\n                                <p className='cont-noti'>단위: 원</p>\r\n                                <CompareLine options={statesItems.PriceOptions} series={statesItems.PriceSeries} height={boardTotalGraph.height} />\r\n                              </div>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </Colxx>\r\n                      </Row>\r\n                    </TabPane>\r\n                    <TabPane tabId=\"3\">\r\n                      <Row className='mt-5'>\r\n                        <Colxx xxs=\"12\">\r\n                          <Card>\r\n                            <CardBody>\r\n                                <div className='box-title'>\r\n                                  <h2>Num of Market</h2>\r\n                                </div>\r\n                                <div className='graph-area'>\r\n                                  <p className='cont-noti'>단위: 건</p>\r\n                                  <CompareLine options={statesItems.MarketOptions} series={statesItems.MarketSeries} height={boardTotalGraph.height} />\r\n                                </div>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </Colxx>\r\n                      </Row>\r\n                    </TabPane>\r\n                    <TabPane tabId=\"4\">\r\n                      <Row className='mt-5'>\r\n                        <Colxx xxs=\"12\">\r\n                          <Card>\r\n                            <CardBody>\r\n                              <div className='box-title'>\r\n                                <h2>Num of Review</h2>\r\n                              </div>\r\n                              <div className='graph-area'>\r\n                                <p className='cont-noti'>단위: 건</p>\r\n                                <CompareLine options={statesItems.ReviewOptions} series={statesItems.ReviewSeries} height={boardTotalGraph.height} />\r\n                              </div>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </Colxx>\r\n                      </Row>\r\n                    </TabPane>\r\n                    <TabPane tabId=\"5\">\r\n                      <Row className='mt-5'>\r\n                        <Colxx xxs=\"12\">\r\n                          <Card>\r\n                            <CardBody>\r\n                              <div className='box-title'>\r\n                                <h2>Num of Cart</h2>\r\n                              </div>\r\n                              <div className='graph-area'>\r\n                                <p className='cont-noti'>단위: 건</p>\r\n                                <CompareLine options={statesItems.CartOptions} series={statesItems.CartSeries} height={boardTotalGraph.height} />\r\n                              </div>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </Colxx>\r\n                      </Row>\r\n                    </TabPane>\r\n                  </TabContent>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        <Row className=\"mt-5\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div>\r\n                  <Nav tabs>\r\n                    <NavItem>\r\n                      <NavLink\r\n                        className={classnames({ active: statesItems.activeTabSecond === '1' })}\r\n                        onClick={() => { toggle('1', 'second'); }} >\r\n                        Sales\r\n                      </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                      <NavLink\r\n                          className={classnames({ active: statesItems.activeTabSecond === '2' })}\r\n                          onClick={() => { toggle('2', 'second'); }} >\r\n                          Points\r\n                      </NavLink>\r\n                    </NavItem>\r\n                  </Nav>\r\n                  <TabContent activeTab={statesItems.activeTabSecond}>\r\n                    <TabPane tabId=\"1\">\r\n                      <Row className='mt-5'>\r\n                        <Colxx xxs=\"12\">\r\n                          <Card>\r\n                            <CardBody>\r\n                              <div className='box-title'>\r\n                                <h2>Benefits Type</h2>\r\n                              </div>\r\n                              <div className='graph-area mt-5'>\r\n                                <FullStackBar\r\n                                    options={statesItems.SalesOptions}\r\n                                    series={statesItems.SalesSeries}\r\n                                    height={fullStackBarGraphType2.height}/>\r\n                              </div>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </Colxx>\r\n                      </Row>\r\n                    </TabPane>\r\n                    <TabPane tabId=\"2\">\r\n                      <Row className='mt-5'>\r\n                        <Colxx xxs=\"12\">\r\n                          <Card>\r\n                            <CardBody>\r\n                              <div className='box-title'>\r\n                                <h2>Benefits Type</h2>\r\n                              </div>\r\n                              <div className='graph-area'>\r\n                                <FullStackBar\r\n                                    options={statesItems.PointsOptions}\r\n                                    series={statesItems.PointsSeries}\r\n                                    height={fullStackBarGraphType2.height} />\r\n                              </div>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </Colxx>\r\n                      </Row>\r\n                    </TabPane>\r\n                  </TabContent>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n        <Row className='mt-5'>\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <div className='box-title'>\r\n                  <h2> Price Distribution</h2>\r\n                </div>\r\n                <div className='bx_select_area mt-5'>\r\n                  <span className='select-title'>Competitors</span>\r\n                  <FormGroup className=\"select-box\">\r\n                    <Select\r\n                        components={{ Input: CustomSelectInput }}\r\n                        className=\"react-select\"\r\n                        classNamePrefix=\"react-select\"\r\n                        name=\"form-field-name\"\r\n                        value={statesItems.selectedOptions}\r\n                        onChange={(val) => this.setSelectedOptions(val)}\r\n                        options={selectedOptionsBase}\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n                <div className='graph-area brushChart_wrap'>\r\n                  <p className='cont-noti'>단위: 건</p>\r\n                  <BrushChart />\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Onboard;","C:\\tagons\\src\\views\\app\\onlineRetailer\\Overview.js",[],"C:\\tagons\\src\\components\\charts\\CompareScatter.js",[],"C:\\tagons\\src\\components\\charts\\CompareBubble.js",[],"C:\\tagons\\src\\views\\app\\onlineRetailer\\tableData.js",[],{"ruleId":"622","replacedBy":"623"},{"ruleId":"624","replacedBy":"625"},{"ruleId":"626","replacedBy":"627"},{"ruleId":"628","replacedBy":"629"},{"ruleId":"630","replacedBy":"631"},{"ruleId":"632","replacedBy":"633"},{"ruleId":"634","replacedBy":"635"},{"ruleId":"636","severity":1,"message":"637","line":82,"column":16,"nodeType":"638","messageId":"639","endLine":82,"endColumn":25},{"ruleId":"640","severity":1,"message":"641","line":33,"column":6,"nodeType":"642","endLine":33,"endColumn":8,"suggestions":"643"},{"ruleId":"640","severity":1,"message":"644","line":94,"column":24,"nodeType":"645","endLine":94,"endColumn":37},{"ruleId":"636","severity":1,"message":"637","line":99,"column":12,"nodeType":"638","messageId":"639","endLine":99,"endColumn":21},{"ruleId":"636","severity":1,"message":"637","line":115,"column":31,"nodeType":"638","messageId":"639","endLine":115,"endColumn":39},{"ruleId":"636","severity":1,"message":"637","line":130,"column":31,"nodeType":"638","messageId":"639","endLine":130,"endColumn":39},{"ruleId":"636","severity":1,"message":"637","line":143,"column":31,"nodeType":"638","messageId":"639","endLine":143,"endColumn":39},{"ruleId":"636","severity":1,"message":"637","line":160,"column":37,"nodeType":"638","messageId":"639","endLine":160,"endColumn":45},{"ruleId":"636","severity":1,"message":"637","line":173,"column":37,"nodeType":"638","messageId":"639","endLine":173,"endColumn":45},{"ruleId":"640","severity":1,"message":"646","line":282,"column":6,"nodeType":"642","endLine":282,"endColumn":22,"suggestions":"647"},{"ruleId":"636","severity":1,"message":"637","line":157,"column":13,"nodeType":"638","messageId":"639","endLine":157,"endColumn":22},{"ruleId":"636","severity":1,"message":"637","line":162,"column":14,"nodeType":"638","messageId":"639","endLine":162,"endColumn":23},{"ruleId":"640","severity":1,"message":"648","line":190,"column":5,"nodeType":"642","endLine":190,"endColumn":28,"suggestions":"649"},{"ruleId":"640","severity":1,"message":"650","line":163,"column":8,"nodeType":"642","endLine":163,"endColumn":39,"suggestions":"651"},{"ruleId":"640","severity":1,"message":"652","line":261,"column":8,"nodeType":"642","endLine":261,"endColumn":25,"suggestions":"653"},{"ruleId":"636","severity":1,"message":"637","line":38,"column":17,"nodeType":"638","messageId":"639","endLine":38,"endColumn":26},{"ruleId":"636","severity":1,"message":"637","line":41,"column":18,"nodeType":"638","messageId":"639","endLine":41,"endColumn":27},{"ruleId":"636","severity":1,"message":"654","line":85,"column":15,"nodeType":"638","messageId":"639","endLine":86,"endColumn":25},{"ruleId":"636","severity":1,"message":"655","line":94,"column":13,"nodeType":"638","messageId":"639","endLine":94,"endColumn":29},{"ruleId":"636","severity":1,"message":"656","line":106,"column":13,"nodeType":"638","messageId":"639","endLine":106,"endColumn":32},{"ruleId":"636","severity":1,"message":"656","line":130,"column":15,"nodeType":"638","messageId":"639","endLine":130,"endColumn":34},{"ruleId":"636","severity":1,"message":"654","line":165,"column":15,"nodeType":"638","messageId":"639","endLine":166,"endColumn":25},{"ruleId":"636","severity":1,"message":"655","line":174,"column":13,"nodeType":"638","messageId":"639","endLine":174,"endColumn":29},{"ruleId":"636","severity":1,"message":"656","line":185,"column":13,"nodeType":"638","messageId":"639","endLine":185,"endColumn":32},{"ruleId":"636","severity":1,"message":"656","line":209,"column":15,"nodeType":"638","messageId":"639","endLine":209,"endColumn":34},{"ruleId":"640","severity":1,"message":"657","line":233,"column":5,"nodeType":"642","endLine":233,"endColumn":32,"suggestions":"658"},{"ruleId":"636","severity":1,"message":"637","line":69,"column":17,"nodeType":"638","messageId":"639","endLine":69,"endColumn":26},{"ruleId":"636","severity":1,"message":"637","line":77,"column":18,"nodeType":"638","messageId":"639","endLine":77,"endColumn":27},{"ruleId":"636","severity":1,"message":"637","line":110,"column":17,"nodeType":"638","messageId":"639","endLine":110,"endColumn":26},{"ruleId":"636","severity":1,"message":"637","line":124,"column":18,"nodeType":"638","messageId":"639","endLine":124,"endColumn":27},{"ruleId":"636","severity":1,"message":"654","line":142,"column":13,"nodeType":"638","messageId":"639","endLine":142,"endColumn":28},{"ruleId":"636","severity":1,"message":"655","line":150,"column":11,"nodeType":"638","messageId":"639","endLine":150,"endColumn":27},{"ruleId":"636","severity":1,"message":"656","line":244,"column":11,"nodeType":"638","messageId":"639","endLine":244,"endColumn":30},{"ruleId":"636","severity":1,"message":"637","line":341,"column":13,"nodeType":"638","messageId":"639","endLine":341,"endColumn":22},{"ruleId":"636","severity":1,"message":"637","line":346,"column":14,"nodeType":"638","messageId":"639","endLine":346,"endColumn":23},{"ruleId":"640","severity":1,"message":"659","line":380,"column":6,"nodeType":"642","endLine":380,"endColumn":29,"suggestions":"660"},{"ruleId":"636","severity":1,"message":"656","line":90,"column":29,"nodeType":"638","messageId":"639","endLine":90,"endColumn":48},{"ruleId":"640","severity":1,"message":"661","line":135,"column":7,"nodeType":"642","endLine":135,"endColumn":63,"suggestions":"662"},{"ruleId":"636","severity":1,"message":"637","line":19,"column":11,"nodeType":"638","messageId":"639","endLine":19,"endColumn":20},{"ruleId":"636","severity":1,"message":"637","line":23,"column":12,"nodeType":"638","messageId":"639","endLine":23,"endColumn":21},{"ruleId":"640","severity":1,"message":"663","line":47,"column":6,"nodeType":"642","endLine":47,"endColumn":29,"suggestions":"664"},{"ruleId":"636","severity":1,"message":"656","line":44,"column":15,"nodeType":"638","messageId":"639","endLine":44,"endColumn":34},{"ruleId":"640","severity":1,"message":"665","line":18,"column":7,"nodeType":"642","endLine":18,"endColumn":38,"suggestions":"666"},{"ruleId":"636","severity":1,"message":"656","line":79,"column":15,"nodeType":"638","messageId":"639","endLine":79,"endColumn":34},{"ruleId":"636","severity":1,"message":"637","line":355,"column":16,"nodeType":"638","messageId":"639","endLine":355,"endColumn":25},{"ruleId":"636","severity":1,"message":"637","line":384,"column":14,"nodeType":"638","messageId":"639","endLine":384,"endColumn":23},{"ruleId":"636","severity":1,"message":"637","line":437,"column":32,"nodeType":"638","messageId":"639","endLine":437,"endColumn":40},{"ruleId":"636","severity":1,"message":"637","line":63,"column":48,"nodeType":"638","messageId":"639","endLine":63,"endColumn":56},{"ruleId":"636","severity":1,"message":"637","line":68,"column":40,"nodeType":"638","messageId":"639","endLine":68,"endColumn":48},{"ruleId":"636","severity":1,"message":"637","line":78,"column":31,"nodeType":"638","messageId":"639","endLine":78,"endColumn":39},{"ruleId":"636","severity":1,"message":"637","line":92,"column":12,"nodeType":"638","messageId":"639","endLine":92,"endColumn":21},{"ruleId":"640","severity":1,"message":"667","line":96,"column":6,"nodeType":"642","endLine":96,"endColumn":8,"suggestions":"668"},{"ruleId":"640","severity":1,"message":"669","line":99,"column":6,"nodeType":"642","endLine":99,"endColumn":23,"suggestions":"670"},{"ruleId":"640","severity":1,"message":"671","line":105,"column":6,"nodeType":"642","endLine":105,"endColumn":28,"suggestions":"672"},{"ruleId":"636","severity":1,"message":"637","line":447,"column":34,"nodeType":"638","messageId":"639","endLine":447,"endColumn":42},{"ruleId":"636","severity":1,"message":"637","line":453,"column":37,"nodeType":"638","messageId":"639","endLine":453,"endColumn":45},{"ruleId":"636","severity":1,"message":"637","line":459,"column":33,"nodeType":"638","messageId":"639","endLine":459,"endColumn":41},{"ruleId":"636","severity":1,"message":"637","line":467,"column":36,"nodeType":"638","messageId":"639","endLine":467,"endColumn":44},{"ruleId":"636","severity":1,"message":"637","line":501,"column":18,"nodeType":"638","messageId":"639","endLine":501,"endColumn":27},{"ruleId":"636","severity":1,"message":"637","line":516,"column":55,"nodeType":"638","messageId":"639","endLine":516,"endColumn":63},{"ruleId":"636","severity":1,"message":"637","line":520,"column":44,"nodeType":"638","messageId":"639","endLine":520,"endColumn":52},{"ruleId":"636","severity":1,"message":"637","line":535,"column":18,"nodeType":"638","messageId":"639","endLine":535,"endColumn":27},{"ruleId":"636","severity":1,"message":"637","line":555,"column":18,"nodeType":"638","messageId":"639","endLine":555,"endColumn":27},{"ruleId":"636","severity":1,"message":"637","line":631,"column":34,"nodeType":"638","messageId":"639","endLine":631,"endColumn":42},{"ruleId":"636","severity":1,"message":"673","line":184,"column":15,"nodeType":"638","messageId":"639","endLine":184,"endColumn":29},{"ruleId":"636","severity":1,"message":"674","line":187,"column":15,"nodeType":"638","messageId":"639","endLine":187,"endColumn":29},{"ruleId":"675","severity":2,"message":"676","line":347,"column":13,"nodeType":"677","messageId":"678","endLine":347,"endColumn":29},{"ruleId":"636","severity":1,"message":"656","line":399,"column":31,"nodeType":"638","messageId":"639","endLine":399,"endColumn":50},{"ruleId":"675","severity":2,"message":"676","line":447,"column":13,"nodeType":"677","messageId":"678","endLine":447,"endColumn":29},{"ruleId":"636","severity":1,"message":"656","line":499,"column":23,"nodeType":"638","messageId":"639","endLine":499,"endColumn":42},{"ruleId":"636","severity":1,"message":"637","line":528,"column":16,"nodeType":"638","messageId":"639","endLine":528,"endColumn":25},{"ruleId":"636","severity":1,"message":"637","line":569,"column":34,"nodeType":"638","messageId":"639","endLine":569,"endColumn":42},{"ruleId":"636","severity":1,"message":"637","line":211,"column":34,"nodeType":"638","messageId":"639","endLine":211,"endColumn":42},{"ruleId":"636","severity":1,"message":"637","line":104,"column":34,"nodeType":"638","messageId":"639","endLine":104,"endColumn":42},{"ruleId":"636","severity":1,"message":"637","line":108,"column":32,"nodeType":"638","messageId":"639","endLine":108,"endColumn":40},{"ruleId":"636","severity":1,"message":"637","line":130,"column":14,"nodeType":"638","messageId":"639","endLine":130,"endColumn":23},{"ruleId":"636","severity":1,"message":"637","line":484,"column":59,"nodeType":"638","messageId":"639","endLine":484,"endColumn":67},{"ruleId":"636","severity":1,"message":"637","line":528,"column":59,"nodeType":"638","messageId":"639","endLine":528,"endColumn":67},{"ruleId":"636","severity":1,"message":"637","line":705,"column":31,"nodeType":"638","messageId":"639","endLine":705,"endColumn":39},{"ruleId":"636","severity":1,"message":"637","line":717,"column":31,"nodeType":"638","messageId":"639","endLine":717,"endColumn":39},{"ruleId":"636","severity":1,"message":"637","line":729,"column":40,"nodeType":"638","messageId":"639","endLine":729,"endColumn":48},{"ruleId":"636","severity":1,"message":"637","line":741,"column":35,"nodeType":"638","messageId":"639","endLine":741,"endColumn":43},{"ruleId":"636","severity":1,"message":"637","line":792,"column":30,"nodeType":"638","messageId":"639","endLine":792,"endColumn":38},{"ruleId":"636","severity":1,"message":"637","line":993,"column":30,"nodeType":"638","messageId":"639","endLine":993,"endColumn":38},{"ruleId":"636","severity":1,"message":"637","line":1038,"column":30,"nodeType":"638","messageId":"639","endLine":1038,"endColumn":38},{"ruleId":"636","severity":1,"message":"637","line":1081,"column":14,"nodeType":"638","messageId":"639","endLine":1081,"endColumn":23},{"ruleId":"636","severity":1,"message":"637","line":1092,"column":14,"nodeType":"638","messageId":"639","endLine":1092,"endColumn":23},{"ruleId":"636","severity":1,"message":"637","line":1103,"column":14,"nodeType":"638","messageId":"639","endLine":1103,"endColumn":23},{"ruleId":"636","severity":1,"message":"637","line":1114,"column":14,"nodeType":"638","messageId":"639","endLine":1114,"endColumn":23},{"ruleId":"636","severity":1,"message":"637","line":1125,"column":14,"nodeType":"638","messageId":"639","endLine":1125,"endColumn":23},{"ruleId":"636","severity":1,"message":"637","line":1136,"column":14,"nodeType":"638","messageId":"639","endLine":1136,"endColumn":23},{"ruleId":"622","replacedBy":"679"},{"ruleId":"624","replacedBy":"680"},{"ruleId":"626","replacedBy":"681"},{"ruleId":"628","replacedBy":"682"},{"ruleId":"630","replacedBy":"683"},{"ruleId":"632","replacedBy":"684"},{"ruleId":"634","replacedBy":"685"},{"ruleId":"636","severity":1,"message":"637","line":267,"column":8,"nodeType":"638","messageId":"639","endLine":267,"endColumn":16},{"ruleId":"636","severity":1,"message":"637","line":286,"column":31,"nodeType":"638","messageId":"639","endLine":286,"endColumn":39},{"ruleId":"636","severity":1,"message":"637","line":343,"column":37,"nodeType":"638","messageId":"639","endLine":343,"endColumn":45},{"ruleId":"636","severity":1,"message":"637","line":347,"column":37,"nodeType":"638","messageId":"639","endLine":347,"endColumn":45},{"ruleId":"636","severity":1,"message":"637","line":363,"column":14,"nodeType":"638","messageId":"639","endLine":363,"endColumn":23},{"ruleId":"636","severity":1,"message":"637","line":379,"column":37,"nodeType":"638","messageId":"639","endLine":379,"endColumn":45},{"ruleId":"636","severity":1,"message":"637","line":382,"column":27,"nodeType":"638","messageId":"639","endLine":382,"endColumn":35},{"ruleId":"636","severity":1,"message":"637","line":391,"column":37,"nodeType":"638","messageId":"639","endLine":391,"endColumn":45},{"ruleId":"636","severity":1,"message":"637","line":393,"column":27,"nodeType":"638","messageId":"639","endLine":393,"endColumn":35},{"ruleId":"636","severity":1,"message":"637","line":427,"column":14,"nodeType":"638","messageId":"639","endLine":427,"endColumn":23},{"ruleId":"636","severity":1,"message":"637","line":441,"column":33,"nodeType":"638","messageId":"639","endLine":441,"endColumn":41},{"ruleId":"636","severity":1,"message":"637","line":463,"column":14,"nodeType":"638","messageId":"639","endLine":463,"endColumn":23},{"ruleId":"636","severity":1,"message":"637","line":483,"column":32,"nodeType":"638","messageId":"639","endLine":483,"endColumn":40},{"ruleId":"686","severity":2,"message":"687","line":3,"column":42,"nodeType":"688","endLine":3,"endColumn":59},{"ruleId":"686","severity":2,"message":"689","line":22,"column":24,"nodeType":"688","endLine":22,"endColumn":63},{"ruleId":"636","severity":1,"message":"637","line":287,"column":34,"nodeType":"638","messageId":"639","endLine":287,"endColumn":42},{"ruleId":"636","severity":1,"message":"637","line":292,"column":35,"nodeType":"638","messageId":"639","endLine":292,"endColumn":43},{"ruleId":"636","severity":1,"message":"637","line":313,"column":14,"nodeType":"638","messageId":"639","endLine":313,"endColumn":23},{"ruleId":"636","severity":1,"message":"637","line":337,"column":36,"nodeType":"638","messageId":"639","endLine":337,"endColumn":44},{"ruleId":"636","severity":1,"message":"637","line":339,"column":27,"nodeType":"638","messageId":"639","endLine":339,"endColumn":35},{"ruleId":"636","severity":1,"message":"637","line":346,"column":34,"nodeType":"638","messageId":"639","endLine":346,"endColumn":42},{"ruleId":"636","severity":1,"message":"637","line":348,"column":27,"nodeType":"638","messageId":"639","endLine":348,"endColumn":35},{"ruleId":"636","severity":1,"message":"637","line":355,"column":35,"nodeType":"638","messageId":"639","endLine":355,"endColumn":43},{"ruleId":"636","severity":1,"message":"637","line":357,"column":27,"nodeType":"638","messageId":"639","endLine":357,"endColumn":35},{"ruleId":"636","severity":1,"message":"637","line":364,"column":36,"nodeType":"638","messageId":"639","endLine":364,"endColumn":44},{"ruleId":"636","severity":1,"message":"637","line":366,"column":27,"nodeType":"638","messageId":"639","endLine":366,"endColumn":35},{"ruleId":"636","severity":1,"message":"637","line":373,"column":34,"nodeType":"638","messageId":"639","endLine":373,"endColumn":42},{"ruleId":"636","severity":1,"message":"637","line":375,"column":27,"nodeType":"638","messageId":"639","endLine":375,"endColumn":35},{"ruleId":"636","severity":1,"message":"637","line":408,"column":14,"nodeType":"638","messageId":"639","endLine":408,"endColumn":23},{"ruleId":"636","severity":1,"message":"637","line":434,"column":27,"nodeType":"638","messageId":"639","endLine":434,"endColumn":35},"jsx-a11y/accessible-emoji",[],"jsx-a11y/label-has-for",[],"lines-around-directive",["690"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'requestHide' and 'timeOut'. Either include them or remove the dependency array.","ArrayExpression",["691"],"Assignments to the 'categoryList' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","React Hook useEffect has a missing dependency: 'searchActivrClick'. Either include it or remove the dependency array.",["692"],"React Hook useEffect has missing dependencies: 'callGIApi' and 'dispatch'. Either include them or remove the dependency array.",["693"],"React Hook useEffect has missing dependencies: 'props.activeTab' and 'store.SearchCondition.activeFirstTab'. Either include them or remove the dependency array.",["694"],"React Hook useEffect has missing dependencies: 'store.SearchCondition.activeFirstTab' and 'store2.iPfactorTrendandfactor'. Either include them or remove the dependency array.",["695"],"Unexpected unnamed method 'click'.","Unexpected unnamed method 'custom'.","Unexpected unnamed method 'formatter'.","React Hook useEffect has missing dependencies: 'clickChart' and 'dispatch'. Either include them or remove the dependency array.",["696"],"React Hook useEffect has missing dependencies: 'ScatterChartOption.options', 'callTrendQuadApi', 'dispatch', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["697"],"React Hook useEffect has missing dependencies: 'lineOptions', 'props', 'startApp.SearchCondition.FromDate', and 'startApp.SearchCondition.ToDate'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["698"],"React Hook React.useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.",["699"],"React Hook useEffect has a missing dependency: 'store2.iPfactorGiRelatedword'. Either include it or remove the dependency array.",["700"],"React Hook useEffect has a missing dependency: 'socialData'. Either include it or remove the dependency array.",["701"],"React Hook useEffect has a missing dependency: 'socialDataList'. Either include it or remove the dependency array.",["702"],"React Hook useEffect has missing dependencies: 'props' and 'selectArray'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["703"],"Unexpected unnamed method 'max'.","Unexpected unnamed method 'min'.","no-undef","'TableHeatMapData' is not defined.","Identifier","undef",[],[],["690"],[],[],[],[],"import/no-unresolved","Unable to resolve path to module 'react-tag-input'.","Literal","Casing of ../../../components/charts/BrushChart does not match the underlying filesystem.","padding-line-between-statements",{"desc":"704","fix":"705"},{"desc":"706","fix":"707"},{"desc":"708","fix":"709"},{"desc":"710","fix":"711"},{"desc":"710","fix":"712"},{"desc":"713","fix":"714"},{"desc":"715","fix":"716"},{"desc":"717","fix":"718"},{"desc":"719","fix":"720"},{"desc":"721","fix":"722"},{"desc":"723","fix":"724"},{"desc":"725","fix":"726"},{"desc":"727","fix":"728"},"Update the dependencies array to be: [requestHide, timeOut]",{"range":"729","text":"730"},"Update the dependencies array to be: [activeFirstTab, searchActivrClick]",{"range":"731","text":"732"},"Update the dependencies array to be: [callGIApi, dispatch, store.SearchCondition]",{"range":"733","text":"734"},"Update the dependencies array to be: [props.activeTab, store.SearchCondition.activeFirstTab, store2.iPfactorTrendandfactor]",{"range":"735","text":"736"},{"range":"737","text":"736"},"Update the dependencies array to be: [clickChart, dispatch, store2.iGiBubbleelectData]",{"range":"738","text":"739"},"Update the dependencies array to be: [ScatterChartOption.options, callTrendQuadApi, dispatch, props, store.SearchCondition]",{"range":"740","text":"741"},"Update the dependencies array to be: [industryApp.iPfactorTrendandfactor, lineOptions, props, props.showPreTrend, startApp.SearchCondition.FromDate, startApp.SearchCondition.ToDate]",{"range":"742","text":"743"},"Update the dependencies array to be: [store, store.SearchCondition]",{"range":"744","text":"745"},"Update the dependencies array to be: [store2.iPfactorGiRelatedword, store2.iPfactorGiRelatedwords]",{"range":"746","text":"747"},"Update the dependencies array to be: [socialData]",{"range":"748","text":"749"},"Update the dependencies array to be: [socialDataList, socialDataTitle]",{"range":"750","text":"751"},"Update the dependencies array to be: [props, props.searchBtnClick, selectArray]",{"range":"752","text":"753"},[742,744],"[requestHide, timeOut]",[10367,10383],"[activeFirstTab, searchActivrClick]",[6129,6152],"[callGIApi, dispatch, store.SearchCondition]",[5152,5183],"[props.activeTab, store.SearchCondition.activeFirstTab, store2.iPfactorTrendandfactor]",[8441,8458],[7730,7757],"[clickChart, dispatch, store2.iGiBubbleelectData]",[12238,12261],"[ScatterChartOption.options, callTrendQuadApi, dispatch, props, store.SearchCondition]",[4975,5031],"[industryApp.iPfactorTrendandfactor, lineOptions, props, props.showPreTrend, startApp.SearchCondition.FromDate, startApp.SearchCondition.ToDate]",[1702,1725],"[store, store.SearchCondition]",[765,796],"[store2.iPfactorGiRelatedword, store2.iPfactorGiRelatedwords]",[3487,3489],"[socialData]",[3595,3612],"[socialDataList, socialDataTitle]",[3763,3785],"[props, props.searchBtnClick, selectArray]"]